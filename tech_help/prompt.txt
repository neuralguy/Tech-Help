

=== Project Structure ===
tech_help/
├── accounts
│   ├── forms.py
│   ├── urls.py
│   └── views.py
├── articles
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── 0002_commentvote.py
│   │   ├── 0003_reaction_delete_commentvote.py
│   │   ├── 0004_delete_reaction.py
│   │   └── __init__.py
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── forms.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── comparisons
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── 0002_alter_comparison_title.py
│   │   └── __init__.py
│   ├── templatetags
│   │   ├── comparison_tags.py
│   │   └── custom_filters.py
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── forms.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── devices
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── 0002_specificationfield_is_higher_better.py
│   │   ├── 0003_alter_device_description.py
│   │   └── __init__.py
│   ├── templatetags
│   │   ├── __init__.py
│   │   └── device_tags.py
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── forms.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── profiles
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   └── __init__.py
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── static
│   └── css
│       ├── animations.css
│       └── base.css
├── tech_help
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── templates
│   ├── accounts
│   │   ├── login.html
│   │   ├── profile.html
│   │   └── register.html
│   ├── articles
│   │   ├── article_confirm_delete.html
│   │   ├── article_detail.html
│   │   ├── article_form.html
│   │   └── article_list.html
│   ├── comparisons
│   │   ├── comparison_create.html
│   │   ├── comparison_detail.html
│   │   └── comparison_list.html
│   ├── devices
│   │   ├── device_confirm_delete.html
│   │   ├── device_detail.html
│   │   ├── device_form.html
│   │   ├── device_list.html
│   │   └── specification_form.html
│   ├── base.html
│   ├── home.html
│   └── wsgi.py
├── users
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   └── __init__.py
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── db.sqlite3
├── manage.py
├── prompt.txt


=== Code Files Content ===

--- manage.py ---
 #!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tech_help.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
 
--- END manage.py ---

--- prompt.txt ---
 

=== Project Structure ===
tech_help/
├── accounts
│   ├── forms.py
│   ├── urls.py
│   └── views.py
├── articles
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── 0002_commentvote.py
│   │   ├── 0003_reaction_delete_commentvote.py
│   │   ├── 0004_delete_reaction.py
│   │   └── __init__.py
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── forms.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── comparisons
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── 0002_alter_comparison_title.py
│   │   └── __init__.py
│   ├── templatetags
│   │   ├── comparison_tags.py
│   │   └── custom_filters.py
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── forms.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── devices
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── 0002_specificationfield_is_higher_better.py
│   │   ├── 0003_alter_device_description.py
│   │   └── __init__.py
│   ├── templatetags
│   │   ├── __init__.py
│   │   └── device_tags.py
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── forms.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── media
│   ├── articles
│   │   └── poco-x6-1.jpg
│   ├── default-images
│   │   ├── Ноутбуки.png
│   │   ├── Полноразмерные наушники.png
│   │   └── Смартфоны.png
│   └── devices
│       ├── poco-x6-1.jpg
│       ├── poco-x6-2.jpg
│       ├── poco-x6-3.jpg
│       ├── poco-x6.jpg
│       └── poco-x6_1168DRJ.jpg
├── profiles
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   └── __init__.py
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── static
│   └── css
│       ├── animations.css
│       └── base.css
├── tech_help
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── templates
│   ├── accounts
│   │   ├── login.html
│   │   ├── profile.html
│   │   └── register.html
│   ├── articles
│   │   ├── article_confirm_delete.html
│   │   ├── article_detail.html
│   │   ├── article_form.html
│   │   └── article_list.html
│   ├── comparisons
│   │   ├── comparison_create.html
│   │   ├── comparison_detail.html
│   │   └── comparison_list.html
│   ├── devices
│   │   ├── device_confirm_delete.html
│   │   ├── device_detail.html
│   │   ├── device_form.html
│   │   ├── device_list.html
│   │   └── specification_form.html
│   ├── base.html
│   ├── home.html
│   └── wsgi.py
├── users
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   └── __init__.py
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── db.sqlite3
├── manage.py


=== Code Files Content ===

--- manage.py ---
 #!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tech_help.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
 
--- END manage.py ---

--- static/css/base.css ---
 body { color: #94a3b8; }  /* text-slate-400 */

.nav-link {
    transition: all 0.3s ease;
}
.nav-link:hover {
    transform: translateY(-3px);
    color: #60a5fa; /* text-blue-400 */
}
.card-hover {
    transition: all 0.3s ease;
}
.card-hover:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
} 
--- END static/css/base.css ---

--- static/css/animations.css ---
 ss
/*
Список эффектов:
•  fade-in-up: Появление элемента с плавным поднятием снизу вверх.
•  fade-in-down: Появление элемента с плавным опусканием сверху вниз.
•  fade-in-left: Появление элемента с плавным сдвигом слева направо.
•  fade-in-right: Появление элемента с плавным сдвигом справа налево.
•  scale-up: Увеличение размера элемента от меньшего к нормальному.
•  scale-down: Уменьшение размера элемента от большего к нормальному.
•  flip-horizontal: Вращение элемента по горизонтали на 360 градусов.
•  rotate: Непрерывное вращение элемента по кругу.
•  pulse: Пульсирующее изменение размера элемента.
•  wave: Горизонтальное перемещение элемента влево и вправо.
•  blink: Мигание элемента (появление и исчезновение).
•  zoom-in: Плавное увеличение размера элемента, как при приближении.
•  wipe: Эффект "вытирания", когда элемент постепенно появляется слева направо.
•  expand: Анимация расширения элемента по горизонтали от 0 до полной ширины.
•  wave-grow: Увеличение элемента по горизонтали (как волна).
•  cube-rotate: Непрерывное вращение элемента в трехмерном пространстве, как куб.
•  highlight: При наведении курсора появляется тень от текста.
•  typing-animation: Эффект печатающегося текста.
*/

/* fade-in-up */
@keyframes fade-in-up {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in-up {
  animation: fade-in-up 0.5s ease-out forwards;
}

.fade-in-up-hover:hover {
  animation: fade-in-up 0.5s ease-out forwards;
}

.fade-in-up-inf {
    animation: fade-in-up 0.5s ease-out infinite;
}
/* fade-in-down */
@keyframes fade-in-down {
  0% {
    opacity: 0;
    transform: translateY(-20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in-down {
  animation: fade-in-down 0.5s ease-out forwards;
}

.fade-in-down-hover:hover {
  animation: fade-in-down 0.5s ease-out forwards;
}

.fade-in-down-inf {
    animation: fade-in-down 0.5s ease-out infinite;
}


/* fade-in-left */
@keyframes fade-in-left {
  0% {
    opacity: 0;
    transform: translateX(-20px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.fade-in-left {
  animation: fade-in-left 0.5s ease-out forwards;
}

.fade-in-left-hover:hover {
  animation: fade-in-left 0.5s ease-out forwards;
}

.fade-in-left-inf {
    animation: fade-in-left 0.5s ease-out infinite;
}


/* fade-in-right */
@keyframes fade-in-right {
  0% {
    opacity: 0;
    transform: translateX(20px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.fade-in-right {
  animation: fade-in-right 0.5s ease-out forwards;
}

.fade-in-right-hover:hover {
  animation: fade-in-right 0.5s ease-out forwards;
}

.fade-in-right-inf {
    animation: fade-in-right 0.5s ease-out infinite;
}

/* scale-up */
@keyframes scale-up {
  0% {
    transform: scale(0.5);
  }
  100% {
    transform: scale(1);
  }
}

.scale-up {
  animation: scale-up 0.5s ease-out forwards;
}

.scale-up-hover:hover {
  animation: scale-up 0.5s ease-out forwards;
}

.scale-up-inf {
    animation: scale-up 0.5s ease-out infinite;
}

/* scale-down */
@keyframes scale-down {
  0% {
    transform: scale(1.5);
  }
  100% {
    transform: scale(1);
  }
}

.scale-down {
  animation: scale-down 0.5s ease-out forwards;
}

.scale-down-hover:hover {
  animation: scale-down 0.5s ease-out forwards;
}

.scale-down-inf {
    animation: scale-down 0.5s ease-out infinite;
}

/* flip-horizontal */
@keyframes flip-horizontal {
  0% {
    transform: rotateY(0deg);
  }
  50% {
    transform: rotateY(180deg);
  }
  100% {
    transform: rotateY(360deg);
  }
}

.flip-horizontal {
  animation: flip-horizontal 1s linear forwards;
}

.flip-horizontal-hover:hover {
  animation: flip-horizontal 1s linear forwards;
}

.flip-horizontal-inf {
  animation: flip-horizontal 3s linear infinite;
}


/* rotate */
@keyframes rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.rotate {
  animation: rotate 2s linear forwards;
}

.rotate-hover:hover {
  animation: rotate 2s linear forwards;
}

.rotate-inf {
  animation: rotate 2s linear infinite;
}


/* pulse */
@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.1);
  }
  100% {
    transform: scale(1);
  }
}

.pulse {
  animation: pulse 1s ease-in-out forwards;
}

.pulse-hover:hover {
  animation: pulse 1s ease-in-out forwards;
}


.pulse-inf {
  animation: pulse 1s ease-in-out infinite;
}

/* wave */
@keyframes wave {
  0% {
    transform: translateX(0);
  }
  50% {
    transform: translateX(20px);
  }
  100% {
    transform: translateX(0);
  }
}

.wave {
  animation: wave 2s ease-in-out forwards;
}

.wave-hover:hover {
  animation: wave 2s ease-in-out forwards;
}

.wave-inf {
  animation: wave 2s ease-in-out infinite;
}

/* blink */
@keyframes blink {
  0% {
    opacity: 1;
  }
  50% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

.blink {
  animation: blink 1s ease-in-out forwards;
}

.blink-hover:hover {
  animation: blink 1s ease-in-out forwards;
}

.blink-inf {
  animation: blink 1s ease-in-out infinite;
}

/* zoom-in */
@keyframes zoom-in {
  0% {
    transform: scale(0.5);
  }
  100% {
    transform: scale(1);
  }
}

.zoom-in {
  animation: zoom-in 0.5s ease-out forwards;
}

.zoom-in-hover:hover {
  animation: zoom-in 0.5s ease-out forwards;
}

.zoom-in-inf {
  animation: zoom-in 0.5s ease-out infinite;
}


/* wipe */
@keyframes wipe {
  0% {
    clip-path: inset(0 100% 0 0);
  }
  100% {
    clip-path: inset(0 0 0 0);
  }
}

.wipe {
  animation: wipe 0.5s ease-out forwards;
}

.wipe-hover:hover {
  animation: wipe 0.5s ease-out forwards;
}

.wipe-inf {
  animation: wipe 0.5s ease-out infinite;
}

/* expand */
@keyframes expand {
  0% {
    width: 0;
  }
  100% {
    width: 100%;
  }
}

.expand {
  animation: expand 1s ease-out forwards;
}

.expand-hover:hover {
  animation: expand 1s ease-out forwards;
}

.expand-inf {
  animation: expand 1s ease-out infinite;
}

/* wave-grow */
@keyframes wave-grow {
  0% {
    transform: scaleX(0);
  }
  100% {
    transform: scaleX(1);
  }
}

.wave-grow {
  animation: wave-grow 0.5s ease-out forwards;
}

.wave-grow-hover:hover {
  animation: wave-grow 0.5s ease-out forwards;
}

.wave-grow-inf {
  animation: wave-grow 0.5s ease-out infinite;
}

/* cube-rotate */
@keyframes cube-rotate {
  0% {
    transform: rotateX(0deg) rotateY(0deg);
  }
  100% {
    transform: rotateX(360deg) rotateY(360deg);
  }
}

.cube-rotate {
  animation: cube-rotate 5s linear forwards;
}

.cube-rotate-hover:hover {
  animation: cube-rotate 5s linear forwards;
}

.cube-rotate-inf {
  animation: cube-rotate 5s linear infinite;
}

/* highlight */
.highlight {
  transition: text-shadow 0.3s ease-in-out;
}

.highlight-hover:hover {
  text-shadow: 0 0 5px #007bff, 0px 0px 10px #007bff; /* Цвет и размытие тени */
}

/* typing-animation */
.typing-animation {
  display: inline-block;
  overflow: hidden;
  border-right: .15em solid gray; /* Курсор */
  white-space: nowrap;
  margin: 0 auto;
  letter-spacing: .15em;
  animation:
    typing 4s steps(40, end) forwards,
    blink-caret .75s step-end infinite;
}

.typing-animation-hover:hover{
  display: inline-block;
  overflow: hidden;
  border-right: .15em solid gray; /* Курсор */
  white-space: nowrap;
  margin: 0 auto;
  letter-spacing: .15em;
  animation:
    typing 4s steps(40, end) forwards,
    blink-caret .75s step-end infinite;
}

.typing-animation-inf {
  display: inline-block;
  overflow: hidden;
  border-right: .15em solid gray; /* Курсор */
  white-space: nowrap;
  margin: 0 auto;
  letter-spacing: .15em;
  animation:
    typing 4s steps(40, end) infinite,
    blink-caret .75s step-end infinite;
}

@keyframes typing {
      from { width: 0 }
      to { width: 60% }
    }

@keyframes blink-caret {
  from, to { border-color: transparent }
  50% { border-color: gray; }
}
 
--- END static/css/animations.css ---

--- comparisons/tests.py ---
 from django.test import TestCase

# Create your tests here.
 
--- END comparisons/tests.py ---

--- comparisons/views.py ---
 from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from .models import Comparison, ComparisonVote
from devices.models import Device
from collections import defaultdict
from django.views.decorators.cache import never_cache

@login_required
def comparison_create(request):
    if request.method == 'POST':
        device_ids = request.POST.getlist('devices')
        if len(device_ids) == 2:
            comparison = Comparison.objects.create(
                created_by=request.user,
                title="Сравнение устройств"
            )
            comparison.devices.set(device_ids)
            if not comparison.slug:
                comparison.save()
            return redirect('comparisons:comparison_detail', slug=comparison.slug)
    
    devices = Device.objects.all().order_by('-created_at')
    context = {
        'devices': devices,
    }
    return render(request, 'comparisons/comparison_create.html', context)

@never_cache
def comparison_detail(request, slug):
    comparison = get_object_or_404(Comparison, slug=slug)
    devices = comparison.devices.all()
    
    # Инициализируем структуру данных
    specifications = {}
    
    for device in devices:
        for spec in device.specifications.all().select_related('field__category'):
            category = spec.field.category.name if spec.field.category else "Общие"
            field_name = spec.field.name
            field_unit = spec.field.unit
            
            if category not in specifications:
                specifications[category] = {}
            
            if field_name not in specifications[category]:
                specifications[category][field_name] = {
                    'unit': field_unit,
                    'values': {},
                    'is_higher_better': spec.field.is_higher_better
                }
            
            specifications[category][field_name]['values'][device.id] = spec.value

    context = {
        'comparison': comparison,
        'devices': devices,
        'specifications': specifications.items(),  # Преобразуем в список пар
        'user_vote': None
    }
    
    if request.user.is_authenticated:
        context['user_vote'] = ComparisonVote.objects.filter(
            comparison=comparison,
            user=request.user
        ).first()
    
    return render(request, 'comparisons/comparison_detail.html', context)

@login_required
def vote_for_device(request, comparison_slug, device_slug):
    comparison = get_object_or_404(Comparison, slug=comparison_slug)
    device = get_object_or_404(Device, slug=device_slug)
    
    if device in comparison.devices.all():
        ComparisonVote.objects.update_or_create(
            comparison=comparison,
            user=request.user,
            defaults={'device': device}
        )
    
    return redirect('comparisons:comparison_detail', slug=comparison_slug)

def comparison_list(request):
    comparisons = Comparison.objects.all().order_by('-created_date')
    return render(request, 'comparisons/comparison_list.html', {
        'comparisons': comparisons
    })

 
--- END comparisons/views.py ---

--- comparisons/apps.py ---
 from django.apps import AppConfig


class ComparisonsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'comparisons'
 
--- END comparisons/apps.py ---

--- comparisons/admin.py ---
 from django.contrib import admin
from .models import (
    Comparison,
    ComparisonVote
)

@admin.register(Comparison)
class ComparisonAdmin(admin.ModelAdmin):
    list_display = ['title', 'created_by', 'created_date', 'is_public']
    list_filter = ['is_public', 'created_date']
    search_fields = ['title']
    filter_horizontal = ['devices']

@admin.register(ComparisonVote)
class ComparisonVoteAdmin(admin.ModelAdmin):
    list_display = ['comparison', 'device', 'user', 'created_date']
    list_filter = ['created_date']
    search_fields = ['comparison__title', 'device__name', 'user__username']
 
--- END comparisons/admin.py ---

--- comparisons/forms.py ---
  
--- END comparisons/forms.py ---

--- comparisons/urls.py ---
 from django.urls import path
from . import views

app_name = 'comparisons'

urlpatterns = [
    path('', views.comparison_list, name='comparison_list'),
    path('create/', views.comparison_create, name='comparison_create'),
    path('<slug:slug>/', views.comparison_detail, name='comparison_detail'),
    path('<slug:comparison_slug>/vote/<slug:device_slug>/', 
         views.vote_for_device, name='vote_for_device'),
]  
--- END comparisons/urls.py ---

--- comparisons/__init__.py ---
  
--- END comparisons/__init__.py ---

--- comparisons/models.py ---
 from django.db import models
from django.utils.text import slugify
from django.conf import settings
from devices.models import Device

class Comparison(models.Model):
    title = models.CharField(max_length=255, verbose_name='Название', blank=True)
    slug = models.SlugField(unique=True, blank=True)
    devices = models.ManyToManyField(Device, verbose_name='Устройства')
    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name='Создатель')
    created_date = models.DateTimeField(auto_now_add=True)
    is_public = models.BooleanField(default=True, verbose_name='Публичное сравнение')
    
    class Meta:
        verbose_name = 'Сравнение'
        verbose_name_plural = 'Сравнения'
        ordering = ['-created_date']
    
    def save(self, *args, **kwargs):
        # Генерация заголовка, если он не задан
        if not self.title:
            devices_list = list(self.devices.all())
            if devices_list:
                self.title = f"Сравнение: {' vs '.join([device.name for device in devices_list[:3]])}"
                if len(devices_list) > 3:
                    self.title += " и другие"
        
        # Генерация slug, если он не задан
        if not self.slug:
            base_slug = slugify(self.title)
            unique_slug = base_slug
            num = 1
            while Comparison.objects.filter(slug=unique_slug).exists():
                unique_slug = f"{base_slug}-{num}"
                num += 1
            self.slug = unique_slug
        
        super().save(*args, **kwargs)
    
    def __str__(self):
        return self.title

class ComparisonVote(models.Model):
    comparison = models.ForeignKey(Comparison, on_delete=models.CASCADE, related_name='votes', verbose_name='Сравнение')
    device = models.ForeignKey(Device, on_delete=models.CASCADE, verbose_name='Устройство')
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name='Пользователь')
    created_date = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = 'Голос в сравнении'
        verbose_name_plural = 'Голоса в сравнении'
        unique_together = ['comparison', 'user']  # Один пользователь - один голос в сравнении
    
    def __str__(self):
        return f"Голос за {self.device.name} в {self.comparison.title}"
 
--- END comparisons/models.py ---

--- comparisons/migrations/0001_initial.py ---
 # Generated by Django 5.1.6 on 2025-02-17 17:38

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('devices', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comparison',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='Название')),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('is_public', models.BooleanField(default=True, verbose_name='Публичное сравнение')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
                ('devices', models.ManyToManyField(to='devices.device', verbose_name='Устройства')),
            ],
            options={
                'verbose_name': 'Сравнение',
                'verbose_name_plural': 'Сравнения',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='ComparisonVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('comparison', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='comparisons.comparison', verbose_name='Сравнение')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.device', verbose_name='Устройство')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Голос в сравнении',
                'verbose_name_plural': 'Голоса в сравнении',
                'unique_together': {('comparison', 'user')},
            },
        ),
    ]
 
--- END comparisons/migrations/0001_initial.py ---

--- comparisons/migrations/0002_alter_comparison_title.py ---
 # Generated by Django 5.1.6 on 2025-02-18 19:10

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('comparisons', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='comparison',
            name='title',
            field=models.CharField(blank=True, max_length=255, verbose_name='Название'),
        ),
    ]
 
--- END comparisons/migrations/0002_alter_comparison_title.py ---

--- comparisons/migrations/__init__.py ---
  
--- END comparisons/migrations/__init__.py ---

--- comparisons/templatetags/comparison_tags.py ---
 from django import template

register = template.Library()

@register.filter
def get_item(dictionary, key):
    return dictionary.get(key)  
--- END comparisons/templatetags/comparison_tags.py ---

--- comparisons/templatetags/custom_filters.py ---
 from django import template

register = template.Library()

@register.filter
def get_item(dictionary, key):
    return dictionary.get(key)  
--- END comparisons/templatetags/custom_filters.py ---

--- devices/tests.py ---
 from django.test import TestCase

# Create your tests here.
 
--- END devices/tests.py ---

--- devices/views.py ---
 from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.db.models import Q
from django.http import JsonResponse
from .models import Device, DeviceCategory, DeviceImage, SpecificationCategory
from django.contrib import messages
from .forms import DeviceForm, DeviceSpecificationFormSet, SpecificationFieldForm


def device_list(request):
    devices = Device.objects.all().order_by('-created_at')
    categories = DeviceCategory.objects.all()
    
    # Фильтрация по категории
    category_slug = request.GET.get('category')
    if category_slug:
        devices = devices.filter(category__slug=category_slug)
    
    # Поиск по названию
    search_query = request.GET.get('search')
    if search_query:
        devices = devices.filter(
            Q(name__icontains=search_query) | 
            Q(manufacturer__icontains=search_query)
        )
    
    context = {
        'devices': devices,
        'categories': categories,
        'current_category': category_slug,
        'search_query': search_query,
    }
    return render(request, 'devices/device_list.html', context)

def device_detail(request, slug):
    device = get_object_or_404(Device, slug=slug)
    # Группируем характеристики по категориям
    specifications = {}
    for category in SpecificationCategory.objects.all():
        specs = device.specifications.filter(field__category=category).select_related('field')
        if specs.exists():
            specifications[category] = specs
    
    return render(request, 'devices/device_detail.html', {
        'device': device,
        'specifications': specifications,
    })


def get_device_specs(request):
    if request.headers.get('x-requested-with') == 'XMLHttpRequest':
        device_id = request.GET.get('device_id')
        if device_id:
            device = get_object_or_404(Device, id=device_id)
            specs = [{
                'name': spec.specification.name,
                'value': spec.value,
                'unit': spec.specification.unit
            } for spec in device.specifications.all()]
            return JsonResponse({'specs': specs})
    return JsonResponse({'error': 'Invalid request'}, status=400)


@login_required
def device_create(request):
    if request.method == 'POST':
        form = DeviceForm(request.POST)
        if form.is_valid():
            device = form.save(commit=False)
            
            # Обработка главного изображения
            if 'main_image' in request.FILES:
                device.main_image = request.FILES['main_image']
            
            device.save()
            
            # Обработка дополнительных изображений
            for image in request.FILES.getlist('images'):
                DeviceImage.objects.create(device=device, image=image)
            
            # Обработка спецификаций
            formset = DeviceSpecificationFormSet(request.POST, instance=device)
            if formset.is_valid():
                formset.save()
                messages.success(request, 'Устройство успешно создано.')
                return redirect('devices:device_detail', slug=device.slug)
    else:
        form = DeviceForm()
        formset = DeviceSpecificationFormSet()
    
    categories = SpecificationCategory.objects.prefetch_related('fields').all()
    
    return render(request, 'devices/device_form.html', {
        'form': form,
        'formset': formset,
        'categories': categories,
        'title': 'Создание устройства'
    })


@login_required
def device_edit(request, slug):
    device = get_object_or_404(Device, slug=slug)
    
    if request.method == 'POST':
        form = DeviceForm(request.POST, instance=device)
        formset = DeviceSpecificationFormSet(request.POST, instance=device)
        
        if form.is_valid():
            device = form.save(commit=False)
            
            # Обработка главного изображения
            if 'main_image' in request.FILES:
                device.main_image = request.FILES['main_image']
            
            device.save()
            
            # Обработка дополнительных изображений
            for image in request.FILES.getlist('images'):
                DeviceImage.objects.create(device=device, image=image)
            
            # Обработка спецификаций
            if formset.is_valid():
                formset.save()
                messages.success(request, 'Устройство успешно обновлено.')
                return redirect('devices:device_detail', slug=device.slug)
    else:
        form = DeviceForm(instance=device)
        formset = DeviceSpecificationFormSet(instance=device)
    
    return render(request, 'devices/device_form.html', {
        'form': form,
        'formset': formset,
        'device': device,
        'title': 'Редактирование устройства',
        'categories': SpecificationCategory.objects.prefetch_related('fields').all()
    })


@login_required
def specification_create(request):
    if not request.user.is_staff:
        messages.error(request, 'У вас нет прав на создание спецификаций.')
        return redirect('devices:device_list')
    
    if request.method == 'POST':
        form = SpecificationFieldForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Характеристика успешно создана!')
            return redirect('devices:device_list')
    else:
        form = SpecificationFieldForm()
    
    return render(request, 'devices/specification_form.html', {
        'form': form,
        'title': 'Создать характеристику'
    })


@login_required
def device_delete(request, slug):
    device = get_object_or_404(Device, slug=slug)
    
    if request.method == 'POST':
        device.delete()
        messages.success(request, 'Устройство успешно удалено.')
        return redirect('devices:device_list')
        
    return render(request, 'devices/device_confirm_delete.html', {
        'device': device
    }) 
--- END devices/views.py ---

--- devices/apps.py ---
 from django.apps import AppConfig


class DevicesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'devices'
 
--- END devices/apps.py ---

--- devices/admin.py ---
 from django.contrib import admin
from .models import (
    Device, 
    DeviceCategory, 
    DeviceImage, 
    SpecificationCategory, 
    SpecificationField, 
    DeviceSpecification,
)


class SpecificationFieldInline(admin.TabularInline):
    model = SpecificationField
    extra = 1

@admin.register(SpecificationCategory)
class SpecificationCategoryAdmin(admin.ModelAdmin):
    list_display = ['name', 'order']
    search_fields = ['name']
    ordering = ['order']
    inlines = [SpecificationFieldInline]

class DeviceSpecificationInline(admin.TabularInline):
    model = DeviceSpecification
    extra = 1
    autocomplete_fields = ['field']

class DeviceImageInline(admin.TabularInline):
    model = DeviceImage
    extra = 1

@admin.register(Device)
class DeviceAdmin(admin.ModelAdmin):
    list_display = ['name', 'category', 'created_at']
    list_filter = ['category']
    search_fields = ['name', 'description']
    inlines = [DeviceImageInline, DeviceSpecificationInline]
    prepopulated_fields = {'slug': ('name',)}

@admin.register(DeviceCategory)
class DeviceCategoryAdmin(admin.ModelAdmin):
    list_display = ['name']
    prepopulated_fields = {'slug': ('name',)}

@admin.register(SpecificationField)
class SpecificationFieldAdmin(admin.ModelAdmin):
    list_display = ['name', 'category', 'unit', 'order']
    list_filter = ['category']
    search_fields = ['name', 'description']
    ordering = ['category', 'order']

 
--- END devices/admin.py ---

--- devices/forms.py ---
 from django import forms
from .models import (
    Device, 
    DeviceSpecification, 
    SpecificationCategory, 
    SpecificationField
)


class DeviceForm(forms.ModelForm):
    class Meta:
        model = Device
        fields = ['name', 'category', 'description']
        widgets = {
            'name': forms.TextInput(attrs={
                'class': 'form-input w-full rounded-lg border-gray-700 bg-gray-800 text-white',
                'placeholder': 'Название устройства'
            }),
            'category': forms.Select(attrs={
                'class': 'form-select w-full rounded-lg border-gray-700 bg-gray-800 text-white'
            }),
            'description': forms.Textarea(attrs={
                'class': 'form-textarea w-full rounded-lg border-gray-700 bg-gray-800 text-white',
                'rows': 3,
                'placeholder': 'Описание устройства'
            }),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            if field != 'specifications':
                self.fields[field].widget.attrs.update({'class': 'form-input'})

    def save(self, commit=True):
        device = super().save(commit=commit)
        if commit and self.cleaned_data.get('specifications'):
            # Удаляем старые спецификации
            device.specifications.all().delete()
            # Добавляем новые
            specs_data = self.cleaned_data['specifications']
            for spec_data in specs_data:
                spec, _ = SpecificationField.objects.get_or_create(
                    name=spec_data['name'],
                    defaults={'unit': spec_data.get('unit', '')}
                )
                DeviceSpecification.objects.create(
                    device=device,
                    specification=spec,
                    value=spec_data['value']
                )
        return device

    def clean_images(self):
        """Метод для обработки дополнительных изображений"""
        return self.files.getlist('images')

class DeviceSpecificationForm(forms.ModelForm):
    class Meta:
        model = DeviceSpecification
        fields = ['field', 'value']
        widgets = {
            'field': forms.HiddenInput(),
            'value': forms.TextInput(attrs={
                'class': 'form-input w-full rounded-lg border-gray-700 bg-gray-800 text-white'
            })
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.instance and self.instance.field:
            self.fields['field'].initial = self.instance.field
            if self.instance.field.unit:
                self.fields['value'].widget.attrs['placeholder'] = f'Введите значение в {self.instance.field.unit}'

class SpecificationFieldForm(forms.ModelForm):
    class Meta:
        model = SpecificationField
        fields = ['name', 'category', 'description', 'unit', 'order']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-input'}),
            'category': forms.Select(attrs={'class': 'form-select'}),
            'description': forms.Textarea(attrs={'class': 'form-textarea', 'rows': 3}),
            'unit': forms.TextInput(attrs={'class': 'form-input'}),
            'order': forms.NumberInput(attrs={'class': 'form-input'})
        }

class BaseDeviceSpecificationFormSet(forms.BaseInlineFormSet):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.categories = {}
        
        categories = SpecificationCategory.objects.prefetch_related('fields').all()
        
        for category in categories:
            self.categories[category] = []
            for field in category.fields.all():
                existing_spec = None
                if self.instance.pk:
                    existing_spec = self.instance.specifications.filter(field=field).first()
                
                form = DeviceSpecificationForm(
                    data=self.data if self.data else None,
                    prefix=f'spec_{field.id}',
                    instance=existing_spec or DeviceSpecification(device=self.instance, field=field),
                    initial={'field': field.id}
                )
                self.categories[category].append(form)

    def is_valid(self):
        valid = True
        for category_forms in self.categories.values():
            for form in category_forms:
                if form.is_valid():
                    continue
                valid = False
        return valid

    def save(self, commit=True):
        specs = []
        if commit:
            # Сохраняем только заполненные спецификации
            for category_forms in self.categories.values():
                for form in category_forms:
                    if form.is_valid() and form.cleaned_data.get('value'):
                        spec = form.save(commit=False)
                        spec.device = self.instance
                        spec.save()
                        specs.append(spec)
            
            # Удаляем старые спецификации, которые не были обновлены
            self.instance.specifications.exclude(
                id__in=[spec.id for spec in specs]
            ).delete()
        
        return specs

# Создаем FormSet для спецификаций устройства
DeviceSpecificationFormSet = forms.inlineformset_factory(
    Device,
    DeviceSpecification,
    form=DeviceSpecificationForm,
    formset=BaseDeviceSpecificationFormSet,
    extra=0,
    can_delete=False
)  
--- END devices/forms.py ---

--- devices/urls.py ---
 from django.urls import path
from . import views

app_name = 'devices'

urlpatterns = [
    path('', views.device_list, name='device_list'),
    path('create/', views.device_create, name='device_create'),
    path('<slug:slug>/', views.device_detail, name='device_detail'),
    path('<slug:slug>/edit/', views.device_edit, name='device_edit'),
    path('<slug:slug>/delete/', views.device_delete, name='device_delete'),
    path('specification/create/', views.specification_create, name='specification_create'),
]
 
--- END devices/urls.py ---

--- devices/__init__.py ---
  
--- END devices/__init__.py ---

--- devices/models.py ---
 from django.db import models
from django.contrib.auth.models import User
from django.utils.text import slugify
from django.conf import settings
from django.urls import reverse
from unidecode import unidecode  # добавим для корректной транслитерации

class DeviceCategory(models.Model):
    name = models.CharField(max_length=200, verbose_name='Название')
    slug = models.SlugField(unique=True, blank=True)
    
    class Meta:
        verbose_name = 'Категория устройств'
        verbose_name_plural = 'Категории устройств'
    
    def __str__(self):
        return self.name
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(unidecode(self.name))
        super().save(*args, **kwargs)


class SpecificationCategory(models.Model):
    """Категория характеристик (например, 'Дизайн', 'Экран', 'Процессор')"""
    name = models.CharField(max_length=100, verbose_name='Название')
    order = models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')

    class Meta:
        verbose_name = 'Категория характеристик'
        verbose_name_plural = 'Категории характеристик'
        ordering = ['order']

    def __str__(self):
        return self.name

class SpecificationField(models.Model):
    """Поле характеристики (например, 'Вес', 'Толщина', 'Высота')"""
    category = models.ForeignKey(
        SpecificationCategory, 
        on_delete=models.CASCADE,
        related_name='fields',
        verbose_name='Категория'
    )
    name = models.CharField(max_length=100, verbose_name='Название')
    description = models.TextField(
        blank=True, 
        verbose_name='Описание',
        help_text='Объяснение характеристики'
    )
    unit = models.CharField(
        max_length=20, 
        blank=True, 
        verbose_name='Единица измерения',
        help_text='Например: мм, кг, МГц'
    )
    order = models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')
    is_higher_better = models.BooleanField(
        default=False,
        verbose_name="Чем выше тем лучше",
        help_text="Определяет выделение лучшего значения в сравнениях"
    )

    class Meta:
        verbose_name = 'Поле характеристики'
        verbose_name_plural = 'Поля характеристик'
        ordering = ['category', 'order']

    def __str__(self):
        return f"{self.category.name} - {self.name}"

class DeviceImage(models.Model):
    device = models.ForeignKey('Device', related_name='images', on_delete=models.CASCADE)
    image = models.ImageField(upload_to='devices/')
    order = models.PositiveIntegerField(default=0)

    class Meta:
        ordering = ['order']


class Device(models.Model):
    name = models.CharField(max_length=200, verbose_name='Название')
    slug = models.SlugField(unique=True, blank=True)
    description = models.TextField(verbose_name='Описание', blank=True)
    main_image = models.ImageField(
        upload_to='devices/',
        verbose_name='Главное изображение',
        null=True,
        blank=True
    )
    category = models.ForeignKey(
        DeviceCategory, 
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name='Категория'
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='Дата обновления')

    class Meta:
        ordering = ['-created_at']
        verbose_name = 'Устройство'
        verbose_name_plural = 'Устройства'

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(unidecode(self.name))
            original_slug = self.slug
            counter = 1
            while Device.objects.filter(slug=self.slug).exists():
                self.slug = f'{original_slug}-{counter}'
                counter += 1
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return reverse('comparisons:device_detail', kwargs={'slug': self.slug})
    
    def get_first_image(self):
        if self.main_image:
            return self.main_image
        first_image = self.images.first()
        return first_image.image if first_image else None

    def __str__(self):
        return self.name

class DeviceSpecification(models.Model):
    """Значение характеристики для конкретного устройства"""
    device = models.ForeignKey(
        'Device', 
        on_delete=models.CASCADE,
        related_name='specifications',
        verbose_name='Устройство'
    )
    field = models.ForeignKey(
        SpecificationField,
        on_delete=models.CASCADE,
        verbose_name='Характеристика',
        null=True,
        blank=True
    )
    value = models.CharField(
        max_length=255, 
        blank=True,
        verbose_name='Значение'
    )

    class Meta:
        verbose_name = 'Характеристика устройства'
        verbose_name_plural = 'Характеристики устройства'
        unique_together = ['device', 'field']

    def __str__(self):
        return f"{self.device.name} - {self.field.name if self.field else 'Без характеристики'}: {self.value}"
 
--- END devices/models.py ---

--- devices/migrations/0002_specificationfield_is_higher_better.py ---
 # Generated by Django 5.1.6 on 2025-02-18 19:10

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('devices', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='specificationfield',
            name='is_higher_better',
            field=models.BooleanField(default=False, help_text='Определяет выделение лучшего значения в сравнениях', verbose_name='Чем выше тем лучше'),
        ),
    ]
 
--- END devices/migrations/0002_specificationfield_is_higher_better.py ---

--- devices/migrations/0001_initial.py ---
 # Generated by Django 5.1.6 on 2025-02-17 17:38

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('slug', models.SlugField(blank=True, unique=True)),
            ],
            options={
                'verbose_name': 'Категория устройств',
                'verbose_name_plural': 'Категории устройств',
            },
        ),
        migrations.CreateModel(
            name='SpecificationCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': 'Категория характеристик',
                'verbose_name_plural': 'Категории характеристик',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('description', models.TextField(verbose_name='Описание')),
                ('main_image', models.ImageField(blank=True, null=True, upload_to='devices/', verbose_name='Главное изображение')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='devices.devicecategory', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Устройство',
                'verbose_name_plural': 'Устройства',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DeviceImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='devices/')),
                ('order', models.PositiveIntegerField(default=0)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='devices.device')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='SpecificationField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, help_text='Объяснение характеристики', verbose_name='Описание')),
                ('unit', models.CharField(blank=True, help_text='Например: мм, кг, МГц', max_length=20, verbose_name='Единица измерения')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='devices.specificationcategory', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Поле характеристики',
                'verbose_name_plural': 'Поля характеристик',
                'ordering': ['category', 'order'],
            },
        ),
        migrations.CreateModel(
            name='DeviceSpecification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=255, verbose_name='Значение')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specifications', to='devices.device', verbose_name='Устройство')),
                ('field', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='devices.specificationfield', verbose_name='Характеристика')),
            ],
            options={
                'verbose_name': 'Характеристика устройства',
                'verbose_name_plural': 'Характеристики устройства',
                'unique_together': {('device', 'field')},
            },
        ),
    ]
 
--- END devices/migrations/0001_initial.py ---

--- devices/migrations/0003_alter_device_description.py ---
 # Generated by Django 5.1.6 on 2025-03-17 20:06

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('devices', '0002_specificationfield_is_higher_better'),
    ]

    operations = [
        migrations.AlterField(
            model_name='device',
            name='description',
            field=models.TextField(blank=True, verbose_name='Описание'),
        ),
    ]
 
--- END devices/migrations/0003_alter_device_description.py ---

--- devices/migrations/__init__.py ---
  
--- END devices/migrations/__init__.py ---

--- devices/templatetags/device_tags.py ---
 from django import template

register = template.Library()

@register.filter(name='add_class')
def add_class(field, class_name):
    return field.as_widget(attrs={'class': class_name}) 
--- END devices/templatetags/device_tags.py ---

--- devices/templatetags/__init__.py ---
  
--- END devices/templatetags/__init__.py ---

--- accounts/views.py ---
 from django.shortcuts import render, redirect
from django.contrib.auth import login, logout, authenticate
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .forms import RegisterForm, LoginForm

@login_required
def profile_view(request):
    return render(request, 'accounts/profile.html')

def login_view(request):
    if request.method == 'POST':
        form = LoginForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            messages.success(request, 'Вы успешно вошли!')
            return redirect('home')
    else:
        form = LoginForm()
    return render(request, 'accounts/login.html', {'form': form})

def register(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, 'Регистрация успешна!')
            return redirect('home')
    else:
        form = RegisterForm()
    return render(request, 'accounts/register.html', {'form': form})

def logout_view(request):
    logout(request)
    messages.success(request, 'Вы успешно вышли!')
    return redirect('home')  
--- END accounts/views.py ---

--- accounts/forms.py ---
 from django import forms
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from users.models import User

class RegisterForm(UserCreationForm):
    email = forms.EmailField(required=True)
    
    class Meta:
        model = User
        fields = ('username', 'email', 'password1', 'password2')
        
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs.update({
                'class': 'w-full rounded-lg border-gray-300 bg-white text-gray-900'
            })

class LoginForm(AuthenticationForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs.update({
                'class': 'w-full rounded-lg border-gray-300 bg-white text-gray-900'
            })  
--- END accounts/forms.py ---

--- accounts/urls.py ---
 from django.urls import path
from . import views

app_name = 'accounts'

urlpatterns = [
    path('profile/', views.profile_view, name='profile'),
    path('register/', views.register, name='register'),
    path('login/', views.login_view, name='login'),
    path('logout/', views.logout_view, name='logout'),
]  
--- END accounts/urls.py ---

--- profiles/tests.py ---
 from django.test import TestCase

# Create your tests here.
 
--- END profiles/tests.py ---

--- profiles/views.py ---
 from django.shortcuts import render

# Create your views here.
 
--- END profiles/views.py ---

--- profiles/apps.py ---
 from django.apps import AppConfig


class ProfilesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'profiles'
 
--- END profiles/apps.py ---

--- profiles/admin.py ---
 from django.contrib import admin
from .models import Profile, Achievement, UserAchievement

@admin.register(Profile)
class ProfileAdmin(admin.ModelAdmin):
    list_display = ('user', 'articles_read', 'comments_count', 'comparisons_created', 'votes_count')
    list_filter = ('notify_on_comment_reply', 'notify_on_article_update', 'notify_on_device_update')
    search_fields = ('user__username', 'user__email')
    
    fieldsets = (
        ('Основная информация', {
            'fields': ('user', 'avatar')
        }),
        ('Избранное', {
            'fields': ('favorite_articles', 'favorite_devices')
        }),
        ('Статистика', {
            'fields': ('articles_read', 'comments_count', 'comparisons_created', 'votes_count')
        }),
        ('Настройки уведомлений', {
            'fields': ('notify_on_comment_reply', 'notify_on_article_update', 'notify_on_device_update')
        }),
    )
    
    readonly_fields = ('articles_read', 'comments_count', 'comparisons_created', 'votes_count')

@admin.register(Achievement)
class AchievementAdmin(admin.ModelAdmin):
    list_display = ('name', 'condition_type', 'condition_value')
    list_filter = ('condition_type',)
    search_fields = ('name', 'description')

class UserAchievementInline(admin.TabularInline):
    model = UserAchievement
    extra = 0
    readonly_fields = ('date_earned',)
    can_delete = False

@admin.register(UserAchievement)
class UserAchievementAdmin(admin.ModelAdmin):
    list_display = ('user', 'achievement', 'date_earned')
    list_filter = ('achievement', 'date_earned')
    search_fields = ('user__username', 'achievement__name')
    readonly_fields = ('date_earned',)
 
--- END profiles/admin.py ---

--- profiles/__init__.py ---
  
--- END profiles/__init__.py ---

--- profiles/models.py ---
 from django.db import models
from django.conf import settings
from django.db.models.signals import post_save
from django.dispatch import receiver
from articles.models import Article
from comparisons.models import Comparison, Device

class Profile(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='profile')
    avatar = models.ImageField(upload_to='avatars/', default='avatars/default.png', verbose_name='Аватар')
    favorite_articles = models.ManyToManyField(Article, blank=True, related_name='favorited_by', verbose_name='Избранные статьи')
    favorite_devices = models.ManyToManyField(Device, blank=True, related_name='favorited_by', verbose_name='Избранные устройства')
    
    # Статистика
    articles_read = models.PositiveIntegerField(default=0, verbose_name='Прочитано статей')
    comments_count = models.PositiveIntegerField(default=0, verbose_name='Количество комментариев')
    comparisons_created = models.PositiveIntegerField(default=0, verbose_name='Создано сравнений')
    votes_count = models.PositiveIntegerField(default=0, verbose_name='Количество голосов')
    
    # Настройки уведомлений
    notify_on_comment_reply = models.BooleanField(default=True, verbose_name='Уведомлять об ответах на комментарии')
    notify_on_article_update = models.BooleanField(default=True, verbose_name='Уведомлять об обновлениях избранных статей')
    notify_on_device_update = models.BooleanField(default=True, verbose_name='Уведомлять об обновлениях избранных устройств')

    class Meta:
        verbose_name = 'Профиль'
        verbose_name_plural = 'Профили'

    def __str__(self):
        return f'Профиль пользователя {self.user.username}'

class Achievement(models.Model):
    name = models.CharField(max_length=100, verbose_name='Название')
    description = models.TextField(verbose_name='Описание')
    icon = models.ImageField(upload_to='achievements/', verbose_name='Иконка')
    condition_value = models.PositiveIntegerField(verbose_name='Значение для получения')
    condition_type = models.CharField(
        max_length=50,
        choices=[
            ('articles_read', 'Прочитано статей'),
            ('comments_count', 'Написано комментариев'),
            ('comparisons_created', 'Создано сравнений'),
            ('votes_count', 'Сделано голосов'),
        ],
        verbose_name='Тип достижения'
    )

    class Meta:
        verbose_name = 'Достижение'
        verbose_name_plural = 'Достижения'

    def __str__(self):
        return self.name

class UserAchievement(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='achievements')
    achievement = models.ForeignKey(Achievement, on_delete=models.CASCADE)
    date_earned = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = 'Достижение пользователя'
        verbose_name_plural = 'Достижения пользователей'
        unique_together = ['user', 'achievement']

    def __str__(self):
        return f'{self.user.username} - {self.achievement.name}'

@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)

@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def save_user_profile(sender, instance, **kwargs):
    instance.profile.save()
 
--- END profiles/models.py ---

--- profiles/migrations/0001_initial.py ---
 # Generated by Django 5.1.6 on 2025-02-17 17:38

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('articles', '__first__'),
        ('devices', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
                ('icon', models.ImageField(upload_to='achievements/', verbose_name='Иконка')),
                ('condition_value', models.PositiveIntegerField(verbose_name='Значение для получения')),
                ('condition_type', models.CharField(choices=[('articles_read', 'Прочитано статей'), ('comments_count', 'Написано комментариев'), ('comparisons_created', 'Создано сравнений'), ('votes_count', 'Сделано голосов')], max_length=50, verbose_name='Тип достижения')),
            ],
            options={
                'verbose_name': 'Достижение',
                'verbose_name_plural': 'Достижения',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(default='avatars/default.png', upload_to='avatars/', verbose_name='Аватар')),
                ('articles_read', models.PositiveIntegerField(default=0, verbose_name='Прочитано статей')),
                ('comments_count', models.PositiveIntegerField(default=0, verbose_name='Количество комментариев')),
                ('comparisons_created', models.PositiveIntegerField(default=0, verbose_name='Создано сравнений')),
                ('votes_count', models.PositiveIntegerField(default=0, verbose_name='Количество голосов')),
                ('notify_on_comment_reply', models.BooleanField(default=True, verbose_name='Уведомлять об ответах на комментарии')),
                ('notify_on_article_update', models.BooleanField(default=True, verbose_name='Уведомлять об обновлениях избранных статей')),
                ('notify_on_device_update', models.BooleanField(default=True, verbose_name='Уведомлять об обновлениях избранных устройств')),
                ('favorite_articles', models.ManyToManyField(blank=True, related_name='favorited_by', to='articles.article', verbose_name='Избранные статьи')),
                ('favorite_devices', models.ManyToManyField(blank=True, related_name='favorited_by', to='devices.device', verbose_name='Избранные устройства')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль',
                'verbose_name_plural': 'Профили',
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_earned', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Достижение пользователя',
                'verbose_name_plural': 'Достижения пользователей',
                'unique_together': {('user', 'achievement')},
            },
        ),
    ]
 
--- END profiles/migrations/0001_initial.py ---

--- profiles/migrations/__init__.py ---
  
--- END profiles/migrations/__init__.py ---

--- tech_help/settings.py ---
 from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-llsc$=xe^*3#yvt-0-tv1d(z3tyfop(7p+a=22wmhzbfw)9ka='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Наши приложения
    'articles.apps.ArticlesConfig',
    'comparisons.apps.ComparisonsConfig',
    'users.apps.UsersConfig',
    'profiles.apps.ProfilesConfig',
    'devices.apps.DevicesConfig',
    
    'django_browser_reload',
    'django_ckeditor_5',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_browser_reload.middleware.BrowserReloadMiddleware',
]

ROOT_URLCONF = 'tech_help.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tech_help.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 6,
        }
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Настройки медиафайлов
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
AUTH_USER_MODEL = 'users.User'

# Настройки CKEditor
CKEDITOR_UPLOAD_PATH = "uploads/"  # Путь для загрузки файлов (если используете ckeditor_uploader)
CKEDITOR_IMAGE_BACKEND = "pillow"  # Для обработки изображений
CKEDITOR_JQUERY_URL = '//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js'  # Подключение jQuery

CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', 'undo', 'redo'],
        'plugins': ['EssentialsPlugin', 'ParagraphPlugin', 'HeadingPlugin', 'ListPlugin', 'BoldPlugin', 'ItalicPlugin', 'LinkPlugin', 'BlockQuotePlugin', 'ImageUploadPlugin'],
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft', 'imageStyle:full', 'imageStyle:alignRight'],
            'styles': [
                'full',
                'alignLeft',
                'alignRight',
            ],
        },
    }
}
 
--- END tech_help/settings.py ---

--- tech_help/urls.py ---
 """
URL configuration for tech_help project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from django.views.generic import TemplateView
from django_ckeditor_5 import views as ckeditor_5_views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('articles/', include('articles.urls')),
    path('comparisons/', include("comparisons.urls")),
    path('devices/', include("devices.urls")),
    path('accounts/', include('accounts.urls')),
    path("__reload__/", include("django_browser_reload.urls")),
    path('', TemplateView.as_view(template_name='home.html'), name='home'),
    path('ckeditor5/', include('django_ckeditor_5.urls')),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

 
--- END tech_help/urls.py ---

--- tech_help/__init__.py ---
  
--- END tech_help/__init__.py ---

--- tech_help/wsgi.py ---
 """
WSGI config for tech_help project.

It exposes the WSGI callable as a module-level variable named ``application``.
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tech_help.settings')

application = get_wsgi_application()  
--- END tech_help/wsgi.py ---

--- tech_help/asgi.py ---
 """
ASGI config for tech_help project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tech_help.settings')

application = get_asgi_application()
 
--- END tech_help/asgi.py ---

--- templates/home.html ---
 {% extends 'base.html' %}

{% block title %}Tech Help - Главная{% endblock %}


{% block content %}
<div class="text-center fade-in">
    <h1 class="text-4xl font-bold text-blue-400 mb-4">
        Добро пожаловать в Tech Help
    </h1>
    <p class="text-xl text-gray-400 mb-8">
        Ваш путеводитель в мире современных технологий
    </p>
    
    <!-- Карточки с возможностями -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mt-12">
        <div class="bg-slate-800 p-6 rounded-lg border border-slate-700 card-hover">
            <h2 class="text-xl font-semibold text-blue-400 mb-4">Статьи</h2>
            <p class="text-gray-400 mb-4">
                Читайте подробные обзоры и аналитику последних технологических новинок
            </p>
            <a href="{% url 'articles:article_list' %}" class="text-blue-400 hover:text-blue-300 transition-colors duration-200 mt-4 inline-block">
                Читать статьи
            </a>
        </div>
        
        <div class="bg-slate-800 p-6 rounded-lg border border-slate-700 card-hover">
            <h2 class="text-xl font-semibold text-blue-400 mb-4">Устройства</h2>
            <p class="text-gray-400 mb-4">
                Изучайте характеристики и отзывы о современных устройствах
            </p>
            <a href="{% url 'devices:device_list' %}" class="text-blue-400 hover:text-blue-300 transition-colors duration-200 mt-4 inline-block">
                Смотреть устройства
            </a>
        </div>
        
        <div class="bg-slate-800 p-6 rounded-lg border border-slate-700 card-hover">
            <h2 class="text-xl font-semibold text-blue-400 mb-4">Сравнения</h2>
            <p class="text-gray-400 mb-4">
                Сравнивайте характеристики устройств и делайте осознанный выбор
            </p>
            <a href="{% url 'comparisons:comparison_list' %}" class="text-blue-400 hover:text-blue-300 transition-colors duration-200 mt-4 inline-block">
                Сравнить устройства
            </a>
        </div>
    </div>

    <!-- Новые разделы -->
    <div class="mt-16">
        <h2 class="text-3xl font-bold text-blue-400 mb-8">Почему выбирают нас?</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            <div class="bg-slate-800 p-6 rounded-lg border border-slate-700 card-hover">
                <i class="fas fa-chart-line text-4xl text-blue-400 mb-4"></i>
                <h3 class="text-xl font-semibold text-blue-400 mb-2">Актуальная информация</h3>
                <p class="text-gray-400">Всегда свежие данные и последние новости</p>
            </div>
            <div class="bg-slate-800 p-6 rounded-lg border border-slate-700 card-hover">
                <i class="fas fa-users text-4xl text-blue-400 mb-4"></i>
                <h3 class="text-xl font-semibold text-blue-400 mb-2">Экспертное сообщество</h3>
                <p class="text-gray-400">Общайтесь с профессионалами и энтузиастами</p>
            </div>
            <div class="bg-slate-800 p-6 rounded-lg border border-slate-700 card-hover">
                <i class="fas fa-tools text-4xl text-blue-400 mb-4"></i>
                <h3 class="text-xl font-semibold text-blue-400 mb-2">Удобные инструменты</h3>
                <p class="text-gray-400">Сравнение, анализ и подбор устройств</p>
            </div>
            <div class="bg-slate-800 p-6 rounded-lg border border-slate-700 card-hover">
                <i class="fas fa-mobile-alt text-4xl text-blue-400 mb-4"></i>
                <h3 class="text-xl font-semibold text-blue-400 mb-2">Широкий выбор</h3>
                <p class="text-gray-400">Тысячи устройств в одной базе данных</p>
            </div>
        </div>
    </div>

    <!-- Призыв к действию -->
    {% if not user.is_authenticated %}
        <div class="mt-16 bg-slate-800 p-8 rounded-lg border border-slate-700 card-hover">
            <h2 class="text-3xl font-bold text-blue-400 mb-4">Начните прямо сейчас!</h2>
            <p class="text-xl text-gray-400 mb-8">
                Присоединяйтесь к нашему сообществу и откройте для себя мир технологий
            </p>
            <div class="flex justify-center space-x-4">
                <a href="{% url 'accounts:register' %}" class="btn-primary">
                    Зарегистрироваться
                </a>
                <a href="{% url 'accounts:login' %}" class="btn-secondary">
                    Войти
                </a>
            </div>
        </div>
    {% endif %}


</div>
{% endblock %}  
--- END templates/home.html ---

--- templates/base.html ---
 {% load static %}
<!DOCTYPE html>
<html lang="ru" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Tech Help{% endblock %}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.css" />
<script src="https://unpkg.com/imagesloaded@5/imagesloaded.pkgd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.js"></script>
    <link href="{% static 'css/base.css' %}" rel="stylesheet">
    <link href="{% static 'css/animations.css' %}" rel="stylesheet">
    {% block head %}{% endblock %}
    
</head>
<body class="flex flex-col min-h-screen bg-slate-900">
    <nav class="bg-slate-800 border-b border-slate-700">
        <div class="px-8 mx-auto px-4">
            <div class="flex justify-between">
                <!-- Логотип слева -->  
                <a href="/" class="highlight flex items-center text-xl font-bold text-blue-400">
                    Tech Help
                </a>

                <!-- Центральное меню -->
                <div class="flex-1 flex justify-center items-center">
                    <nav class="flex space-x-16">
                        <a href="{% url 'articles:article_list' %}" class="nav-link p-4">
                            <i class="fas fa-newspaper mr-2"></i>Статьи
                        </a>
                        <a href="{% url 'devices:device_list' %}" class="nav-link p-4">
                            <i class="fas fa-mobile-alt mr-2"></i>Устройства
                        </a>
                        <a href="{% url 'comparisons:comparison_list' %}" class="nav-link p-4">
                            <i class="fas fa-balance-scale mr-2"></i>Сравнения
                        </a>
                    </nav>
                </div>

                <!-- Правая часть -->
                <div class="flex items-center space-x-4">
                    {% if user.is_authenticated %}
                        {% if user.is_staff %}
                        <a href="{% url 'admin:index' %}" class="nav-link">
                            <i class="fas fa-cog mr-2"></i>Админ-панель
                        </a>
                        {% endif %}
                        <a href="{% url 'accounts:profile' %}" class="nav-link">
                            <i class="fas fa-user mr-2"></i>{{ user.username }}
                        </a>
                        <a href="{% url 'accounts:logout' %}" class="nav-link">
                            <i class="fas fa-sign-out-alt mr-2"></i>Выйти
                        </a>
                    {% else %}
                        <a href="{% url 'accounts:login' %}" class="nav-link">
                            <i class="fas fa-sign-in-alt mr-2"></i>Войти
                        </a>
                        <a href="{% url 'accounts:register' %}" class="btn-primary">
                            Регистрация
                        </a>
                    {% endif %}
                </div>
            </div>
        </div>
    </nav>

    <!-- Основной контент -->
    <main class="flex-grow container mx-auto px-4 py-8">
        {% if messages %}
            <!-- ... messages остаются без изменений ... -->
        {% endif %}
        {% block content %}{% endblock %}
    </main>

    <!-- Футер -->
    <footer class="bg-slate-800 border-t border-slate-700 py-8 mt-auto">
        <div class="max-w-7xl mx-auto px-4">
            <div class="text-center text-gray-400">
                © {% now "Y" %} Tech Help. Все права защищены.
            </div>
        </div>
    </footer>
</body>
</html>  
--- END templates/base.html ---

--- templates/wsgi.py ---
 """
WSGI config for tech_help project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tech_help.settings')

application = get_wsgi_application()
 
--- END templates/wsgi.py ---

--- templates/comparisons/comparison_create.html ---
 {% extends 'base.html' %}

{% block title %}Создать сравнение - Tech Help{% endblock %}

{% block content %}
<div class="container mx-auto px-4">
    <h1 class="text-3xl font-bold text-white mb-8">Создать сравнение</h1>
    
    <form method="post" class="card p-6">
        {% csrf_token %}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            {% for device in devices %}
            <div class="relative">
                <input type="checkbox" 
                       name="devices" 
                       value="{{ device.id }}"
                       id="device_{{ device.id }}"
                       class="hidden peer">
                <label for="device_{{ device.id }}" 
                       class="block card peer-checked:border-blue-500 peer-checked:ring-2 peer-checked:ring-blue-500 cursor-pointer">
                       {% if device.main_image %}
                       <img src="{{ device.main_image.url }}" 
                            alt="{{ device.name }}"
                            class="w-full h-48 object-cover">
                       {% else %}
                       <div class="w-full h-full bg-slate-800 flex items-center justify-center">
                           <i class="fas fa-camera text-3xl text-slate-600"></i>
                       </div>
                       {% endif %}
                    <div class="p-4">
                        <h3 class="text-lg font-semibold text-white mb-2">{{ device.name }}</h3>
                        <p class="text-gray-400">{{ device.manufacturer }}</p>
                    </div>
                </label>
            </div>
            {% endfor %}
        </div>
        
        <div class="flex justify-end">
            <button type="submit" class="btn-primary">
                Сравнить выбранные устройства
            </button>
        </div>
    </form>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form');
    form.addEventListener('submit', function(e) {
        const checked = document.querySelectorAll('input[name="devices"]:checked');
        if (checked.length < 2) {
            e.preventDefault();
            alert('Выберите минимум 2 устройства для сравнения');
        }
    });
});
</script>
{% endblock %} 
 
--- END templates/comparisons/comparison_create.html ---

--- templates/comparisons/comparison_detail.html ---
 {% extends 'base.html' %}
{% load static %}
{% load custom_filters %}

{% block title %}{{ comparison.title }} - Tech Help{% endblock %}

{% block content %}
<div class="container mx-auto px-4">
    <div class="absolute left-1/2 top-16 bottom-0 w-px bg-slate-700"></div>

    <!-- Две карусели для каждого устройства -->
    <div class="grid grid-cols-2 gap-8">
        {% for device in devices %}
        <div>
            <!-- Название устройства -->
            <div class="text-center mb-4">
                <p class="text-xl font-semibold text-white">{{ device.name }}</p>
            </div>
            
            <!-- Карусель -->
            <div class="swiper-container device-carousel-{{ forloop.counter }} rounded-lg overflow-hidden">
                <div class="swiper-wrapper">
                    <!-- Главное фото -->
                    {% if device.main_image %}
                    <div class="swiper-slide">
                        <div class="w-full h-96 flex items-center justify-center bg-slate-800">
                            <img src="{{ device.main_image.url }}" 
                                 alt="{{ device.name }}" 
                                 class="max-w-full max-h-full object-contain">
                        </div>
                    </div>
                    {% endif %}
                    
                    <!-- Дополнительные фото -->
                    {% for image in device.images.all %}
                    <div class="swiper-slide">
                        <div class="w-full h-96 flex items-center justify-center bg-slate-800">
                            <img src="{{ image.image.url }}" 
                                 alt="{{ device.name }}" 
                                 class="max-w-full max-h-full object-contain">
                        </div>
                    </div>
                    {% endfor %}
                </div>
                
            </div>
        </div>
        {% endfor %}
    </div>

    
    <!-- Сравнение характеристик -->
    <div class="card p-6">
        <h2 class="text-2xl font-bold text-white mb-6">Сравнение характеристик</h2>
        <div class="space-y-8">
            {% for category, specs in specifications %}
            <div class="border border-slate-700 rounded-lg">
                <div class="bg-slate-800 p-4 border-b border-slate-700">
                    <h3 class="text-xl font-semibold text-blue-400">{{ category }}</h3>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 divide-x divide-slate-700">
                    {% for device in devices %}
                    <div class="p-4">
                        <div class="space-y-4">
                            {% for spec_name, spec_data in specs.items %}
                            <div class="flex justify-between items-center border-b border-slate-700 pb-2">
                                <span class="text-gray-400">{{ spec_name }}</span>
                                <span class="font-semibold text-white">
                                    {% if spec_data.values|get_item:device.id %}
                                        {{ spec_data.values|get_item:device.id }}
                                        {% if spec_data.unit %}<span class="text-gray-400 ml-1">{{ spec_data.unit }}</span>{% endif %}
                                    {% else %}
                                        <span class="text-gray-500">—</span>
                                    {% endif %}
                                </span>
                            </div>
                            {% endfor %}
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Инициализация каруселей для каждого устройства
        {% for device in devices %}
        new Swiper('.device-carousel-{{ forloop.counter }}', {
            slidesPerView: 1,
            spaceBetween: 30,
            loop: true,
            autoplay: {
                delay: 5000,
                disableOnInteraction: false,
            },
            observer: true,
            observeParents: true,
        });
        {% endfor %}
    });
</script>
{% endblock %}  
--- END templates/comparisons/comparison_detail.html ---

--- templates/comparisons/comparison_list.html ---
 {% extends 'base.html' %}

{% block title %}Tech Help - Сравнения{% endblock %}

{% block content %}
<div class="container mx-auto px-4">
    <!-- Заголовок и кнопка создания -->
    <div class="flex justify-between items-center mb-8">
        <h1 class="text-3xl font-bold text-white">Сравнения</h1>
        {% if user.is_authenticated %}
        <a href="{% url 'comparisons:comparison_create' %}" class="btn-primary">
            <i class="fas fa-plus mr-2"></i>Создать сравнение
        </a>
        {% endif %}
    </div>

    <!-- Список сравнений -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
    {% for comparison in comparisons %}
    <a href="{% url 'comparisons:comparison_detail' comparison.slug %}"
       class="block group">
        <div class="card bg-slate-700/50 hover:bg-slate-700 transition-all duration-200 rounded-lg overflow-hidden hover:scale-105 flex">
            <!-- Левая часть карточки -->
            <div class="w-1/2 p-4 flex flex-col justify-between">
                <div>
                    <div class="flex flex-wrap gap-2 mb-2 justify-center">
                        <span class="badge text-lg">{{ comparison.devices.first.name }}</span>
                    </div>
                    {% if comparison.devices.first.main_image %}
                        <img src="{{ comparison.devices.first.main_image.url }}"
                             alt="{{ comparison.title }}"
                             class="w-full h-auto object-cover rounded-md">
                    {% else %}
                         <div class="w-full h-full bg-slate-800 flex items-center justify-center rounded-md mb-2">
                            <i class="fas fa-camera text-3xl text-slate-600"></i>
                        </div>
                    {% endif %}
                </div>

            </div>

            <!-- Вертикальная линия -->
            <div class="border-r border-slate-600"></div>

            <!-- Правая часть карточки -->
            <div class="w-1/2 p-4 flex flex-col justify-between">
                <div>
                    <div class="flex flex-wrap gap-2 mb-2 justify-center">
                        <span class="badge text-lg">{{ comparison.devices.last.name }}</span>
                    </div>
                     {% if comparison.devices.last.main_image %}
                        <img src="{{ comparison.devices.last.main_image.url }}"
                             alt="{{ comparison.title }}"
                             class="w-full h-auto object-cover rounded-md">
                    {% else %}
                         <div class="w-full h-24 bg-slate-800 flex items-center justify-center rounded-md">
                            <i class="fas fa-camera text-3xl text-slate-600"></i>
                        </div>
                    {% endif %}

                </div>

                <div>
                     <!-- Кнопка "Подробнее" удалена, так как вся карточка - ссылка -->
                </div>
            </div>
        </div>
    </a>
    {% empty %}
    <div class="col-span-full text-center py-8">
        <p class="text-gray-400">Сравнений пока нет</p>
    </div>
    {% endfor %}
</div>

</div>
{% endblock %}  
--- END templates/comparisons/comparison_list.html ---

--- templates/devices/device_detail.html ---
 {% extends 'base.html' %}
{% load static %}


{% block title %}Tech Help - {{ device.name }} {% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <!-- Карусель с фотографиями -->
        <div class="swiper device-carousel mb-8 rounded-lg overflow-hidden">
            <div class="swiper-wrapper">
                <!-- Главное фото -->
                {% if device.main_image %}
                <div class="swiper-slide">
                    <div class="w-full h-96 flex items-center justify-center bg-slate-800">
                        <img src="{{ device.main_image.url }}" 
                             alt="{{ device.name }}" 
                             class="max-w-full max-h-full object-contain">
                    </div>
                </div>
                {% endif %}
                
                <!-- Дополнительные фото -->
                {% for image in device.images.all %}
                <div class="swiper-slide">
                    <div class="w-full h-96 flex items-center justify-center bg-slate-800">
                        <img src="{{ image.image.url }}" 
                             alt="{{ device.name }}" 
                             class="max-w-full max-h-full object-contain">
                    </div>
                </div>
                {% endfor %}
            </div>
            
            <!-- Навигация -->
            <div class="swiper-button-next"></div>
            <div class="swiper-button-prev"></div>
            <div class="swiper-pagination"></div>
        </div>

        <!-- Заголовок и основная информация -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold mb-4">{{ device.name }}</h1>
            {% if device.description %}
            <p class="text-gray-300 mb-4">{{ device.description }}</p>
            {% endif %}
            
            <div class="flex items-center gap-4">
                {% if device.category %}
                <span class="px-3 py-1 bg-blue-500 text-sm rounded-full">
                    {{ device.category.name }}
                </span>
                {% endif %}
                
                {% if user.is_authenticated %}
                <div class="flex gap-2">
                    <a href="{% url 'devices:device_edit' device.slug %}" 
                       class="btn-secondary btn-sm">
                        Редактировать
                    </a>
                    <a href="{% url 'devices:device_delete' device.slug %}" 
                       class="btn-danger btn-sm">
                        Удалить
                    </a>
                </div>
                {% endif %}
            </div>
        </div>

        <!-- Характеристики по категориям -->
        <div class="space-y-6">
            {% for category, specs in specifications.items %}
            <div class="bg-slate-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">{{ category.name }}</h2>
                
                <div class="divide-y divide-slate-700">
                    {% for spec in specs %}
                    <div class="py-3 flex justify-between">
                        <div class="flex items-center gap-2">
                            <span class="text-gray-300">{{ spec.field.name }}</span>
                            {% if spec.field.description %}
                            <button type="button" 
                                    class="text-gray-400 hover:text-gray-300"
                                    title="{{ spec.field.description }}">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </button>
                            {% endif %}
                        </div>
                        <div class="text-right">
                            <span class="font-medium">
                                {{ spec.value }}
                                {% if spec.field.unit %}
                                <span class="text-gray-400">{{ spec.field.unit }}</span>
                                {% endif %}
                            </span>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</div>

<script>
    const swiper = new Swiper('.device-carousel', {
        slidesPerView: 1,
        spaceBetween: 30,
        loop: true,
        pagination: {
            el: '.swiper-pagination',
            clickable: true,
        },
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
        autoplay: {
            delay: 5000,
            disableOnInteraction: false,
        },
    });
</script>
{% endblock %}  
--- END templates/devices/device_detail.html ---

--- templates/devices/device_confirm_delete.html ---
 {% extends 'base.html' %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-lg mx-auto">
        <div class="bg-slate-800 rounded-lg p-6 border border-slate-700">
            <h1 class="text-2xl font-bold mb-4">Удаление устройства</h1>
            
            <p class="text-gray-300 mb-6">
                Вы уверены, что хотите удалить устройство "{{ device.name }}"?
                Это действие нельзя будет отменить.
            </p>
            
            <form method="post" class="flex gap-4">
                {% csrf_token %}
                <button type="submit" class="btn-danger">
                    Удалить
                </button>
                <a href="{% url 'devices:device_detail' device.slug %}" 
                   class="btn-secondary">
                    Отмена
                </a>
            </form>
        </div>
    </div>
</div>
{% endblock %}  
--- END templates/devices/device_confirm_delete.html ---

--- templates/devices/device_form.html ---
 {% extends 'base.html' %}
{% load static %}
{% load device_tags %}

{% block title %}Tech Help - Устройство{% endblock %}

{% block head %}
<script>
// Преобразуем спецификации из Python в JavaScript
const existingSpecs = {{ specifications|safe }};
</script>
<script src="{% static 'js/device-form.js' %}"></script>
{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <h1 class="text-2xl font-bold mb-6">{{ title }}</h1>

        <form method="post" enctype="multipart/form-data" class="space-y-6">
            {% csrf_token %}
            
            <!-- Основная информация об устройстве -->
            <div class="bg-slate-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Основная информация</h2>
                
                {% for field in form %}
                <div class="mb-4">
                    <label for="{{ field.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                        {{ field.label }}
                    </label>
                    {{ field }}
                    {% if field.help_text %}
                    <p class="mt-1 text-sm text-gray-400">{{ field.help_text }}</p>
                    {% endif %}
                    {% if field.errors %}
                    <div class="mt-1 text-red-500 text-sm">
                        {{ field.errors }}
                    </div>
                    {% endif %}
                </div>
                {% endfor %}
            </div>

            <!-- Главное изображение -->
            <div class="bg-slate-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Главное изображение</h2>
                <input type="file" 
                       name="main_image" 
                       accept="image/*"
                       class="form-input w-full">
                {% if device and device.main_image %}
                <div class="mt-4">
                    <img src="{{ device.main_image.url }}" 
                         alt="Текущее главное изображение"
                         class="w-full max-w-xs rounded-lg">
                </div>
                {% endif %}
            </div>

            <!-- Дополнительные изображения -->
            <div class="bg-slate-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Дополнительные изображения</h2>
                <input type="file" 
                       name="images" 
                       multiple 
                       accept="image/*"
                       class="form-input w-full">
            </div>

            <!-- Характеристики устройства -->
            <div class="space-y-6">
                {{ formset.management_form }}
                {% for category, forms in formset.categories.items %}
                <div class="bg-slate-800 rounded-lg p-6">
                    <h2 class="text-xl font-semibold mb-4">{{ category.name }}</h2>
                    
                    <div class="space-y-4">
                        {% for form in forms %}
                        <div class="flex items-start gap-4">
                            <div class="flex-grow">
                                {{ form.field }}
                                <label class="block text-sm font-medium text-gray-300 mb-2">
                                    {{ form.instance.field.name }}
                                    {% if form.instance.field.unit %}
                                    <span class="text-gray-400">({{ form.instance.field.unit }})</span>
                                    {% endif %}
                                </label>
                                <div class="relative">  <!-- Относительное позиционирование для placeholder -->
                                    {{ form.value|add_class:'bg-gray-100 border-gray-300 focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 text-sm text-gray-900 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 rounded-lg border-none' }}
                                </div>
                                {% if form.instance.field.description %}
                                <p class="mt-1 text-sm text-gray-400">{{ form.instance.field.description }}</p>
                                {% endif %}
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                </div>
                {% endfor %}
            </div>

            <!-- Кнопки действий -->
            <div class="flex justify-end gap-4">
                <a href="{% url 'devices:device_list' %}" 
                   class="btn-secondary">
                    Отмена
                </a>
                <button type="submit" class="btn-primary">
                    {% if device %}Сохранить изменения{% else %}Создать устройство{% endif %}
                </button>
            </div>
        </form>
    </div>
</div>
{% endblock %}  
--- END templates/devices/device_form.html ---

--- templates/devices/specification_form.html ---
 {% extends 'base.html' %}

{% block title %}Tech Help - Характеристика{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <h1 class="text-2xl font-bold mb-6">{{ title }}</h1>

        <form method="post" class="space-y-6">
            {% csrf_token %}
            
            <!-- Основная информация о характеристике -->
            <div class="bg-slate-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Основная информация</h2>
                
                {% for field in form %}
                <div class="mb-4">
                    <label for="{{ field.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                        {{ field.label }}
                    </label>
                    {{ field }}
                    {% if field.help_text %}
                    <p class="mt-1 text-sm text-gray-400">{{ field.help_text }}</p>
                    {% endif %}
                    {% if field.errors %}
                    <div class="mt-1 text-red-500 text-sm">
                        {{ field.errors }}
                    </div>
                    {% endif %}
                </div>
                {% endfor %}
            </div>

            <!-- Кнопки действий -->
            <div class="flex justify-end gap-4">
                <a href="{% url 'devices:device_list' %}" 
                   class="btn-secondary">
                    Отмена
                </a>
                <button type="submit" class="btn-primary">
                    {% if specification %}Сохранить изменения{% else %}Создать характеристику{% endif %}
                </button>
            </div>
        </form>
    </div>
</div>
{% endblock %}  
--- END templates/devices/specification_form.html ---

--- templates/devices/device_list.html ---
 {% extends 'base.html' %}

{% block title %}Tech Help - Устройства{% endblock %}

{% block content %}
<div class="container mx-auto px-0 py-8">
    <!-- Заголовок и кнопки управления -->
    <div class="flex justify-between mb-8">
        <h1 class="text-3xl font-bold text-white">Устройства</h1>
        {% if user.is_staff %}
        <div class="flex gap-4">
            <a href="{% url 'devices:device_create' %}" class="p-4 btn-primary bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">
                <i class="fas fa-plus mr-2"></i>Добавить устройство
            </a>
            <a href="{% url 'devices:specification_create' %}" class="p-4 btn-secondary bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">
                <i class="fas fa-cog mr-2"></i>Добавить характеристику
            </a>
        </div>
        {% endif %}
    </div>

    <!-- Заголовок и поиск -->
    <div class="flex flex-col md:flex-row justify-between items-center mb-8">
        <div class="w-full md:w-auto">
            <form method="get" class="flex gap-4">
                <input type="text" 
                       name="search" 
                       value="{{ search_query|default:'' }}"
                       placeholder="Поиск устройств..."
                       class="form-input flex-grow">
                <button type="submit" class="btn-primary">
                    <i class="fas fa-search"></i>
                </button>
            </form>
        </div>
    </div>

    <!-- Категории -->
    <div class="flex flex-wrap gap-2 mb-8">
        <a href="{% url 'devices:device_list' %}" 
           class="badge {% if not current_category %}bg-blue-600{% else %}bg-slate-700{% endif %} hover:bg-blue-700">
            Все
        </a>
        {% for category in categories %}
        <a href="?category={{ category.slug }}" 
           class="badge {% if current_category == category.slug %}bg-blue-600{% else %}bg-slate-700{% endif %} hover:bg-blue-700">
            {{ category.name }}
        </a>
        {% endfor %}
    </div>

    <!-- Сетка устройств -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {% for device in devices %}
        <a href="{% url 'devices:device_detail' device.slug %}" 
           class="block group">
            <div class="card bg-slate-700/50 hover:bg-slate-700 transition-all duration-200 rounded-lg overflow-hidden hover:scale-105 flex flex-col">
                <div class="aspect-video w-full overflow-hidden">
                    {% if device.main_image %}
                    <img src="{{ device.main_image.url }}" 
                         alt="{{ device.name }}"
                         class="w-full h-full object-cover">
                    {% else %}
                        <div class="w-full h-full bg-slate-800 flex items-center justify-center rounded-md mb-2">
                            <i class="fas fa-camera text-3xl text-slate-600"></i>
                        </div>
                    {% endif %}
                </div>
                <div class="p-4 flex-grow">
                    <div class="flex items-center gap-2 mb-2">
                        {% if device.category %}
                        <span class="text-blue-400">{{ device.category.name }}</span>
                        {% endif %}
                        <span class="text-gray-400">{{ device.created_at|date:"d.m.Y" }}</span>
                    </div>
                    <h2 class="text-xl font-semibold mb-2 text-white group-hover:text-blue-400 transition-colors">
                        {{ device.name }}
                    </h2>
                    <div class="mt-4 text-gray-300 line-clamp-2">
                        {{ device.description|striptags|truncatewords:15 }}
                    </div>
                </div>
            </div>
        </a>
        {% empty %}
        <div class="col-span-full text-center py-8">
            <p class="text-gray-400">Устройства не найдены</p>
        </div>
        {% endfor %}
    </div>
</div>
{% endblock %}  
--- END templates/devices/device_list.html ---

--- templates/accounts/register.html ---
 {% extends 'base.html' %}

{% block title %}Регистрация - Tech Help{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-md mx-auto">
        <h1 class="text-3xl font-bold text-white mb-8">Регистрация</h1>
        
        <form method="post" class="space-y-6 bg-slate-800 p-6 rounded-lg border border-slate-700">
            {% csrf_token %}
            
            {% if form.non_field_errors %}
            <div class="bg-red-500 text-white p-4 rounded-lg">
                {{ form.non_field_errors }}
            </div>
            {% endif %}
            
            <div>
                <label for="{{ form.username.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Имя пользователя
                </label>
                {{ form.username }}
                {% if form.username.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.username.errors.0 }}</p>
                {% endif %}
            </div>
            
            <div>
                <label for="{{ form.email.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Email
                </label>
                {{ form.email }}
                {% if form.email.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.email.errors.0 }}</p>
                {% endif %}
            </div>
            
            <div>
                <label for="{{ form.password1.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Пароль
                </label>
                {{ form.password1 }}
                {% if form.password1.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.password1.errors.0 }}</p>
                {% endif %}
            </div>
            
            <div>
                <label for="{{ form.password2.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Подтверждение пароля
                </label>
                {{ form.password2 }}
                {% if form.password2.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.password2.errors.0 }}</p>
                {% endif %}
            </div>
            
            <button type="submit" class="w-full btn-primary">
                Зарегистрироваться
            </button>
        </form>
        
        <p class="mt-4 text-center text-gray-400">
            Уже есть аккаунт? <a href="{% url 'accounts:login' %}" class="text-blue-400 hover:text-blue-300">Войдите</a>
        </p>
    </div>
</div>
{% endblock %}  
--- END templates/accounts/register.html ---

--- templates/accounts/login.html ---
 {% extends 'base.html' %}

{% block title %}Вход - Tech Help{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-md mx-auto">
        <h1 class="text-3xl font-bold text-white mb-8">Вход</h1>
        
        <form method="post" class="space-y-6 bg-slate-800 p-6 rounded-lg border border-slate-700">
            {% csrf_token %}
            
            {% if form.non_field_errors %}
            <div class="bg-red-500 text-white p-4 rounded-lg">
                {{ form.non_field_errors }}
            </div>
            {% endif %}
            
            <div>
                <label for="{{ form.username.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Имя пользователя
                </label>
                {{ form.username }}
            </div>
            
            <div>
                <label for="{{ form.password.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Пароль
                </label>
                {{ form.password }}
            </div>
            
            <button type="submit" class="w-full btn-primary">
                Войти
            </button>
        </form>
        
        <p class="mt-4 text-center text-gray-400">
            Нет аккаунта? <a href="{% url 'accounts:register' %}" class="text-blue-400 hover:text-blue-300">Зарегистрируйтесь</a>
        </p>
    </div>
</div>
{% endblock %}  
--- END templates/accounts/login.html ---

--- templates/accounts/profile.html ---
 {% extends 'base.html' %}

{% block title %}Профиль - {{ user.username }}{% endblock %}

{% block content %}
<div class="container mx-auto px-4">
    <div class="max-w-2xl mx-auto">
        <h1 class="text-3xl font-bold text-white mb-8">Профиль пользователя</h1>
        
        <div class="card p-6">
            <div class="flex items-center gap-4 mb-6">
                <i class="fas fa-user-circle text-4xl text-blue-400"></i>
                <div>
                    <h2 class="text-xl font-semibold text-white">{{ user.username }}</h2>
                    <p class="text-gray-400">{{ user.email }}</p>
                </div>
            </div>
            
            <div class="border-t border-slate-700 pt-6">
                <h3 class="text-lg font-semibold text-white mb-4">Активность</h3>
                <div class="grid grid-cols-2 gap-4">
                    <div class="text-center p-4 bg-slate-700 rounded-lg">
                        <span class="block text-2xl font-bold text-blue-400">
                            {{ user.article_set.count }}
                        </span>
                        <span class="text-gray-400">Статей</span>
                    </div>
                    <div class="text-center p-4 bg-slate-700 rounded-lg">
                        <span class="block text-2xl font-bold text-blue-400">
                            {{ user.comparison_set.count }}
                        </span>
                        <span class="text-gray-400">Сравнений</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}  
--- END templates/accounts/profile.html ---

--- templates/articles/article_confirm_delete.html ---
 {% extends 'base.html' %}



{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-lg mx-auto">
        <div class="bg-slate-800 rounded-lg p-6 border border-slate-700">
            <h1 class="text-2xl font-bold mb-4">Удаление статьи</h1>
            
            <p class="text-gray-300 mb-6">
                Вы уверены, что хотите удалить статью "{{ article.title }}"?
                Это действие нельзя будет отменить.
            </p>
            
            <form method="post" class="flex gap-4">
                {% csrf_token %}
                <button type="submit" class="btn-danger">
                    Удалить
                </button>
                <a href="{% url 'articles:article_detail' article.slug %}" 
                   class="btn-secondary">
                    Отмена
                </a>
            </form>
        </div>
    </div>
</div>
{% endblock %}  
--- END templates/articles/article_confirm_delete.html ---

--- templates/articles/article_list.html ---
 {% extends 'base.html' %}

{% block title %}Tech Help - Статьи{% endblock %}

{% block content %}
<!-- Добавим кнопку создания статьи в верхней части страницы -->
<div class="flex justify-between items-center mb-8">
    <h1 class="text-3xl font-bold text-white">Статьи</h1>
    {% if user.is_authenticated %}
    <a href="{% url 'articles:article_create' %}" class="p-4 btn-primary bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">
        <i class="fas fa-plus mr-2"></i>Создать статью
    </a>
    {% endif %}
</div>

<div class="container mx-auto px-4 py-8">
    <div class="grid grid-cols-12 gap-6">
        <!-- Боковая панель с фильтрами -->
<div class="col-span-12 md:col-span-3">
    <div class="p-6 rounded-lg border border-slate-700 sticky top-4">
        <h2 class="text-xl font-semibold text-blue-400 mb-4">Категории</h2>

        <!-- Контейнер для кнопок -->
        <div class="flex flex-wrap gap-2 ">
            <a href="{% url 'articles:article_list' %}"
               class="inline-block rounded-full px-4 py-2 text-sm font-medium bg-blue-500/20 text-blue-300 hover:bg-blue-500/40 hover:text-white transition-colors duration-200 flex items-center justify-center text-center break-words {% if not request.GET.category %}!bg-blue-600/70 !text-white{% endif %}"
               style="min-width: 0;"> <!-- Добавлено min-width -->
                Все категории
            </a>
            {% for category in categories %}
            <a href="?category={{ category.slug }}"
               class="inline-block rounded-full px-4 max-w-xs-30 py-2 text-sm font-medium bg-blue-500/20 text-blue-300 hover:bg-blue-500/40 hover:text-white transition-colors duration-200 flex items-center justify-center text-center break-words {% if request.GET.category == category.slug %}!bg-blue-600/70 !text-white{% endif %}"
               style="min-width: 0;"> <!-- Добавлено min-width -->
                {{ category.name }}
            </a>
            {% endfor %}
        </div>

    </div>
</div>


        <!-- Контент со статьями -->
        <div class="col-span-12 md:col-span-9">
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                {% for article in articles %}
                {% if article.slug %}
                <a href="{% url 'articles:article_detail' slug=article.slug %}"
                   class="block group">
                    <div class="card bg-slate-700/50 hover:bg-slate-700 transition-all duration-200 rounded-lg overflow-hidden hover:scale-105 flex flex-col">
                        <div class="aspect-video w-full overflow-hidden">
                            {% if article.image %}
                            <img src="{{ article.image.url }}"
                                 alt="{{ article.title }}"
                                 class="w-full h-full object-cover">
                            {% else %}
                            <img src="../../media/default-images/{{ article.category.name }}.png" 
                                alt="{{ article.title }}" 
                                class="w-full h-full object-cover">
                            {% endif %}
                        </div>
                        <div class="p-4 flex-grow">
                            <div class="flex items-center gap-2 mb-2">
                                {% if article.category %}
                                <span class="text-blue-400">{{ article.category.name }}</span>
                                {% endif %}
                                <span class="text-gray-400">{{ article.created_at|date:"d.m.Y" }}</span>
                            </div>
                            <h2 class="text-xl font-semibold mb-2 text-white group-hover:text-blue-400 transition-colors">
                                {{ article.title|striptags|truncatewords:10 }}
                            </h2>
                            <div class="mt-4 text-gray-300 line-clamp-2">
                                {{ article.content|striptags|truncatewords:10 }}
                            </div>
                        </div>
                    </div>
                </a>
                {% endif %}
                {% empty %}
                <div class="col-span-full text-center py-8">
                    <p class="text-gray-400">Статьи не найдены</p>
                </div>
                {% endfor %}
            </div>
        </div>
    </div>
</div>

<div class="col-span-12 md:col-span-9">
    <!-- Пагинация -->
    {% if articles.has_other_pages %}
    <div class="flex justify-center mt-8">
        <div class="flex space-x-2">
            {% if articles.has_previous %}
            <a href="?page={{ articles.previous_page_number }}" 
               class="px-4 py-2 bg-slate-700 rounded hover:bg-slate-600">
                Назад
            </a>
            {% endif %}
            
            {% for num in articles.paginator.page_range %}
                {% if articles.number == num %}
                <span class="px-4 py-2 bg-blue-600 rounded">{{ num }}</span>
                {% else %}
                <a href="?page={{ num }}" 
                   class="px-4 py-2 bg-slate-700 rounded hover:bg-slate-600">
                    {{ num }}
                </a>
                {% endif %}
            {% endfor %}
            
            {% if articles.has_next %}
            <a href="?page={{ articles.next_page_number }}" 
               class="px-4 py-2 bg-slate-700 rounded hover:bg-slate-600">
                Вперед
            </a>
            {% endif %}
        </div>
    </div>
    {% endif %}
</div>
{% endblock %}  
--- END templates/articles/article_list.html ---

--- templates/articles/article_form.html ---
 {% extends 'base.html' %}
{% load static %}

{% block title %}{{ title }} - Tech Help{% endblock %}

{% block head %}
{{ form.media }}
{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <h1 class="text-3xl font-bold mb-8">
            {% if article %}Редактировать{% else %}Создать{% endif %} статью
        </h1>

        <form method="post" enctype="multipart/form-data" class="space-y-6 bg-slate-800 p-6 rounded-lg border border-slate-700">
            {% csrf_token %}
            
            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Заголовок</label>
                {{ form.title }}
                {% if form.title.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.title.errors.0 }}</p>
                {% endif %}
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Категория</label>
                {{ form.category }}
                {% if form.category.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.category.errors.0 }}</p>
                {% endif %}
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Изображение</label>
                {{ form.image }}
                {% if form.image.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.image.errors.0 }}</p>
                {% endif %}
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Содержание</label>
                {{ form.content }}
                {% if form.content.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.content.errors.0 }}</p>
                {% endif %}
            </div>

            <button type="submit" class="highlight w-full btn-primary text-lg bg-black/30 py-4">
                {% if article %}Сохранить изменения{% else %}Создать статью{% endif %}
            </button>
        </form>
    </div>
</div>
{% endblock %}  
--- END templates/articles/article_form.html ---

--- templates/articles/article_detail.html ---
 {% extends 'base.html' %}

{% block title %}Tech Help - {{ article.title }} {% endblock %}

{% block content %}
<div class="relative min-h-[200px] flex items-center">
    <!-- Фоновое изображение -->
    <div class="absolute inset-0">
        {% if article.image %}
        <img src="{{ article.image.url }}" 
            alt="{{ article.title }}" 
            class="w-full h-full object-cover">
        {% else %}
        <img src="../../media/default-images/{{ article.category.name }}.png" 
            alt="{{ article.title }}" 
            class="w-full h-full object-cover">
        {% endif %}
        <div class="absolute inset-0 bg-gradient-to-b from-slate-900/50 via-slate-900/80 to-slate-900"></div>
    </div>

    <!-- Контент поверх изображения -->
    <div class="relative container mx-auto px-4 py-16 z-10">
        <div class="max-w-4xl mx-auto p-6">
            {% if article.category %}
            <div class="inline-block px-4 py-1.5 bg-blue-500 text-white text-sm font-medium rounded-full mb-6">
                {{ article.category.name }}
            </div>
            {% endif %}

            <h1 class="text-4xl md:text-5xl font-bold text-white mb-6">{{ article.title }}</h1>

            <div class="flex flex-wrap items-center gap-6 text-gray-300">
                <div class="flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    <span>{{ article.author.username }}</span>
                </div>

                <div class="flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    <span>{{ article.created_date|date:"d.m.Y" }}</span>
                </div>

                <div class="flex items-center gap-2">
                    <svg class="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                    <span>{{ average_rating|floatformat:1 }}</span>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="max-w-4xl mx-auto pt-8 border-t border-slate-700">

<!-- Основной контент статьи -->
<div class="container mx-auto px-4 py-12 border-t border-slate-700 bg-black bg-opacity-60 rounded-lg">
    <article class="prose prose-invert prose-lg max-w-4xl mx-auto">
        {{ article.content|safe }}
    </article>

    {% if user.is_authenticated %}
    <div class="max-w-4xl mx-auto mt-12 pt-8 border-t border-slate-700">
        <!-- Кнопки редактирования/удаления для автора -->
        {% if user == article.author %}
        <div class="flex gap-4">
            <a href="{% url 'articles:article_edit' article.slug %}" 
               class="btn-secondary">
                Редактировать
            </a>
            <a href="{% url 'articles:article_delete' article.slug %}" 
               class="btn-danger">
                Удалить
            </a>
        </div>
        {% endif %}
    </div>
    {% endif %}
</div>

<!-- Оценка статьи -->
{% if user.is_authenticated %}
<div class="bg-slate-800 p-6 rounded-lg border border-slate-700 mb-8">
    <h3 class="text-xl font-semibold mb-4">Оценить статью</h3>
    <form method="post" action="{% url 'articles:rate_article' article.slug %}" class="flex items-center gap-4">
        {% csrf_token %}
        <div class="flex items-center gap-2 star-rating">
            {% for i in "12345" %}
            <button type="submit" name="rating" value="{{ i }}" 
                    class="star text-2xl {% if user_rating and i|add:'0' <= user_rating.value %}text-yellow-400{% else %}text-gray-400{% endif %} hover:text-yellow-400"
                    data-value="{{ i }}">
                ★
            </button>
            {% endfor %}
        </div>
    </form>
</div>
{% endif %}

<!-- Комментарии -->
<section class="bg-slate-800 p-6 rounded-lg border border-slate-700">
    <h3 class="text-xl font-semibold mb-4">
        Комментарии ({{ comments|length }})
    </h3>
    {% if user.is_authenticated %}
    <form method="post" action="{% url 'articles:add_comment' article.slug %}" 
            class="mb-8">
        {% csrf_token %}
        <textarea name="text" 
                    class="w-full p-4 bg-slate-700 rounded-lg border border-slate-600 text-white mb-4"
                    rows="3" 
                    placeholder="Напишите комментарий..."></textarea>
        <button type="submit" 
                class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
            Отправить
        </button>
    </form>
    {% endif %}
<div class="space-y-6">
    {% for comment in comments %}
    <div class="flex gap-4">
        <img src="{{ comment.author.profile.avatar.url }}" 
                alt="{{ comment.author.username }}"
                class="w-10 h-10 rounded-full">
        <div>
            <div class="flex items-center gap-2 mb-1">
                <span class="font-semibold text-white">
                    {{ comment.author.username }}
                </span>
                <span class="text-gray-400 text-sm">
                    {{ comment.created_date|date:"d.m.Y H:i" }}
                </span>
            </div>
            <p class="text-gray-300">{{ comment.text }}</p>
        </div>
    </div>
    {% empty %}
    <p class="text-gray-400 text-center">Пока нет комментариев</p>
    {% endfor %}
</div>
{% endblock %}  
--- END templates/articles/article_detail.html ---

--- users/tests.py ---
 from django.test import TestCase

# Create your tests here.
 
--- END users/tests.py ---

--- users/views.py ---
 from django.shortcuts import render

# Create your views here.
 
--- END users/views.py ---

--- users/apps.py ---
 from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'
 
--- END users/apps.py ---

--- users/admin.py ---
 from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.utils.translation import gettext_lazy as _
from .models import User

@admin.register(User)
class CustomUserAdmin(UserAdmin):
    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff', 'date_joined')
    list_filter = ('is_staff', 'is_superuser', 'is_active', 'groups')
    search_fields = ('username', 'first_name', 'last_name', 'email')
    ordering = ('-date_joined',)
    
    fieldsets = (
        (None, {'fields': ('username', 'password')}),
        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'bio', 'birth_date')}),
        (_('Permissions'), {
            'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions'),
        }),
        (_('Important dates'), {'fields': ('last_login', 'date_joined')}),
    )
    
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('username', 'email', 'password1', 'password2'),
        }),
    )
 
--- END users/admin.py ---

--- users/__init__.py ---
  
--- END users/__init__.py ---

--- users/models.py ---
 from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils.translation import gettext_lazy as _

class User(AbstractUser):
    email = models.EmailField(_('email address'), unique=True)
    bio = models.TextField(_('biography'), max_length=500, blank=True)
    birth_date = models.DateField(_('birth date'), null=True, blank=True)
    
    # Делаем email обязательным полем
    REQUIRED_FIELDS = ['email']

    class Meta:
        verbose_name = 'Пользователь'
        verbose_name_plural = 'Пользователи'

    def __str__(self):
        return self.username
 
--- END users/models.py ---

--- users/migrations/0001_initial.py ---
 # Generated by Django 5.1.6 on 2025-02-17 17:38

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='biography')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='birth date')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
 
--- END users/migrations/0001_initial.py ---

--- users/migrations/__init__.py ---
  
--- END users/migrations/__init__.py ---

--- articles/tests.py ---
 
from django.test import TestCase, RequestFactory
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.urls import reverse

# Импортируйте ваши модели здесь
from .models import Article, Category  # Замените . на путь к вашим моделям

# Импортируйте вашу функцию представления
from .views import article_list  # Замените . на путь к вашему представлению


class ArticleListViewTest(TestCase):
    @classmethod
    def setUpTestData(cls):
        # Создаем тестовые данные, которые будут использоваться во всех тестах класса
        cls.category1 = Category.objects.create(name="Category 1", slug="category-1")
        cls.category2 = Category.objects.create(name="Category 2", slug="category-2")

        # Создаем RequestFactory для создания поддельных запросов
        cls.factory = RequestFactory()
        request = cls.factory.get(reverse('article_list')) # Замените 'article_list' на имя вашего URL


        # Создаем 25 статей для тестирования пагинации
        for i in range(25):
            if i % 2 == 0:
                category = cls.category1
            else:
                category = cls.category2
            Article.objects.create(title=f"Article {i+1}", category=category, author=request.user)

        


    def test_article_list_no_filter(self):
        """Тест: Отображение всех статей без фильтрации."""
        request = self.factory.get(reverse('article_list')) # Замените 'article_list' на имя вашего URL
        response = article_list(request)

        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'articles/article_list.html') # Замените путь на ваш шаблон
        self.assertEqual(len(response.context['articles'].object_list), 12) # Проверяем количество статей на первой странице (items_per_page = 12)
        self.assertEqual(response.context['articles'].number, 1) # Проверяем, что это первая страница
        self.assertEqual(response.context['categories'].count(), 2) # Проверяем, что все категории передаются


    def test_article_list_filtered_by_category(self):
        """Тест: Отображение статей, отфильтрованных по категории."""
        request = self.factory.get(reverse('article_list') + '?category=category-1') # Замените 'article_list' на имя вашего URL
        response = article_list(request)

        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'articles/article_list.html') # Замените путь на ваш шаблон
        filtered_articles = Article.objects.filter(category=self.category1)
        paginator = Paginator(filtered_articles, 12) # Убедитесь, что items_per_page совпадает

        self.assertEqual(len(response.context['articles'].object_list), len(paginator.page(1).object_list)) # Проверяем, что количество статей на странице соответствует отфильтрованным
        self.assertEqual(response.context['categories'].count(), 2) # Проверяем, что все категории передаются


    def test_article_list_pagination(self):
        """Тест: Проверка пагинации."""
        request = self.factory.get(reverse('article_list') + '?page=2')  # Замените 'article_list' на имя вашего URL
        response = article_list(request)

        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'articles/article_list.html') # Замените путь на ваш шаблон
        self.assertEqual(len(response.context['articles'].object_list), 12)  # Вторая страница должна иметь 12 статей
        self.assertEqual(response.context['articles'].number, 2) # Проверяем, что это вторая страница
        self.assertEqual(response.context['categories'].count(), 2) # Проверяем, что все категории передаются

        request = self.factory.get(reverse('article_list') + '?page=3') # Замените 'article_list' на имя вашего URL
        response = article_list(request)

        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'articles/article_list.html') # Замените путь на ваш шаблон
        self.assertEqual(len(response.context['articles'].object_list), 1)  # Третья страница должна иметь только 1 статью
        self.assertEqual(response.context['articles'].number, 3) # Проверяем, что это третья страница
        self.assertEqual(response.context['categories'].count(), 2) # Проверяем, что все категории передаются

    def test_article_list_invalid_page(self):
        """Тест: Обработка некорректного номера страницы."""
        # Проверяем, что при запросе некорректной страницы отображается первая страница
        request = self.factory.get(reverse('article_list') + '?page=abc') # Замените 'article_list' на имя вашего URL
        response = article_list(request)

        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['articles'].number, 1)

        # Проверяем, что при запросе страницы больше максимальной отображается последняя страница
        request = self.factory.get(reverse('article_list') + '?page=999') # Замените 'article_list' на имя вашего URL
        response = article_list(request)

        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['articles'].number, 3) # всего 3 страницы


    def test_article_list_empty_category(self):
      """Тест: Проверка, что ничего не сломается, если нет статей в выбранной категории."""
      category3 = Category.objects.create(name="Category 3", slug="category-3")
      request = self.factory.get(reverse('article_list') + '?category=category-3')
      response = article_list(request)

      self.assertEqual(response.status_code, 200)
      self.assertTemplateUsed(response, 'articles/article_list.html')
      self.assertEqual(len(response.context['articles'].object_list), 0)
      self.assertEqual(response.context['articles'].number, 1)
      self.assertEqual(response.context['categories'].count(), 3)



# --- Замечания ---
# 1. Замените пути импорта (from .models import Article, Category и from .views import article_list) на правильные пути к вашим моделям и представлениям.
# 2. Замените 'article_list' на имя вашего URL для представления article_list.  Используйте reverse() для динамического получения URL по имени.
# 3. Замените 'articles/article_list.html' на путь к вашему шаблону.
# 4. Убедитесь, что ваши тестовые данные (setup) создают минимально необходимое количество объектов для эффективного тестирования.
# 5.  Убедитесь, что  `items_per_page`  в тестах соответствуют  `items_per_page`  в вашем представлении.
# 6. Добавлены тесты на граничные случаи: некорректный номер страницы и пустая категория.
# 7.  Убедитесь, что у вас настроен `reverse` для URL-шаблона `article_list` в `urls.py`.
 
--- END articles/tests.py ---

--- articles/views.py ---
 from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from .models import Article, Category, Rating
from .forms import ArticleForm, CommentForm

from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.shortcuts import render

def article_list(request):
    articles_list = Article.objects.all()
    # Фильтрация по категории
    category_slug = request.GET.get('category')
    if category_slug:
        articles_list = articles_list.filter(category__slug=category_slug)
    categories = Category.objects.all()

    items_per_page = 12
    paginator = Paginator(articles_list, items_per_page)

    page = request.GET.get('page')
    try:
        articles = paginator.page(page)
    except PageNotAnInteger:
        # Если 'page' не целое число, показываем первую страницу
        articles = paginator.page(1)
    except EmptyPage:
        # Если 'page' больше максимального, показываем последнюю страницу
        articles = paginator.page(paginator.num_pages)

    return render(request, 'articles/article_list.html', {
        'articles': articles,
        'categories': categories
    })


def article_detail(request, slug):
    article = get_object_or_404(Article, slug=slug)
    average_rating = article.average_rating()
    comments = article.comments.all()
    
    

    context = {
        'article': article,
        'average_rating': average_rating,
        'comments': comments,
    }
    if request.user.is_authenticated:
        user_rating = Rating.objects.filter(article=article, user=request.user).first()
        context['user_rating'] = user_rating
    
    return render(request, 'articles/article_detail.html', context)

@login_required
def add_comment(request, slug):
    article = get_object_or_404(Article, slug)
    comments = article.comments.all()
    if request.method == 'POST':
        form = CommentForm(request.POST)
        if form.is_valid():
            comment = form.save(commit=False)
            comment.article = article
            comment.author = request.user
            comment.save()
            messages.success(request, 'Комментарий добавлен!')
            return redirect('articles:article_detail', slug=slug)
    return redirect('articles:article_detail', slug=slug)

@login_required
def rate_article(request, slug):
    article = get_object_or_404(Article, slug=slug)
    
    if request.method == 'POST':
        value = request.POST.get('rating')
        if value:
            Rating.objects.update_or_create(
                article=article,
                user=request.user,
                defaults={'value': value}
            )
    
    return redirect('articles:article_detail', slug=slug)

@login_required
def article_create(request):
    if request.method == 'POST':
        form = ArticleForm(request.POST, request.FILES)
        if form.is_valid():
            article = form.save(commit=False)
            article.author = request.user
            article.save()
            messages.success(request, 'Статья успешно создана!')
            return redirect('articles:article_detail', slug=article.slug)
    else:
        form = ArticleForm()
    
    return render(request, 'articles/article_form.html', {
        'form': form,
        'title': 'Создать статью'
    })

@login_required
def article_edit(request, slug):
    article = get_object_or_404(Article, slug=slug)
    
    # Проверяем права на редактирование
    if article.author != request.user and not request.user.is_staff:
        messages.error(request, 'У вас нет прав на редактирование этой статьи.')
        return redirect('articles:article_detail', slug=slug)
    
    if request.method == 'POST':
        form = ArticleForm(request.POST, request.FILES, instance=article)
        if form.is_valid():
            article = form.save()
            messages.success(request, 'Статья успешно обновлена!')
            return redirect('articles:article_detail', slug=article.slug)
    else:
        form = ArticleForm(instance=article)
    
    return render(request, 'articles/article_form.html', {
        'form': form,
        'article': article,
        'title': 'Редактировать статью'
    })

@login_required
def article_delete(request, slug):
    article = get_object_or_404(Article, slug=slug)
    
    # Проверяем права на удаление
    if article.author != request.user and not request.user.is_staff:
        messages.error(request, 'У вас нет прав на удаление этой статьи.')
        return redirect('articles:article_detail', slug=slug)
    
    if request.method == 'POST':
        article.delete()
        messages.success(request, 'Статья успешно удалена!')
        return redirect('articles:article_list')
    
    return render(request, 'articles/article_confirm_delete.html', {
        'article': article
    })
 
--- END articles/views.py ---

--- articles/apps.py ---
 from django.apps import AppConfig


class ArticlesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'articles'
 
--- END articles/apps.py ---

--- articles/admin.py ---
 from django.contrib import admin
from .models import Category, Article, Comment, Rating

@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug')
    prepopulated_fields = {'slug': ('name',)}
    search_fields = ('name',)

class CommentInline(admin.TabularInline):
    model = Comment
    extra = 0

class RatingInline(admin.TabularInline):
    model = Rating
    extra = 0

@admin.register(Article)
class ArticleAdmin(admin.ModelAdmin):
    list_display = ['title', 'slug', 'updated_date', 'created_date']
    list_filter = ['created_date', 'updated_date']
    search_fields = ['title', 'content']
    prepopulated_fields = {'slug': ('title',)}
    date_hierarchy = 'created_date'
    readonly_fields = ('views',)
    inlines = [CommentInline, RatingInline]

    def save_model(self, request, obj, form, change):
        if not change:  # Если создается новая статья
            obj.author = request.user
        super().save_model(request, obj, form, change)

@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    list_display = ('article', 'author', 'created_date', 'short_text')
    list_filter = ('created_date', 'author')
    search_fields = ('text', 'author__username', 'article__title')

    def short_text(self, obj):
        return obj.text[:100] + '...' if len(obj.text) > 100 else obj.text
    short_text.short_description = 'Текст комментария'

@admin.register(Rating)
class RatingAdmin(admin.ModelAdmin):
    list_display = ('article', 'user', 'value', 'created_date')
    list_filter = ('value', 'created_date')
    search_fields = ('user__username', 'article__title')
 
--- END articles/admin.py ---

--- articles/forms.py ---
 from django import forms
from .models import Article, Comment
from django_ckeditor_5.widgets import CKEditor5Widget

class ArticleForm(forms.ModelForm):
    content = forms.CharField(
        widget=CKEditor5Widget(
            attrs={'class': 'django_ckeditor_5'},
            config_name='default'
        ),
        label='Содержание'
    )

    class Meta:
        model = Article
        fields = ['title', 'content', 'image', 'category']
        widgets = {
            'title': forms.TextInput(attrs={'class': 'w-full rounded-lg border-gray-300 bg-white text-gray-900'}),
            'image': forms.FileInput(attrs={'class': 'w-full rounded-lg border-gray-300 bg-white text-gray-900'}),
            'category': forms.Select(attrs={'class': 'w-full rounded-lg border-gray-300 bg-white text-gray-900'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs.update({
                'class': 'form-input'
            })

class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        fields = ['text']
        widgets = {
            'text': forms.Textarea(attrs={'rows': 3})
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['text'].widget.attrs.update({
            'class': 'form-input',
            'placeholder': 'Напишите комментарий...'
        })  
--- END articles/forms.py ---

--- articles/urls.py ---
 from django.urls import path
from . import views

app_name = 'articles'

urlpatterns = [
    path('', views.article_list, name='article_list'),
    path('create/', views.article_create, name='article_create'),
    path('<slug:slug>/', views.article_detail, name='article_detail'),
    path('<slug:slug>/edit/', views.article_edit, name='article_edit'),
    path('<slug:slug>/delete/', views.article_delete, name='article_delete'),
    path('<slug:slug>/comment/', views.add_comment, name='add_comment'),
    path('<slug:slug>/rate/', views.rate_article, name='rate_article'),
]  
--- END articles/urls.py ---

--- articles/__init__.py ---
  
--- END articles/__init__.py ---

--- articles/models.py ---
 from django.db import models
from django.contrib.auth.models import User
from django.utils.text import slugify
from django.conf import settings
from django.urls import reverse
from unidecode import unidecode
from django_ckeditor_5.fields import CKEditor5Field

class Category(models.Model):
    name = models.CharField(max_length=100, verbose_name='Название')
    slug = models.SlugField(unique=True, blank=True)
    
    class Meta:
        verbose_name = 'Категория'
        verbose_name_plural = 'Категории'
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)
    
    def __str__(self):
        return self.name

class Article(models.Model):
    title = models.CharField(max_length=200, verbose_name='Заголовок')
    slug = models.SlugField(unique=True, blank=True)
    content = CKEditor5Field()
    image = models.ImageField(upload_to='articles/', verbose_name='Изображение', blank=True)
    created_date = models.DateTimeField(auto_now_add=True)
    updated_date = models.DateTimeField(auto_now=True)
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name='Автор', null=False, blank=False)
    category = models.ForeignKey(Category, on_delete=models.CASCADE, verbose_name='Категория')
    views = models.PositiveIntegerField(default=0, verbose_name='Просмотры')
    
    class Meta:
        ordering = ['-created_date']
        verbose_name = 'Статья'
        verbose_name_plural = 'Статьи'
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(unidecode(self.title))
            original_slug = self.slug
            counter = 1
            while Article.objects.filter(slug=self.slug).exists():
                self.slug = f'{original_slug}-{counter}'
                counter += 1
        super().save(*args, **kwargs)
    
    def get_absolute_url(self):
        return reverse('articles:article_detail', kwargs={'slug': self.slug})
    
    def average_rating(self):
        return self.ratings.aggregate(models.Avg('value'))['value__avg'] or 0
    
    def __str__(self):
        return self.title


class Comment(models.Model):
    article = models.ForeignKey(Article, on_delete=models.CASCADE, related_name='comments', verbose_name='Статья')
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name='Автор')
    text = models.TextField(verbose_name='Текст комментария')
    created_date = models.DateTimeField(auto_now_add=True, verbose_name='Дата публикации')
    
    class Meta:
        verbose_name = 'Комментарий'
        verbose_name_plural = 'Комментарии'
        ordering = ['-created_date']
    
    def __str__(self):
        return f'Комментарий от {self.author.username} к {self.article.title}'


class Rating(models.Model):
    RATING_CHOICES = [
        (1, '1'),
        (2, '2'),
        (3, '3'),
        (4, '4'),
        (5, '5'),
    ]
    
    article = models.ForeignKey(Article, on_delete=models.CASCADE, related_name='ratings', verbose_name='Статья')
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name='Пользователь')
    value = models.IntegerField(choices=RATING_CHOICES, verbose_name='Оценка')
    created_date = models.DateTimeField(auto_now_add=True, verbose_name='Дата оценки')
    
    class Meta:
        verbose_name = 'Оценка'
        verbose_name_plural = 'Оценки'
        unique_together = ['article', 'user']  # Один пользователь может оставить только одну оценку
    
    def __str__(self):
        return f'Оценка {self.value} от {self.user.username} для {self.article.title}'
 
--- END articles/models.py ---

--- articles/migrations/0002_commentvote.py ---
 # Generated by Django 5.1.6 on 2025-03-18 16:24

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('articles', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CommentVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.SmallIntegerField(choices=[(1, 'Like'), (-1, 'Dislike')])),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='articles.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Голос за комментарий',
                'verbose_name_plural': 'Голоса за комментарии',
                'unique_together': {('comment', 'user')},
            },
        ),
    ]
 
--- END articles/migrations/0002_commentvote.py ---

--- articles/migrations/0001_initial.py ---
 # Generated by Django 5.1.6 on 2025-03-01 12:07

import django.db.models.deletion
import django_ckeditor_5.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('slug', models.SlugField(blank=True, unique=True)),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок')),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('content', django_ckeditor_5.fields.CKEditor5Field()),
                ('image', models.ImageField(blank=True, upload_to='articles/', verbose_name='Изображение')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('views', models.PositiveIntegerField(default=0, verbose_name='Просмотры')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.category', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Статья',
                'verbose_name_plural': 'Статьи',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст комментария')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата публикации')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='articles.article', verbose_name='Статья')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], verbose_name='Оценка')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата оценки')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='articles.article', verbose_name='Статья')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Оценка',
                'verbose_name_plural': 'Оценки',
                'unique_together': {('article', 'user')},
            },
        ),
    ]
 
--- END articles/migrations/0001_initial.py ---

--- articles/migrations/0003_reaction_delete_commentvote.py ---
 # Generated by Django 5.1.6 on 2025-03-18 18:01

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('articles', '0002_commentvote'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Reaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction_type', models.SmallIntegerField(choices=[(1, 'Like'), (-1, 'Dislike')])),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='articles.comment', verbose_name='Комментарий')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Реакция',
                'verbose_name_plural': 'Реакции',
                'unique_together': {('user', 'comment')},
            },
        ),
        migrations.DeleteModel(
            name='CommentVote',
        ),
    ]
 
--- END articles/migrations/0003_reaction_delete_commentvote.py ---

--- articles/migrations/0004_delete_reaction.py ---
 # Generated by Django 5.1.6 on 2025-03-18 18:05

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('articles', '0003_reaction_delete_commentvote'),
    ]

    operations = [
        migrations.DeleteModel(
            name='Reaction',
        ),
    ]
 
--- END articles/migrations/0004_delete_reaction.py ---

--- articles/migrations/__init__.py ---
  
--- END articles/migrations/__init__.py ---


=== Service Files ===

--- db.sqlite3 ---
<binary content>
--- END ---

--- media/devices/poco-x6_1168DRJ.jpg ---
<binary content>
--- END ---

--- media/devices/poco-x6-3.jpg ---
<binary content>
--- END ---

--- media/devices/poco-x6.jpg ---
<binary content>
--- END ---

--- media/devices/poco-x6-1.jpg ---
<binary content>
--- END ---

--- media/devices/poco-x6-2.jpg ---
<binary content>
--- END ---

--- media/default-images/Ноутбуки.png ---
<binary content>
--- END ---

--- media/default-images/Полноразмерные наушники.png ---
<binary content>
--- END ---

--- media/default-images/Смартфоны.png ---
<binary content>
--- END ---

--- media/articles/poco-x6-1.jpg ---
<binary content>
--- END --- 
--- END prompt.txt ---

--- static/css/base.css ---
 body { color: #94a3b8; }  /* text-slate-400 */

.nav-link {
    transition: all 0.3s ease;
}
.nav-link:hover {
    transform: translateY(-3px);
    color: #60a5fa; /* text-blue-400 */
}
.card-hover {
    transition: all 0.3s ease;
}
.card-hover:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
} 
--- END static/css/base.css ---

--- static/css/animations.css ---
 ss
/*
Список эффектов:
•  fade-in-up: Появление элемента с плавным поднятием снизу вверх.
•  fade-in-down: Появление элемента с плавным опусканием сверху вниз.
•  fade-in-left: Появление элемента с плавным сдвигом слева направо.
•  fade-in-right: Появление элемента с плавным сдвигом справа налево.
•  scale-up: Увеличение размера элемента от меньшего к нормальному.
•  scale-down: Уменьшение размера элемента от большего к нормальному.
•  flip-horizontal: Вращение элемента по горизонтали на 360 градусов.
•  rotate: Непрерывное вращение элемента по кругу.
•  pulse: Пульсирующее изменение размера элемента.
•  wave: Горизонтальное перемещение элемента влево и вправо.
•  blink: Мигание элемента (появление и исчезновение).
•  zoom-in: Плавное увеличение размера элемента, как при приближении.
•  wipe: Эффект "вытирания", когда элемент постепенно появляется слева направо.
•  expand: Анимация расширения элемента по горизонтали от 0 до полной ширины.
•  wave-grow: Увеличение элемента по горизонтали (как волна).
•  cube-rotate: Непрерывное вращение элемента в трехмерном пространстве, как куб.
•  highlight: При наведении курсора появляется тень от текста.
•  typing-animation: Эффект печатающегося текста.
*/

/* fade-in-up */
@keyframes fade-in-up {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in-up {
  animation: fade-in-up 0.5s ease-out forwards;
}

.fade-in-up-hover:hover {
  animation: fade-in-up 0.5s ease-out forwards;
}

.fade-in-up-inf {
    animation: fade-in-up 0.5s ease-out infinite;
}
/* fade-in-down */
@keyframes fade-in-down {
  0% {
    opacity: 0;
    transform: translateY(-20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in-down {
  animation: fade-in-down 0.5s ease-out forwards;
}

.fade-in-down-hover:hover {
  animation: fade-in-down 0.5s ease-out forwards;
}

.fade-in-down-inf {
    animation: fade-in-down 0.5s ease-out infinite;
}


/* fade-in-left */
@keyframes fade-in-left {
  0% {
    opacity: 0;
    transform: translateX(-20px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.fade-in-left {
  animation: fade-in-left 0.5s ease-out forwards;
}

.fade-in-left-hover:hover {
  animation: fade-in-left 0.5s ease-out forwards;
}

.fade-in-left-inf {
    animation: fade-in-left 0.5s ease-out infinite;
}


/* fade-in-right */
@keyframes fade-in-right {
  0% {
    opacity: 0;
    transform: translateX(20px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.fade-in-right {
  animation: fade-in-right 0.5s ease-out forwards;
}

.fade-in-right-hover:hover {
  animation: fade-in-right 0.5s ease-out forwards;
}

.fade-in-right-inf {
    animation: fade-in-right 0.5s ease-out infinite;
}

/* scale-up */
@keyframes scale-up {
  0% {
    transform: scale(0.5);
  }
  100% {
    transform: scale(1);
  }
}

.scale-up {
  animation: scale-up 0.5s ease-out forwards;
}

.scale-up-hover:hover {
  animation: scale-up 0.5s ease-out forwards;
}

.scale-up-inf {
    animation: scale-up 0.5s ease-out infinite;
}

/* scale-down */
@keyframes scale-down {
  0% {
    transform: scale(1.5);
  }
  100% {
    transform: scale(1);
  }
}

.scale-down {
  animation: scale-down 0.5s ease-out forwards;
}

.scale-down-hover:hover {
  animation: scale-down 0.5s ease-out forwards;
}

.scale-down-inf {
    animation: scale-down 0.5s ease-out infinite;
}

/* flip-horizontal */
@keyframes flip-horizontal {
  0% {
    transform: rotateY(0deg);
  }
  50% {
    transform: rotateY(180deg);
  }
  100% {
    transform: rotateY(360deg);
  }
}

.flip-horizontal {
  animation: flip-horizontal 1s linear forwards;
}

.flip-horizontal-hover:hover {
  animation: flip-horizontal 1s linear forwards;
}

.flip-horizontal-inf {
  animation: flip-horizontal 3s linear infinite;
}


/* rotate */
@keyframes rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.rotate {
  animation: rotate 2s linear forwards;
}

.rotate-hover:hover {
  animation: rotate 2s linear forwards;
}

.rotate-inf {
  animation: rotate 2s linear infinite;
}


/* pulse */
@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.1);
  }
  100% {
    transform: scale(1);
  }
}

.pulse {
  animation: pulse 1s ease-in-out forwards;
}

.pulse-hover:hover {
  animation: pulse 1s ease-in-out forwards;
}


.pulse-inf {
  animation: pulse 1s ease-in-out infinite;
}

/* wave */
@keyframes wave {
  0% {
    transform: translateX(0);
  }
  50% {
    transform: translateX(20px);
  }
  100% {
    transform: translateX(0);
  }
}

.wave {
  animation: wave 2s ease-in-out forwards;
}

.wave-hover:hover {
  animation: wave 2s ease-in-out forwards;
}

.wave-inf {
  animation: wave 2s ease-in-out infinite;
}

/* blink */
@keyframes blink {
  0% {
    opacity: 1;
  }
  50% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

.blink {
  animation: blink 1s ease-in-out forwards;
}

.blink-hover:hover {
  animation: blink 1s ease-in-out forwards;
}

.blink-inf {
  animation: blink 1s ease-in-out infinite;
}

/* zoom-in */
@keyframes zoom-in {
  0% {
    transform: scale(0.5);
  }
  100% {
    transform: scale(1);
  }
}

.zoom-in {
  animation: zoom-in 0.5s ease-out forwards;
}

.zoom-in-hover:hover {
  animation: zoom-in 0.5s ease-out forwards;
}

.zoom-in-inf {
  animation: zoom-in 0.5s ease-out infinite;
}


/* wipe */
@keyframes wipe {
  0% {
    clip-path: inset(0 100% 0 0);
  }
  100% {
    clip-path: inset(0 0 0 0);
  }
}

.wipe {
  animation: wipe 0.5s ease-out forwards;
}

.wipe-hover:hover {
  animation: wipe 0.5s ease-out forwards;
}

.wipe-inf {
  animation: wipe 0.5s ease-out infinite;
}

/* expand */
@keyframes expand {
  0% {
    width: 0;
  }
  100% {
    width: 100%;
  }
}

.expand {
  animation: expand 1s ease-out forwards;
}

.expand-hover:hover {
  animation: expand 1s ease-out forwards;
}

.expand-inf {
  animation: expand 1s ease-out infinite;
}

/* wave-grow */
@keyframes wave-grow {
  0% {
    transform: scaleX(0);
  }
  100% {
    transform: scaleX(1);
  }
}

.wave-grow {
  animation: wave-grow 0.5s ease-out forwards;
}

.wave-grow-hover:hover {
  animation: wave-grow 0.5s ease-out forwards;
}

.wave-grow-inf {
  animation: wave-grow 0.5s ease-out infinite;
}

/* cube-rotate */
@keyframes cube-rotate {
  0% {
    transform: rotateX(0deg) rotateY(0deg);
  }
  100% {
    transform: rotateX(360deg) rotateY(360deg);
  }
}

.cube-rotate {
  animation: cube-rotate 5s linear forwards;
}

.cube-rotate-hover:hover {
  animation: cube-rotate 5s linear forwards;
}

.cube-rotate-inf {
  animation: cube-rotate 5s linear infinite;
}

/* highlight */
.highlight {
  transition: text-shadow 0.3s ease-in-out;
}

.highlight-hover:hover {
  text-shadow: 0 0 5px #007bff, 0px 0px 10px #007bff; /* Цвет и размытие тени */
}

/* typing-animation */
.typing-animation {
  display: inline-block;
  overflow: hidden;
  border-right: .15em solid gray; /* Курсор */
  white-space: nowrap;
  margin: 0 auto;
  letter-spacing: .15em;
  animation:
    typing 4s steps(40, end) forwards,
    blink-caret .75s step-end infinite;
}

.typing-animation-hover:hover{
  display: inline-block;
  overflow: hidden;
  border-right: .15em solid gray; /* Курсор */
  white-space: nowrap;
  margin: 0 auto;
  letter-spacing: .15em;
  animation:
    typing 4s steps(40, end) forwards,
    blink-caret .75s step-end infinite;
}

.typing-animation-inf {
  display: inline-block;
  overflow: hidden;
  border-right: .15em solid gray; /* Курсор */
  white-space: nowrap;
  margin: 0 auto;
  letter-spacing: .15em;
  animation:
    typing 4s steps(40, end) infinite,
    blink-caret .75s step-end infinite;
}

@keyframes typing {
      from { width: 0 }
      to { width: 60% }
    }

@keyframes blink-caret {
  from, to { border-color: transparent }
  50% { border-color: gray; }
}
 
--- END static/css/animations.css ---

--- comparisons/tests.py ---
 from django.test import TestCase

# Create your tests here.
 
--- END comparisons/tests.py ---

--- comparisons/views.py ---
 from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from .models import Comparison, ComparisonVote
from devices.models import Device
from collections import defaultdict
from django.views.decorators.cache import never_cache

@login_required
def comparison_create(request):
    if request.method == 'POST':
        device_ids = request.POST.getlist('devices')
        if len(device_ids) == 2:
            comparison = Comparison.objects.create(
                created_by=request.user,
                title="Сравнение устройств"
            )
            comparison.devices.set(device_ids)
            if not comparison.slug:
                comparison.save()
            return redirect('comparisons:comparison_detail', slug=comparison.slug)
    
    devices = Device.objects.all().order_by('-created_at')
    context = {
        'devices': devices,
    }
    return render(request, 'comparisons/comparison_create.html', context)

@never_cache
def comparison_detail(request, slug):
    comparison = get_object_or_404(Comparison, slug=slug)
    devices = comparison.devices.all()
    
    # Инициализируем структуру данных
    specifications = {}
    
    for device in devices:
        for spec in device.specifications.all().select_related('field__category'):
            category = spec.field.category.name if spec.field.category else "Общие"
            field_name = spec.field.name
            field_unit = spec.field.unit
            
            if category not in specifications:
                specifications[category] = {}
            
            if field_name not in specifications[category]:
                specifications[category][field_name] = {
                    'unit': field_unit,
                    'values': {},
                    'is_higher_better': spec.field.is_higher_better
                }
            
            specifications[category][field_name]['values'][device.id] = spec.value

    context = {
        'comparison': comparison,
        'devices': devices,
        'specifications': specifications.items(),  # Преобразуем в список пар
        'user_vote': None
    }
    
    if request.user.is_authenticated:
        context['user_vote'] = ComparisonVote.objects.filter(
            comparison=comparison,
            user=request.user
        ).first()
    
    return render(request, 'comparisons/comparison_detail.html', context)

@login_required
def vote_for_device(request, comparison_slug, device_slug):
    comparison = get_object_or_404(Comparison, slug=comparison_slug)
    device = get_object_or_404(Device, slug=device_slug)
    
    if device in comparison.devices.all():
        ComparisonVote.objects.update_or_create(
            comparison=comparison,
            user=request.user,
            defaults={'device': device}
        )
    
    return redirect('comparisons:comparison_detail', slug=comparison_slug)

def comparison_list(request):
    comparisons = Comparison.objects.all().order_by('-created_date')
    return render(request, 'comparisons/comparison_list.html', {
        'comparisons': comparisons
    })

 
--- END comparisons/views.py ---

--- comparisons/apps.py ---
 from django.apps import AppConfig


class ComparisonsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'comparisons'
 
--- END comparisons/apps.py ---

--- comparisons/admin.py ---
 from django.contrib import admin
from .models import (
    Comparison,
    ComparisonVote
)

@admin.register(Comparison)
class ComparisonAdmin(admin.ModelAdmin):
    list_display = ['title', 'created_by', 'created_date', 'is_public']
    list_filter = ['is_public', 'created_date']
    search_fields = ['title']
    filter_horizontal = ['devices']

@admin.register(ComparisonVote)
class ComparisonVoteAdmin(admin.ModelAdmin):
    list_display = ['comparison', 'device', 'user', 'created_date']
    list_filter = ['created_date']
    search_fields = ['comparison__title', 'device__name', 'user__username']
 
--- END comparisons/admin.py ---

--- comparisons/forms.py ---
  
--- END comparisons/forms.py ---

--- comparisons/urls.py ---
 from django.urls import path
from . import views

app_name = 'comparisons'

urlpatterns = [
    path('', views.comparison_list, name='comparison_list'),
    path('create/', views.comparison_create, name='comparison_create'),
    path('<slug:slug>/', views.comparison_detail, name='comparison_detail'),
    path('<slug:comparison_slug>/vote/<slug:device_slug>/', 
         views.vote_for_device, name='vote_for_device'),
]  
--- END comparisons/urls.py ---

--- comparisons/__init__.py ---
  
--- END comparisons/__init__.py ---

--- comparisons/models.py ---
 from django.db import models
from django.utils.text import slugify
from django.conf import settings
from devices.models import Device

class Comparison(models.Model):
    title = models.CharField(max_length=255, verbose_name='Название', blank=True)
    slug = models.SlugField(unique=True, blank=True)
    devices = models.ManyToManyField(Device, verbose_name='Устройства')
    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name='Создатель')
    created_date = models.DateTimeField(auto_now_add=True)
    is_public = models.BooleanField(default=True, verbose_name='Публичное сравнение')
    
    class Meta:
        verbose_name = 'Сравнение'
        verbose_name_plural = 'Сравнения'
        ordering = ['-created_date']
    
    def save(self, *args, **kwargs):
        # Генерация заголовка, если он не задан
        if not self.title:
            devices_list = list(self.devices.all())
            if devices_list:
                self.title = f"Сравнение: {' vs '.join([device.name for device in devices_list[:3]])}"
                if len(devices_list) > 3:
                    self.title += " и другие"
        
        # Генерация slug, если он не задан
        if not self.slug:
            base_slug = slugify(self.title)
            unique_slug = base_slug
            num = 1
            while Comparison.objects.filter(slug=unique_slug).exists():
                unique_slug = f"{base_slug}-{num}"
                num += 1
            self.slug = unique_slug
        
        super().save(*args, **kwargs)
    
    def __str__(self):
        return self.title

class ComparisonVote(models.Model):
    comparison = models.ForeignKey(Comparison, on_delete=models.CASCADE, related_name='votes', verbose_name='Сравнение')
    device = models.ForeignKey(Device, on_delete=models.CASCADE, verbose_name='Устройство')
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name='Пользователь')
    created_date = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = 'Голос в сравнении'
        verbose_name_plural = 'Голоса в сравнении'
        unique_together = ['comparison', 'user']  # Один пользователь - один голос в сравнении
    
    def __str__(self):
        return f"Голос за {self.device.name} в {self.comparison.title}"
 
--- END comparisons/models.py ---

--- comparisons/migrations/0001_initial.py ---
 # Generated by Django 5.1.6 on 2025-02-17 17:38

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('devices', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comparison',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='Название')),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('is_public', models.BooleanField(default=True, verbose_name='Публичное сравнение')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
                ('devices', models.ManyToManyField(to='devices.device', verbose_name='Устройства')),
            ],
            options={
                'verbose_name': 'Сравнение',
                'verbose_name_plural': 'Сравнения',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='ComparisonVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('comparison', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='comparisons.comparison', verbose_name='Сравнение')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='devices.device', verbose_name='Устройство')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Голос в сравнении',
                'verbose_name_plural': 'Голоса в сравнении',
                'unique_together': {('comparison', 'user')},
            },
        ),
    ]
 
--- END comparisons/migrations/0001_initial.py ---

--- comparisons/migrations/0002_alter_comparison_title.py ---
 # Generated by Django 5.1.6 on 2025-02-18 19:10

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('comparisons', '0001_initial'),
    ]

    operations = [
        migrations.AlterField(
            model_name='comparison',
            name='title',
            field=models.CharField(blank=True, max_length=255, verbose_name='Название'),
        ),
    ]
 
--- END comparisons/migrations/0002_alter_comparison_title.py ---

--- comparisons/migrations/__init__.py ---
  
--- END comparisons/migrations/__init__.py ---

--- comparisons/templatetags/comparison_tags.py ---
 from django import template

register = template.Library()

@register.filter
def get_item(dictionary, key):
    return dictionary.get(key)  
--- END comparisons/templatetags/comparison_tags.py ---

--- comparisons/templatetags/custom_filters.py ---
 from django import template

register = template.Library()

@register.filter
def get_item(dictionary, key):
    return dictionary.get(key)  
--- END comparisons/templatetags/custom_filters.py ---

--- devices/tests.py ---
 from django.test import TestCase

# Create your tests here.
 
--- END devices/tests.py ---

--- devices/views.py ---
 from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.db.models import Q
from django.http import JsonResponse
from .models import Device, DeviceCategory, DeviceImage, SpecificationCategory
from django.contrib import messages
from .forms import DeviceForm, DeviceSpecificationFormSet, SpecificationFieldForm


def device_list(request):
    devices = Device.objects.all().order_by('-created_at')
    categories = DeviceCategory.objects.all()
    
    # Фильтрация по категории
    category_slug = request.GET.get('category')
    if category_slug:
        devices = devices.filter(category__slug=category_slug)
    
    # Поиск по названию
    search_query = request.GET.get('search')
    if search_query:
        devices = devices.filter(
            Q(name__icontains=search_query) | 
            Q(manufacturer__icontains=search_query)
        )
    
    context = {
        'devices': devices,
        'categories': categories,
        'current_category': category_slug,
        'search_query': search_query,
    }
    return render(request, 'devices/device_list.html', context)

def device_detail(request, slug):
    device = get_object_or_404(Device, slug=slug)
    # Группируем характеристики по категориям
    specifications = {}
    for category in SpecificationCategory.objects.all():
        specs = device.specifications.filter(field__category=category).select_related('field')
        if specs.exists():
            specifications[category] = specs
    
    return render(request, 'devices/device_detail.html', {
        'device': device,
        'specifications': specifications,
    })


def get_device_specs(request):
    if request.headers.get('x-requested-with') == 'XMLHttpRequest':
        device_id = request.GET.get('device_id')
        if device_id:
            device = get_object_or_404(Device, id=device_id)
            specs = [{
                'name': spec.specification.name,
                'value': spec.value,
                'unit': spec.specification.unit
            } for spec in device.specifications.all()]
            return JsonResponse({'specs': specs})
    return JsonResponse({'error': 'Invalid request'}, status=400)


@login_required
def device_create(request):
    if request.method == 'POST':
        form = DeviceForm(request.POST)
        if form.is_valid():
            device = form.save(commit=False)
            
            # Обработка главного изображения
            if 'main_image' in request.FILES:
                device.main_image = request.FILES['main_image']
            
            device.save()
            
            # Обработка дополнительных изображений
            for image in request.FILES.getlist('images'):
                DeviceImage.objects.create(device=device, image=image)
            
            # Обработка спецификаций
            formset = DeviceSpecificationFormSet(request.POST, instance=device)
            if formset.is_valid():
                formset.save()
                messages.success(request, 'Устройство успешно создано.')
                return redirect('devices:device_detail', slug=device.slug)
    else:
        form = DeviceForm()
        formset = DeviceSpecificationFormSet()
    
    categories = SpecificationCategory.objects.prefetch_related('fields').all()
    
    return render(request, 'devices/device_form.html', {
        'form': form,
        'formset': formset,
        'categories': categories,
        'title': 'Создание устройства'
    })


@login_required
def device_edit(request, slug):
    device = get_object_or_404(Device, slug=slug)
    
    if request.method == 'POST':
        form = DeviceForm(request.POST, instance=device)
        formset = DeviceSpecificationFormSet(request.POST, instance=device)
        
        if form.is_valid():
            device = form.save(commit=False)
            
            # Обработка главного изображения
            if 'main_image' in request.FILES:
                device.main_image = request.FILES['main_image']
            
            device.save()
            
            # Обработка дополнительных изображений
            for image in request.FILES.getlist('images'):
                DeviceImage.objects.create(device=device, image=image)
            
            # Обработка спецификаций
            if formset.is_valid():
                formset.save()
                messages.success(request, 'Устройство успешно обновлено.')
                return redirect('devices:device_detail', slug=device.slug)
    else:
        form = DeviceForm(instance=device)
        formset = DeviceSpecificationFormSet(instance=device)
    
    return render(request, 'devices/device_form.html', {
        'form': form,
        'formset': formset,
        'device': device,
        'title': 'Редактирование устройства',
        'categories': SpecificationCategory.objects.prefetch_related('fields').all()
    })


@login_required
def specification_create(request):
    if not request.user.is_staff:
        messages.error(request, 'У вас нет прав на создание спецификаций.')
        return redirect('devices:device_list')
    
    if request.method == 'POST':
        form = SpecificationFieldForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Характеристика успешно создана!')
            return redirect('devices:device_list')
    else:
        form = SpecificationFieldForm()
    
    return render(request, 'devices/specification_form.html', {
        'form': form,
        'title': 'Создать характеристику'
    })


@login_required
def device_delete(request, slug):
    device = get_object_or_404(Device, slug=slug)
    
    if request.method == 'POST':
        device.delete()
        messages.success(request, 'Устройство успешно удалено.')
        return redirect('devices:device_list')
        
    return render(request, 'devices/device_confirm_delete.html', {
        'device': device
    }) 
--- END devices/views.py ---

--- devices/apps.py ---
 from django.apps import AppConfig


class DevicesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'devices'
 
--- END devices/apps.py ---

--- devices/admin.py ---
 from django.contrib import admin
from .models import (
    Device, 
    DeviceCategory, 
    DeviceImage, 
    SpecificationCategory, 
    SpecificationField, 
    DeviceSpecification,
)


class SpecificationFieldInline(admin.TabularInline):
    model = SpecificationField
    extra = 1

@admin.register(SpecificationCategory)
class SpecificationCategoryAdmin(admin.ModelAdmin):
    list_display = ['name', 'order']
    search_fields = ['name']
    ordering = ['order']
    inlines = [SpecificationFieldInline]

class DeviceSpecificationInline(admin.TabularInline):
    model = DeviceSpecification
    extra = 1
    autocomplete_fields = ['field']

class DeviceImageInline(admin.TabularInline):
    model = DeviceImage
    extra = 1

@admin.register(Device)
class DeviceAdmin(admin.ModelAdmin):
    list_display = ['name', 'category', 'created_at']
    list_filter = ['category']
    search_fields = ['name', 'description']
    inlines = [DeviceImageInline, DeviceSpecificationInline]
    prepopulated_fields = {'slug': ('name',)}

@admin.register(DeviceCategory)
class DeviceCategoryAdmin(admin.ModelAdmin):
    list_display = ['name']
    prepopulated_fields = {'slug': ('name',)}

@admin.register(SpecificationField)
class SpecificationFieldAdmin(admin.ModelAdmin):
    list_display = ['name', 'category', 'unit', 'order']
    list_filter = ['category']
    search_fields = ['name', 'description']
    ordering = ['category', 'order']

 
--- END devices/admin.py ---

--- devices/forms.py ---
 from django import forms
from .models import (
    Device, 
    DeviceSpecification, 
    SpecificationCategory, 
    SpecificationField
)


class DeviceForm(forms.ModelForm):
    class Meta:
        model = Device
        fields = ['name', 'category', 'description']
        widgets = {
            'name': forms.TextInput(attrs={
                'class': 'form-input w-full rounded-lg border-gray-700 bg-gray-800 text-white',
                'placeholder': 'Название устройства'
            }),
            'category': forms.Select(attrs={
                'class': 'form-select w-full rounded-lg border-gray-700 bg-gray-800 text-white'
            }),
            'description': forms.Textarea(attrs={
                'class': 'form-textarea w-full rounded-lg border-gray-700 bg-gray-800 text-white',
                'rows': 3,
                'placeholder': 'Описание устройства'
            }),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            if field != 'specifications':
                self.fields[field].widget.attrs.update({'class': 'form-input'})

    def save(self, commit=True):
        device = super().save(commit=commit)
        if commit and self.cleaned_data.get('specifications'):
            # Удаляем старые спецификации
            device.specifications.all().delete()
            # Добавляем новые
            specs_data = self.cleaned_data['specifications']
            for spec_data in specs_data:
                spec, _ = SpecificationField.objects.get_or_create(
                    name=spec_data['name'],
                    defaults={'unit': spec_data.get('unit', '')}
                )
                DeviceSpecification.objects.create(
                    device=device,
                    specification=spec,
                    value=spec_data['value']
                )
        return device

    def clean_images(self):
        """Метод для обработки дополнительных изображений"""
        return self.files.getlist('images')

class DeviceSpecificationForm(forms.ModelForm):
    class Meta:
        model = DeviceSpecification
        fields = ['field', 'value']
        widgets = {
            'field': forms.HiddenInput(),
            'value': forms.TextInput(attrs={
                'class': 'form-input w-full rounded-lg border-gray-700 bg-gray-800 text-white'
            })
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.instance and self.instance.field:
            self.fields['field'].initial = self.instance.field
            if self.instance.field.unit:
                self.fields['value'].widget.attrs['placeholder'] = f'Введите значение в {self.instance.field.unit}'

class SpecificationFieldForm(forms.ModelForm):
    class Meta:
        model = SpecificationField
        fields = ['name', 'category', 'description', 'unit', 'order']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-input'}),
            'category': forms.Select(attrs={'class': 'form-select'}),
            'description': forms.Textarea(attrs={'class': 'form-textarea', 'rows': 3}),
            'unit': forms.TextInput(attrs={'class': 'form-input'}),
            'order': forms.NumberInput(attrs={'class': 'form-input'})
        }

class BaseDeviceSpecificationFormSet(forms.BaseInlineFormSet):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.categories = {}
        
        categories = SpecificationCategory.objects.prefetch_related('fields').all()
        
        for category in categories:
            self.categories[category] = []
            for field in category.fields.all():
                existing_spec = None
                if self.instance.pk:
                    existing_spec = self.instance.specifications.filter(field=field).first()
                
                form = DeviceSpecificationForm(
                    data=self.data if self.data else None,
                    prefix=f'spec_{field.id}',
                    instance=existing_spec or DeviceSpecification(device=self.instance, field=field),
                    initial={'field': field.id}
                )
                self.categories[category].append(form)

    def is_valid(self):
        valid = True
        for category_forms in self.categories.values():
            for form in category_forms:
                if form.is_valid():
                    continue
                valid = False
        return valid

    def save(self, commit=True):
        specs = []
        if commit:
            # Сохраняем только заполненные спецификации
            for category_forms in self.categories.values():
                for form in category_forms:
                    if form.is_valid() and form.cleaned_data.get('value'):
                        spec = form.save(commit=False)
                        spec.device = self.instance
                        spec.save()
                        specs.append(spec)
            
            # Удаляем старые спецификации, которые не были обновлены
            self.instance.specifications.exclude(
                id__in=[spec.id for spec in specs]
            ).delete()
        
        return specs

# Создаем FormSet для спецификаций устройства
DeviceSpecificationFormSet = forms.inlineformset_factory(
    Device,
    DeviceSpecification,
    form=DeviceSpecificationForm,
    formset=BaseDeviceSpecificationFormSet,
    extra=0,
    can_delete=False
)  
--- END devices/forms.py ---

--- devices/urls.py ---
 from django.urls import path
from . import views

app_name = 'devices'

urlpatterns = [
    path('', views.device_list, name='device_list'),
    path('create/', views.device_create, name='device_create'),
    path('<slug:slug>/', views.device_detail, name='device_detail'),
    path('<slug:slug>/edit/', views.device_edit, name='device_edit'),
    path('<slug:slug>/delete/', views.device_delete, name='device_delete'),
    path('specification/create/', views.specification_create, name='specification_create'),
]
 
--- END devices/urls.py ---

--- devices/__init__.py ---
  
--- END devices/__init__.py ---

--- devices/models.py ---
 from django.db import models
from django.contrib.auth.models import User
from django.utils.text import slugify
from django.conf import settings
from django.urls import reverse
from unidecode import unidecode  # добавим для корректной транслитерации

class DeviceCategory(models.Model):
    name = models.CharField(max_length=200, verbose_name='Название')
    slug = models.SlugField(unique=True, blank=True)
    
    class Meta:
        verbose_name = 'Категория устройств'
        verbose_name_plural = 'Категории устройств'
    
    def __str__(self):
        return self.name
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(unidecode(self.name))
        super().save(*args, **kwargs)


class SpecificationCategory(models.Model):
    """Категория характеристик (например, 'Дизайн', 'Экран', 'Процессор')"""
    name = models.CharField(max_length=100, verbose_name='Название')
    order = models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')

    class Meta:
        verbose_name = 'Категория характеристик'
        verbose_name_plural = 'Категории характеристик'
        ordering = ['order']

    def __str__(self):
        return self.name

class SpecificationField(models.Model):
    """Поле характеристики (например, 'Вес', 'Толщина', 'Высота')"""
    category = models.ForeignKey(
        SpecificationCategory, 
        on_delete=models.CASCADE,
        related_name='fields',
        verbose_name='Категория'
    )
    name = models.CharField(max_length=100, verbose_name='Название')
    description = models.TextField(
        blank=True, 
        verbose_name='Описание',
        help_text='Объяснение характеристики'
    )
    unit = models.CharField(
        max_length=20, 
        blank=True, 
        verbose_name='Единица измерения',
        help_text='Например: мм, кг, МГц'
    )
    order = models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')
    is_higher_better = models.BooleanField(
        default=False,
        verbose_name="Чем выше тем лучше",
        help_text="Определяет выделение лучшего значения в сравнениях"
    )

    class Meta:
        verbose_name = 'Поле характеристики'
        verbose_name_plural = 'Поля характеристик'
        ordering = ['category', 'order']

    def __str__(self):
        return f"{self.category.name} - {self.name}"

class DeviceImage(models.Model):
    device = models.ForeignKey('Device', related_name='images', on_delete=models.CASCADE)
    image = models.ImageField(upload_to='devices/')
    order = models.PositiveIntegerField(default=0)

    class Meta:
        ordering = ['order']


class Device(models.Model):
    name = models.CharField(max_length=200, verbose_name='Название')
    slug = models.SlugField(unique=True, blank=True)
    description = models.TextField(verbose_name='Описание', blank=True)
    main_image = models.ImageField(
        upload_to='devices/',
        verbose_name='Главное изображение',
        null=True,
        blank=True
    )
    category = models.ForeignKey(
        DeviceCategory, 
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name='Категория'
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='Дата обновления')

    class Meta:
        ordering = ['-created_at']
        verbose_name = 'Устройство'
        verbose_name_plural = 'Устройства'

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(unidecode(self.name))
            original_slug = self.slug
            counter = 1
            while Device.objects.filter(slug=self.slug).exists():
                self.slug = f'{original_slug}-{counter}'
                counter += 1
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return reverse('comparisons:device_detail', kwargs={'slug': self.slug})
    
    def get_first_image(self):
        if self.main_image:
            return self.main_image
        first_image = self.images.first()
        return first_image.image if first_image else None

    def __str__(self):
        return self.name

class DeviceSpecification(models.Model):
    """Значение характеристики для конкретного устройства"""
    device = models.ForeignKey(
        'Device', 
        on_delete=models.CASCADE,
        related_name='specifications',
        verbose_name='Устройство'
    )
    field = models.ForeignKey(
        SpecificationField,
        on_delete=models.CASCADE,
        verbose_name='Характеристика',
        null=True,
        blank=True
    )
    value = models.CharField(
        max_length=255, 
        blank=True,
        verbose_name='Значение'
    )

    class Meta:
        verbose_name = 'Характеристика устройства'
        verbose_name_plural = 'Характеристики устройства'
        unique_together = ['device', 'field']

    def __str__(self):
        return f"{self.device.name} - {self.field.name if self.field else 'Без характеристики'}: {self.value}"
 
--- END devices/models.py ---

--- devices/migrations/0002_specificationfield_is_higher_better.py ---
 # Generated by Django 5.1.6 on 2025-02-18 19:10

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('devices', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='specificationfield',
            name='is_higher_better',
            field=models.BooleanField(default=False, help_text='Определяет выделение лучшего значения в сравнениях', verbose_name='Чем выше тем лучше'),
        ),
    ]
 
--- END devices/migrations/0002_specificationfield_is_higher_better.py ---

--- devices/migrations/0001_initial.py ---
 # Generated by Django 5.1.6 on 2025-02-17 17:38

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('slug', models.SlugField(blank=True, unique=True)),
            ],
            options={
                'verbose_name': 'Категория устройств',
                'verbose_name_plural': 'Категории устройств',
            },
        ),
        migrations.CreateModel(
            name='SpecificationCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')),
            ],
            options={
                'verbose_name': 'Категория характеристик',
                'verbose_name_plural': 'Категории характеристик',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('description', models.TextField(verbose_name='Описание')),
                ('main_image', models.ImageField(blank=True, null=True, upload_to='devices/', verbose_name='Главное изображение')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='devices.devicecategory', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Устройство',
                'verbose_name_plural': 'Устройства',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DeviceImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='devices/')),
                ('order', models.PositiveIntegerField(default=0)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='devices.device')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='SpecificationField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(blank=True, help_text='Объяснение характеристики', verbose_name='Описание')),
                ('unit', models.CharField(blank=True, help_text='Например: мм, кг, МГц', max_length=20, verbose_name='Единица измерения')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='devices.specificationcategory', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Поле характеристики',
                'verbose_name_plural': 'Поля характеристик',
                'ordering': ['category', 'order'],
            },
        ),
        migrations.CreateModel(
            name='DeviceSpecification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=255, verbose_name='Значение')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specifications', to='devices.device', verbose_name='Устройство')),
                ('field', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='devices.specificationfield', verbose_name='Характеристика')),
            ],
            options={
                'verbose_name': 'Характеристика устройства',
                'verbose_name_plural': 'Характеристики устройства',
                'unique_together': {('device', 'field')},
            },
        ),
    ]
 
--- END devices/migrations/0001_initial.py ---

--- devices/migrations/0003_alter_device_description.py ---
 # Generated by Django 5.1.6 on 2025-03-17 20:06

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('devices', '0002_specificationfield_is_higher_better'),
    ]

    operations = [
        migrations.AlterField(
            model_name='device',
            name='description',
            field=models.TextField(blank=True, verbose_name='Описание'),
        ),
    ]
 
--- END devices/migrations/0003_alter_device_description.py ---

--- devices/migrations/__init__.py ---
  
--- END devices/migrations/__init__.py ---

--- devices/templatetags/device_tags.py ---
 from django import template

register = template.Library()

@register.filter(name='add_class')
def add_class(field, class_name):
    return field.as_widget(attrs={'class': class_name}) 
--- END devices/templatetags/device_tags.py ---

--- devices/templatetags/__init__.py ---
  
--- END devices/templatetags/__init__.py ---

--- accounts/views.py ---
 from django.shortcuts import render, redirect
from django.contrib.auth import login, logout, authenticate
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .forms import RegisterForm, LoginForm

@login_required
def profile_view(request):
    return render(request, 'accounts/profile.html')

def login_view(request):
    if request.method == 'POST':
        form = LoginForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            messages.success(request, 'Вы успешно вошли!')
            return redirect('home')
    else:
        form = LoginForm()
    return render(request, 'accounts/login.html', {'form': form})

def register(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, 'Регистрация успешна!')
            return redirect('home')
    else:
        form = RegisterForm()
    return render(request, 'accounts/register.html', {'form': form})

def logout_view(request):
    logout(request)
    messages.success(request, 'Вы успешно вышли!')
    return redirect('home')  
--- END accounts/views.py ---

--- accounts/forms.py ---
 from django import forms
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from users.models import User

class RegisterForm(UserCreationForm):
    email = forms.EmailField(required=True)
    
    class Meta:
        model = User
        fields = ('username', 'email', 'password1', 'password2')
        
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs.update({
                'class': 'w-full rounded-lg border-gray-300 bg-white text-gray-900'
            })

class LoginForm(AuthenticationForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs.update({
                'class': 'w-full rounded-lg border-gray-300 bg-white text-gray-900'
            })  
--- END accounts/forms.py ---

--- accounts/urls.py ---
 from django.urls import path
from . import views

app_name = 'accounts'

urlpatterns = [
    path('profile/', views.profile_view, name='profile'),
    path('register/', views.register, name='register'),
    path('login/', views.login_view, name='login'),
    path('logout/', views.logout_view, name='logout'),
]  
--- END accounts/urls.py ---

--- profiles/tests.py ---
 from django.test import TestCase

# Create your tests here.
 
--- END profiles/tests.py ---

--- profiles/views.py ---
 from django.shortcuts import render

# Create your views here.
 
--- END profiles/views.py ---

--- profiles/apps.py ---
 from django.apps import AppConfig


class ProfilesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'profiles'
 
--- END profiles/apps.py ---

--- profiles/admin.py ---
 from django.contrib import admin
from .models import Profile, Achievement, UserAchievement

@admin.register(Profile)
class ProfileAdmin(admin.ModelAdmin):
    list_display = ('user', 'articles_read', 'comments_count', 'comparisons_created', 'votes_count')
    list_filter = ('notify_on_comment_reply', 'notify_on_article_update', 'notify_on_device_update')
    search_fields = ('user__username', 'user__email')
    
    fieldsets = (
        ('Основная информация', {
            'fields': ('user', 'avatar')
        }),
        ('Избранное', {
            'fields': ('favorite_articles', 'favorite_devices')
        }),
        ('Статистика', {
            'fields': ('articles_read', 'comments_count', 'comparisons_created', 'votes_count')
        }),
        ('Настройки уведомлений', {
            'fields': ('notify_on_comment_reply', 'notify_on_article_update', 'notify_on_device_update')
        }),
    )
    
    readonly_fields = ('articles_read', 'comments_count', 'comparisons_created', 'votes_count')

@admin.register(Achievement)
class AchievementAdmin(admin.ModelAdmin):
    list_display = ('name', 'condition_type', 'condition_value')
    list_filter = ('condition_type',)
    search_fields = ('name', 'description')

class UserAchievementInline(admin.TabularInline):
    model = UserAchievement
    extra = 0
    readonly_fields = ('date_earned',)
    can_delete = False

@admin.register(UserAchievement)
class UserAchievementAdmin(admin.ModelAdmin):
    list_display = ('user', 'achievement', 'date_earned')
    list_filter = ('achievement', 'date_earned')
    search_fields = ('user__username', 'achievement__name')
    readonly_fields = ('date_earned',)
 
--- END profiles/admin.py ---

--- profiles/__init__.py ---
  
--- END profiles/__init__.py ---

--- profiles/models.py ---
 from django.db import models
from django.conf import settings
from django.db.models.signals import post_save
from django.dispatch import receiver
from articles.models import Article
from comparisons.models import Comparison, Device

class Profile(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='profile')
    avatar = models.ImageField(upload_to='avatars/', default='avatars/default.png', verbose_name='Аватар')
    favorite_articles = models.ManyToManyField(Article, blank=True, related_name='favorited_by', verbose_name='Избранные статьи')
    favorite_devices = models.ManyToManyField(Device, blank=True, related_name='favorited_by', verbose_name='Избранные устройства')
    
    # Статистика
    articles_read = models.PositiveIntegerField(default=0, verbose_name='Прочитано статей')
    comments_count = models.PositiveIntegerField(default=0, verbose_name='Количество комментариев')
    comparisons_created = models.PositiveIntegerField(default=0, verbose_name='Создано сравнений')
    votes_count = models.PositiveIntegerField(default=0, verbose_name='Количество голосов')
    
    # Настройки уведомлений
    notify_on_comment_reply = models.BooleanField(default=True, verbose_name='Уведомлять об ответах на комментарии')
    notify_on_article_update = models.BooleanField(default=True, verbose_name='Уведомлять об обновлениях избранных статей')
    notify_on_device_update = models.BooleanField(default=True, verbose_name='Уведомлять об обновлениях избранных устройств')

    class Meta:
        verbose_name = 'Профиль'
        verbose_name_plural = 'Профили'

    def __str__(self):
        return f'Профиль пользователя {self.user.username}'

class Achievement(models.Model):
    name = models.CharField(max_length=100, verbose_name='Название')
    description = models.TextField(verbose_name='Описание')
    icon = models.ImageField(upload_to='achievements/', verbose_name='Иконка')
    condition_value = models.PositiveIntegerField(verbose_name='Значение для получения')
    condition_type = models.CharField(
        max_length=50,
        choices=[
            ('articles_read', 'Прочитано статей'),
            ('comments_count', 'Написано комментариев'),
            ('comparisons_created', 'Создано сравнений'),
            ('votes_count', 'Сделано голосов'),
        ],
        verbose_name='Тип достижения'
    )

    class Meta:
        verbose_name = 'Достижение'
        verbose_name_plural = 'Достижения'

    def __str__(self):
        return self.name

class UserAchievement(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='achievements')
    achievement = models.ForeignKey(Achievement, on_delete=models.CASCADE)
    date_earned = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = 'Достижение пользователя'
        verbose_name_plural = 'Достижения пользователей'
        unique_together = ['user', 'achievement']

    def __str__(self):
        return f'{self.user.username} - {self.achievement.name}'

@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)

@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def save_user_profile(sender, instance, **kwargs):
    instance.profile.save()
 
--- END profiles/models.py ---

--- profiles/migrations/0001_initial.py ---
 # Generated by Django 5.1.6 on 2025-02-17 17:38

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('articles', '__first__'),
        ('devices', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
                ('icon', models.ImageField(upload_to='achievements/', verbose_name='Иконка')),
                ('condition_value', models.PositiveIntegerField(verbose_name='Значение для получения')),
                ('condition_type', models.CharField(choices=[('articles_read', 'Прочитано статей'), ('comments_count', 'Написано комментариев'), ('comparisons_created', 'Создано сравнений'), ('votes_count', 'Сделано голосов')], max_length=50, verbose_name='Тип достижения')),
            ],
            options={
                'verbose_name': 'Достижение',
                'verbose_name_plural': 'Достижения',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(default='avatars/default.png', upload_to='avatars/', verbose_name='Аватар')),
                ('articles_read', models.PositiveIntegerField(default=0, verbose_name='Прочитано статей')),
                ('comments_count', models.PositiveIntegerField(default=0, verbose_name='Количество комментариев')),
                ('comparisons_created', models.PositiveIntegerField(default=0, verbose_name='Создано сравнений')),
                ('votes_count', models.PositiveIntegerField(default=0, verbose_name='Количество голосов')),
                ('notify_on_comment_reply', models.BooleanField(default=True, verbose_name='Уведомлять об ответах на комментарии')),
                ('notify_on_article_update', models.BooleanField(default=True, verbose_name='Уведомлять об обновлениях избранных статей')),
                ('notify_on_device_update', models.BooleanField(default=True, verbose_name='Уведомлять об обновлениях избранных устройств')),
                ('favorite_articles', models.ManyToManyField(blank=True, related_name='favorited_by', to='articles.article', verbose_name='Избранные статьи')),
                ('favorite_devices', models.ManyToManyField(blank=True, related_name='favorited_by', to='devices.device', verbose_name='Избранные устройства')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль',
                'verbose_name_plural': 'Профили',
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_earned', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Достижение пользователя',
                'verbose_name_plural': 'Достижения пользователей',
                'unique_together': {('user', 'achievement')},
            },
        ),
    ]
 
--- END profiles/migrations/0001_initial.py ---

--- profiles/migrations/__init__.py ---
  
--- END profiles/migrations/__init__.py ---

--- tech_help/settings.py ---
 from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-llsc$=xe^*3#yvt-0-tv1d(z3tyfop(7p+a=22wmhzbfw)9ka='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Наши приложения
    'articles.apps.ArticlesConfig',
    'comparisons.apps.ComparisonsConfig',
    'users.apps.UsersConfig',
    'profiles.apps.ProfilesConfig',
    'devices.apps.DevicesConfig',
    
    'django_browser_reload',
    'django_ckeditor_5',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_browser_reload.middleware.BrowserReloadMiddleware',
]

ROOT_URLCONF = 'tech_help.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tech_help.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 6,
        }
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Настройки медиафайлов
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
AUTH_USER_MODEL = 'users.User'

# Настройки CKEditor
CKEDITOR_UPLOAD_PATH = "uploads/"  # Путь для загрузки файлов (если используете ckeditor_uploader)
CKEDITOR_IMAGE_BACKEND = "pillow"  # Для обработки изображений
CKEDITOR_JQUERY_URL = '//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js'  # Подключение jQuery

CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', 'undo', 'redo'],
        'plugins': ['EssentialsPlugin', 'ParagraphPlugin', 'HeadingPlugin', 'ListPlugin', 'BoldPlugin', 'ItalicPlugin', 'LinkPlugin', 'BlockQuotePlugin', 'ImageUploadPlugin'],
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft', 'imageStyle:full', 'imageStyle:alignRight'],
            'styles': [
                'full',
                'alignLeft',
                'alignRight',
            ],
        },
    }
}
 
--- END tech_help/settings.py ---

--- tech_help/urls.py ---
 """
URL configuration for tech_help project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from django.views.generic import TemplateView
from django_ckeditor_5 import views as ckeditor_5_views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('articles/', include('articles.urls')),
    path('comparisons/', include("comparisons.urls")),
    path('devices/', include("devices.urls")),
    path('accounts/', include('accounts.urls')),
    path("__reload__/", include("django_browser_reload.urls")),
    path('', TemplateView.as_view(template_name='home.html'), name='home'),
    path('ckeditor5/', include('django_ckeditor_5.urls')),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

 
--- END tech_help/urls.py ---

--- tech_help/__init__.py ---
  
--- END tech_help/__init__.py ---

--- tech_help/wsgi.py ---
 """
WSGI config for tech_help project.

It exposes the WSGI callable as a module-level variable named ``application``.
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tech_help.settings')

application = get_wsgi_application()  
--- END tech_help/wsgi.py ---

--- tech_help/asgi.py ---
 """
ASGI config for tech_help project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tech_help.settings')

application = get_asgi_application()
 
--- END tech_help/asgi.py ---

--- templates/home.html ---
 {% extends 'base.html' %}

{% block title %}Tech Help - Главная{% endblock %}


{% block content %}
<div class="text-center fade-in">
    <h1 class="text-4xl font-bold text-blue-400 mb-4">
        Добро пожаловать в Tech Help
    </h1>
    <p class="text-xl text-gray-400 mb-8">
        Ваш путеводитель в мире современных технологий
    </p>
    
    <!-- Карточки с возможностями -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mt-12">
        <div class="bg-slate-800 p-6 rounded-lg border border-slate-700 card-hover">
            <h2 class="text-xl font-semibold text-blue-400 mb-4">Статьи</h2>
            <p class="text-gray-400 mb-4">
                Читайте подробные обзоры и аналитику последних технологических новинок
            </p>
            <a href="{% url 'articles:article_list' %}" class="text-blue-400 hover:text-blue-300 transition-colors duration-200 mt-4 inline-block">
                Читать статьи
            </a>
        </div>
        
        <div class="bg-slate-800 p-6 rounded-lg border border-slate-700 card-hover">
            <h2 class="text-xl font-semibold text-blue-400 mb-4">Устройства</h2>
            <p class="text-gray-400 mb-4">
                Изучайте характеристики и отзывы о современных устройствах
            </p>
            <a href="{% url 'devices:device_list' %}" class="text-blue-400 hover:text-blue-300 transition-colors duration-200 mt-4 inline-block">
                Смотреть устройства
            </a>
        </div>
        
        <div class="bg-slate-800 p-6 rounded-lg border border-slate-700 card-hover">
            <h2 class="text-xl font-semibold text-blue-400 mb-4">Сравнения</h2>
            <p class="text-gray-400 mb-4">
                Сравнивайте характеристики устройств и делайте осознанный выбор
            </p>
            <a href="{% url 'comparisons:comparison_list' %}" class="text-blue-400 hover:text-blue-300 transition-colors duration-200 mt-4 inline-block">
                Сравнить устройства
            </a>
        </div>
    </div>

    <!-- Новые разделы -->
    <div class="mt-16">
        <h2 class="text-3xl font-bold text-blue-400 mb-8">Почему выбирают нас?</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            <div class="bg-slate-800 p-6 rounded-lg border border-slate-700 card-hover">
                <i class="fas fa-chart-line text-4xl text-blue-400 mb-4"></i>
                <h3 class="text-xl font-semibold text-blue-400 mb-2">Актуальная информация</h3>
                <p class="text-gray-400">Всегда свежие данные и последние новости</p>
            </div>
            <div class="bg-slate-800 p-6 rounded-lg border border-slate-700 card-hover">
                <i class="fas fa-users text-4xl text-blue-400 mb-4"></i>
                <h3 class="text-xl font-semibold text-blue-400 mb-2">Экспертное сообщество</h3>
                <p class="text-gray-400">Общайтесь с профессионалами и энтузиастами</p>
            </div>
            <div class="bg-slate-800 p-6 rounded-lg border border-slate-700 card-hover">
                <i class="fas fa-tools text-4xl text-blue-400 mb-4"></i>
                <h3 class="text-xl font-semibold text-blue-400 mb-2">Удобные инструменты</h3>
                <p class="text-gray-400">Сравнение, анализ и подбор устройств</p>
            </div>
            <div class="bg-slate-800 p-6 rounded-lg border border-slate-700 card-hover">
                <i class="fas fa-mobile-alt text-4xl text-blue-400 mb-4"></i>
                <h3 class="text-xl font-semibold text-blue-400 mb-2">Широкий выбор</h3>
                <p class="text-gray-400">Тысячи устройств в одной базе данных</p>
            </div>
        </div>
    </div>

    <!-- Призыв к действию -->
    {% if not user.is_authenticated %}
        <div class="mt-16 bg-slate-800 p-8 rounded-lg border border-slate-700 card-hover">
            <h2 class="text-3xl font-bold text-blue-400 mb-4">Начните прямо сейчас!</h2>
            <p class="text-xl text-gray-400 mb-8">
                Присоединяйтесь к нашему сообществу и откройте для себя мир технологий
            </p>
            <div class="flex justify-center space-x-4">
                <a href="{% url 'accounts:register' %}" class="btn-primary">
                    Зарегистрироваться
                </a>
                <a href="{% url 'accounts:login' %}" class="btn-secondary">
                    Войти
                </a>
            </div>
        </div>
    {% endif %}


</div>
{% endblock %}  
--- END templates/home.html ---

--- templates/base.html ---
 {% load static %}
<!DOCTYPE html>
<html lang="ru" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Tech Help{% endblock %}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.css" />
<script src="https://unpkg.com/imagesloaded@5/imagesloaded.pkgd.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.js"></script>
    <link href="{% static 'css/base.css' %}" rel="stylesheet">
    <link href="{% static 'css/animations.css' %}" rel="stylesheet">
    {% block head %}{% endblock %}
    
</head>
<body class="flex flex-col min-h-screen bg-slate-900">
    <nav class="bg-slate-800 border-b border-slate-700">
        <div class="px-8 mx-auto px-4">
            <div class="flex justify-between">
                <!-- Логотип слева -->  
                <a href="/" class="highlight flex items-center text-xl font-bold text-blue-400">
                    Tech Help
                </a>

                <!-- Центральное меню -->
                <div class="flex-1 flex justify-center items-center">
                    <nav class="flex space-x-16">
                        <a href="{% url 'articles:article_list' %}" class="nav-link p-4">
                            <i class="fas fa-newspaper mr-2"></i>Статьи
                        </a>
                        <a href="{% url 'devices:device_list' %}" class="nav-link p-4">
                            <i class="fas fa-mobile-alt mr-2"></i>Устройства
                        </a>
                        <a href="{% url 'comparisons:comparison_list' %}" class="nav-link p-4">
                            <i class="fas fa-balance-scale mr-2"></i>Сравнения
                        </a>
                    </nav>
                </div>

                <!-- Правая часть -->
                <div class="flex items-center space-x-4">
                    {% if user.is_authenticated %}
                        {% if user.is_staff %}
                        <a href="{% url 'admin:index' %}" class="nav-link">
                            <i class="fas fa-cog mr-2"></i>Админ-панель
                        </a>
                        {% endif %}
                        <a href="{% url 'accounts:profile' %}" class="nav-link">
                            <i class="fas fa-user mr-2"></i>{{ user.username }}
                        </a>
                        <a href="{% url 'accounts:logout' %}" class="nav-link">
                            <i class="fas fa-sign-out-alt mr-2"></i>Выйти
                        </a>
                    {% else %}
                        <a href="{% url 'accounts:login' %}" class="nav-link">
                            <i class="fas fa-sign-in-alt mr-2"></i>Войти
                        </a>
                        <a href="{% url 'accounts:register' %}" class="btn-primary">
                            Регистрация
                        </a>
                    {% endif %}
                </div>
            </div>
        </div>
    </nav>

    <!-- Основной контент -->
    <main class="flex-grow container mx-auto px-4 py-8">
        {% if messages %}
            <!-- ... messages остаются без изменений ... -->
        {% endif %}
        {% block content %}{% endblock %}
    </main>

    <!-- Футер -->
    <footer class="bg-slate-800 border-t border-slate-700 py-8 mt-auto">
        <div class="max-w-7xl mx-auto px-4">
            <div class="text-center text-gray-400">
                © {% now "Y" %} Tech Help. Все права защищены.
            </div>
        </div>
    </footer>
</body>
</html>  
--- END templates/base.html ---

--- templates/wsgi.py ---
 """
WSGI config for tech_help project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tech_help.settings')

application = get_wsgi_application()
 
--- END templates/wsgi.py ---

--- templates/comparisons/comparison_create.html ---
 {% extends 'base.html' %}

{% block title %}Создать сравнение - Tech Help{% endblock %}

{% block content %}
<div class="container mx-auto px-4">
    <h1 class="text-3xl font-bold text-white mb-8">Создать сравнение</h1>
    
    <form method="post" class="card p-6">
        {% csrf_token %}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            {% for device in devices %}
            <div class="relative">
                <input type="checkbox" 
                       name="devices" 
                       value="{{ device.id }}"
                       id="device_{{ device.id }}"
                       class="hidden peer">
                <label for="device_{{ device.id }}" 
                       class="block card peer-checked:border-blue-500 peer-checked:ring-2 peer-checked:ring-blue-500 cursor-pointer">
                       {% if device.main_image %}
                       <img src="{{ device.main_image.url }}" 
                            alt="{{ device.name }}"
                            class="w-full h-48 object-cover">
                       {% else %}
                       <div class="w-full h-full bg-slate-800 flex items-center justify-center">
                           <i class="fas fa-camera text-3xl text-slate-600"></i>
                       </div>
                       {% endif %}
                    <div class="p-4">
                        <h3 class="text-lg font-semibold text-white mb-2">{{ device.name }}</h3>
                        <p class="text-gray-400">{{ device.manufacturer }}</p>
                    </div>
                </label>
            </div>
            {% endfor %}
        </div>
        
        <div class="flex justify-end">
            <button type="submit" class="btn-primary">
                Сравнить выбранные устройства
            </button>
        </div>
    </form>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form');
    form.addEventListener('submit', function(e) {
        const checked = document.querySelectorAll('input[name="devices"]:checked');
        if (checked.length < 2) {
            e.preventDefault();
            alert('Выберите минимум 2 устройства для сравнения');
        }
    });
});
</script>
{% endblock %} 
 
--- END templates/comparisons/comparison_create.html ---

--- templates/comparisons/comparison_detail.html ---
 {% extends 'base.html' %}
{% load static %}
{% load custom_filters %}

{% block title %}{{ comparison.title }} - Tech Help{% endblock %}

{% block content %}
<div class="container mx-auto px-4">
    <div class="absolute left-1/2 top-16 bottom-0 w-px bg-slate-700"></div>

    <!-- Две карусели для каждого устройства -->
    <div class="grid grid-cols-2 gap-8">
        {% for device in devices %}
        <div>
            <!-- Название устройства -->
            <div class="text-center mb-4">
                <p class="text-xl font-semibold text-white">{{ device.name }}</p>
            </div>
            
            <!-- Карусель -->
            <div class="swiper-container device-carousel-{{ forloop.counter }} rounded-lg overflow-hidden">
                <div class="swiper-wrapper">
                    <!-- Главное фото -->
                    {% if device.main_image %}
                    <div class="swiper-slide">
                        <div class="w-full h-96 flex items-center justify-center bg-slate-800">
                            <img src="{{ device.main_image.url }}" 
                                 alt="{{ device.name }}" 
                                 class="max-w-full max-h-full object-contain">
                        </div>
                    </div>
                    {% endif %}
                    
                    <!-- Дополнительные фото -->
                    {% for image in device.images.all %}
                    <div class="swiper-slide">
                        <div class="w-full h-96 flex items-center justify-center bg-slate-800">
                            <img src="{{ image.image.url }}" 
                                 alt="{{ device.name }}" 
                                 class="max-w-full max-h-full object-contain">
                        </div>
                    </div>
                    {% endfor %}
                </div>
                
            </div>
        </div>
        {% endfor %}
    </div>

    
    <!-- Сравнение характеристик -->
    <div class="card p-6">
        <h2 class="text-2xl font-bold text-white mb-6">Сравнение характеристик</h2>
        <div class="space-y-8">
            {% for category, specs in specifications %}
            <div class="border border-slate-700 rounded-lg">
                <div class="bg-slate-800 p-4 border-b border-slate-700">
                    <h3 class="text-xl font-semibold text-blue-400">{{ category }}</h3>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 divide-x divide-slate-700">
                    {% for device in devices %}
                    <div class="p-4">
                        <div class="space-y-4">
                            {% for spec_name, spec_data in specs.items %}
                            <div class="flex justify-between items-center border-b border-slate-700 pb-2">
                                <span class="text-gray-400">{{ spec_name }}</span>
                                <span class="font-semibold text-white">
                                    {% if spec_data.values|get_item:device.id %}
                                        {{ spec_data.values|get_item:device.id }}
                                        {% if spec_data.unit %}<span class="text-gray-400 ml-1">{{ spec_data.unit }}</span>{% endif %}
                                    {% else %}
                                        <span class="text-gray-500">—</span>
                                    {% endif %}
                                </span>
                            </div>
                            {% endfor %}
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Инициализация каруселей для каждого устройства
        {% for device in devices %}
        new Swiper('.device-carousel-{{ forloop.counter }}', {
            slidesPerView: 1,
            spaceBetween: 30,
            loop: true,
            autoplay: {
                delay: 5000,
                disableOnInteraction: false,
            },
            observer: true,
            observeParents: true,
        });
        {% endfor %}
    });
</script>
{% endblock %}  
--- END templates/comparisons/comparison_detail.html ---

--- templates/comparisons/comparison_list.html ---
 {% extends 'base.html' %}

{% block title %}Tech Help - Сравнения{% endblock %}

{% block content %}
<div class="container mx-auto px-4">
    <!-- Заголовок и кнопка создания -->
    <div class="flex justify-between items-center mb-8">
        <h1 class="text-3xl font-bold text-white">Сравнения</h1>
        {% if user.is_authenticated %}
        <a href="{% url 'comparisons:comparison_create' %}" class="btn-primary">
            <i class="fas fa-plus mr-2"></i>Создать сравнение
        </a>
        {% endif %}
    </div>

    <!-- Список сравнений -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
    {% for comparison in comparisons %}
    <a href="{% url 'comparisons:comparison_detail' comparison.slug %}"
       class="block group">
        <div class="card bg-slate-700/50 hover:bg-slate-700 transition-all duration-200 rounded-lg overflow-hidden hover:scale-105 flex">
            <!-- Левая часть карточки -->
            <div class="w-1/2 p-4 flex flex-col justify-between">
                <div>
                    <div class="flex flex-wrap gap-2 mb-2 justify-center">
                        <span class="badge text-lg">{{ comparison.devices.first.name }}</span>
                    </div>
                    {% if comparison.devices.first.main_image %}
                        <img src="{{ comparison.devices.first.main_image.url }}"
                             alt="{{ comparison.title }}"
                             class="w-full h-auto object-cover rounded-md">
                    {% else %}
                         <div class="w-full h-full bg-slate-800 flex items-center justify-center rounded-md mb-2">
                            <i class="fas fa-camera text-3xl text-slate-600"></i>
                        </div>
                    {% endif %}
                </div>

            </div>

            <!-- Вертикальная линия -->
            <div class="border-r border-slate-600"></div>

            <!-- Правая часть карточки -->
            <div class="w-1/2 p-4 flex flex-col justify-between">
                <div>
                    <div class="flex flex-wrap gap-2 mb-2 justify-center">
                        <span class="badge text-lg">{{ comparison.devices.last.name }}</span>
                    </div>
                     {% if comparison.devices.last.main_image %}
                        <img src="{{ comparison.devices.last.main_image.url }}"
                             alt="{{ comparison.title }}"
                             class="w-full h-auto object-cover rounded-md">
                    {% else %}
                         <div class="w-full h-24 bg-slate-800 flex items-center justify-center rounded-md">
                            <i class="fas fa-camera text-3xl text-slate-600"></i>
                        </div>
                    {% endif %}

                </div>

                <div>
                     <!-- Кнопка "Подробнее" удалена, так как вся карточка - ссылка -->
                </div>
            </div>
        </div>
    </a>
    {% empty %}
    <div class="col-span-full text-center py-8">
        <p class="text-gray-400">Сравнений пока нет</p>
    </div>
    {% endfor %}
</div>

</div>
{% endblock %}  
--- END templates/comparisons/comparison_list.html ---

--- templates/devices/device_detail.html ---
 {% extends 'base.html' %}
{% load static %}


{% block title %}Tech Help - {{ device.name }} {% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <!-- Карусель с фотографиями -->
        <div class="swiper device-carousel mb-8 rounded-lg overflow-hidden">
            <div class="swiper-wrapper">
                <!-- Главное фото -->
                {% if device.main_image %}
                <div class="swiper-slide">
                    <div class="w-full h-96 flex items-center justify-center bg-slate-800">
                        <img src="{{ device.main_image.url }}" 
                             alt="{{ device.name }}" 
                             class="max-w-full max-h-full object-contain">
                    </div>
                </div>
                {% endif %}
                
                <!-- Дополнительные фото -->
                {% for image in device.images.all %}
                <div class="swiper-slide">
                    <div class="w-full h-96 flex items-center justify-center bg-slate-800">
                        <img src="{{ image.image.url }}" 
                             alt="{{ device.name }}" 
                             class="max-w-full max-h-full object-contain">
                    </div>
                </div>
                {% endfor %}
            </div>
            
            <!-- Навигация -->
            <div class="swiper-button-next"></div>
            <div class="swiper-button-prev"></div>
            <div class="swiper-pagination"></div>
        </div>

        <!-- Заголовок и основная информация -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold mb-4">{{ device.name }}</h1>
            {% if device.description %}
            <p class="text-gray-300 mb-4">{{ device.description }}</p>
            {% endif %}
            
            <div class="flex items-center gap-4">
                {% if device.category %}
                <span class="px-3 py-1 bg-blue-500 text-sm rounded-full">
                    {{ device.category.name }}
                </span>
                {% endif %}
                
                {% if user.is_authenticated %}
                <div class="flex gap-2">
                    <a href="{% url 'devices:device_edit' device.slug %}" 
                       class="btn-secondary btn-sm">
                        Редактировать
                    </a>
                    <a href="{% url 'devices:device_delete' device.slug %}" 
                       class="btn-danger btn-sm">
                        Удалить
                    </a>
                </div>
                {% endif %}
            </div>
        </div>

        <!-- Характеристики по категориям -->
        <div class="space-y-6">
            {% for category, specs in specifications.items %}
            <div class="bg-slate-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">{{ category.name }}</h2>
                
                <div class="divide-y divide-slate-700">
                    {% for spec in specs %}
                    <div class="py-3 flex justify-between">
                        <div class="flex items-center gap-2">
                            <span class="text-gray-300">{{ spec.field.name }}</span>
                            {% if spec.field.description %}
                            <button type="button" 
                                    class="text-gray-400 hover:text-gray-300"
                                    title="{{ spec.field.description }}">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </button>
                            {% endif %}
                        </div>
                        <div class="text-right">
                            <span class="font-medium">
                                {{ spec.value }}
                                {% if spec.field.unit %}
                                <span class="text-gray-400">{{ spec.field.unit }}</span>
                                {% endif %}
                            </span>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</div>

<script>
    const swiper = new Swiper('.device-carousel', {
        slidesPerView: 1,
        spaceBetween: 30,
        loop: true,
        pagination: {
            el: '.swiper-pagination',
            clickable: true,
        },
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
        autoplay: {
            delay: 5000,
            disableOnInteraction: false,
        },
    });
</script>
{% endblock %}  
--- END templates/devices/device_detail.html ---

--- templates/devices/device_confirm_delete.html ---
 {% extends 'base.html' %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-lg mx-auto">
        <div class="bg-slate-800 rounded-lg p-6 border border-slate-700">
            <h1 class="text-2xl font-bold mb-4">Удаление устройства</h1>
            
            <p class="text-gray-300 mb-6">
                Вы уверены, что хотите удалить устройство "{{ device.name }}"?
                Это действие нельзя будет отменить.
            </p>
            
            <form method="post" class="flex gap-4">
                {% csrf_token %}
                <button type="submit" class="btn-danger">
                    Удалить
                </button>
                <a href="{% url 'devices:device_detail' device.slug %}" 
                   class="btn-secondary">
                    Отмена
                </a>
            </form>
        </div>
    </div>
</div>
{% endblock %}  
--- END templates/devices/device_confirm_delete.html ---

--- templates/devices/device_form.html ---
 {% extends 'base.html' %}
{% load static %}
{% load device_tags %}

{% block title %}Tech Help - Устройство{% endblock %}

{% block head %}
<script>
// Преобразуем спецификации из Python в JavaScript
const existingSpecs = {{ specifications|safe }};
</script>
<script src="{% static 'js/device-form.js' %}"></script>
{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <h1 class="text-2xl font-bold mb-6">{{ title }}</h1>

        <form method="post" enctype="multipart/form-data" class="space-y-6">
            {% csrf_token %}
            
            <!-- Основная информация об устройстве -->
            <div class="bg-slate-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Основная информация</h2>
                
                {% for field in form %}
                <div class="mb-4">
                    <label for="{{ field.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                        {{ field.label }}
                    </label>
                    {{ field }}
                    {% if field.help_text %}
                    <p class="mt-1 text-sm text-gray-400">{{ field.help_text }}</p>
                    {% endif %}
                    {% if field.errors %}
                    <div class="mt-1 text-red-500 text-sm">
                        {{ field.errors }}
                    </div>
                    {% endif %}
                </div>
                {% endfor %}
            </div>

            <!-- Главное изображение -->
            <div class="bg-slate-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Главное изображение</h2>
                <input type="file" 
                       name="main_image" 
                       accept="image/*"
                       class="form-input w-full">
                {% if device and device.main_image %}
                <div class="mt-4">
                    <img src="{{ device.main_image.url }}" 
                         alt="Текущее главное изображение"
                         class="w-full max-w-xs rounded-lg">
                </div>
                {% endif %}
            </div>

            <!-- Дополнительные изображения -->
            <div class="bg-slate-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Дополнительные изображения</h2>
                <input type="file" 
                       name="images" 
                       multiple 
                       accept="image/*"
                       class="form-input w-full">
            </div>

            <!-- Характеристики устройства -->
            <div class="space-y-6">
                {{ formset.management_form }}
                {% for category, forms in formset.categories.items %}
                <div class="bg-slate-800 rounded-lg p-6">
                    <h2 class="text-xl font-semibold mb-4">{{ category.name }}</h2>
                    
                    <div class="space-y-4">
                        {% for form in forms %}
                        <div class="flex items-start gap-4">
                            <div class="flex-grow">
                                {{ form.field }}
                                <label class="block text-sm font-medium text-gray-300 mb-2">
                                    {{ form.instance.field.name }}
                                    {% if form.instance.field.unit %}
                                    <span class="text-gray-400">({{ form.instance.field.unit }})</span>
                                    {% endif %}
                                </label>
                                <div class="relative">  <!-- Относительное позиционирование для placeholder -->
                                    {{ form.value|add_class:'bg-gray-100 border-gray-300 focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 text-sm text-gray-900 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 rounded-lg border-none' }}
                                </div>
                                {% if form.instance.field.description %}
                                <p class="mt-1 text-sm text-gray-400">{{ form.instance.field.description }}</p>
                                {% endif %}
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                </div>
                {% endfor %}
            </div>

            <!-- Кнопки действий -->
            <div class="flex justify-end gap-4">
                <a href="{% url 'devices:device_list' %}" 
                   class="btn-secondary">
                    Отмена
                </a>
                <button type="submit" class="btn-primary">
                    {% if device %}Сохранить изменения{% else %}Создать устройство{% endif %}
                </button>
            </div>
        </form>
    </div>
</div>
{% endblock %}  
--- END templates/devices/device_form.html ---

--- templates/devices/specification_form.html ---
 {% extends 'base.html' %}

{% block title %}Tech Help - Характеристика{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <h1 class="text-2xl font-bold mb-6">{{ title }}</h1>

        <form method="post" class="space-y-6">
            {% csrf_token %}
            
            <!-- Основная информация о характеристике -->
            <div class="bg-slate-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Основная информация</h2>
                
                {% for field in form %}
                <div class="mb-4">
                    <label for="{{ field.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                        {{ field.label }}
                    </label>
                    {{ field }}
                    {% if field.help_text %}
                    <p class="mt-1 text-sm text-gray-400">{{ field.help_text }}</p>
                    {% endif %}
                    {% if field.errors %}
                    <div class="mt-1 text-red-500 text-sm">
                        {{ field.errors }}
                    </div>
                    {% endif %}
                </div>
                {% endfor %}
            </div>

            <!-- Кнопки действий -->
            <div class="flex justify-end gap-4">
                <a href="{% url 'devices:device_list' %}" 
                   class="btn-secondary">
                    Отмена
                </a>
                <button type="submit" class="btn-primary">
                    {% if specification %}Сохранить изменения{% else %}Создать характеристику{% endif %}
                </button>
            </div>
        </form>
    </div>
</div>
{% endblock %}  
--- END templates/devices/specification_form.html ---

--- templates/devices/device_list.html ---
 {% extends 'base.html' %}

{% block title %}Tech Help - Устройства{% endblock %}

{% block content %}
<div class="container mx-auto px-0 py-8">
    <!-- Заголовок и кнопки управления -->
    <div class="flex justify-between mb-8">
        <h1 class="text-3xl font-bold text-white">Устройства</h1>
        {% if user.is_staff %}
        <div class="flex gap-4">
            <a href="{% url 'devices:device_create' %}" class="p-4 btn-primary bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">
                <i class="fas fa-plus mr-2"></i>Добавить устройство
            </a>
            <a href="{% url 'devices:specification_create' %}" class="p-4 btn-secondary bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">
                <i class="fas fa-cog mr-2"></i>Добавить характеристику
            </a>
        </div>
        {% endif %}
    </div>

    <!-- Заголовок и поиск -->
    <div class="flex flex-col md:flex-row justify-between items-center mb-8">
        <div class="w-full md:w-auto">
            <form method="get" class="flex gap-4">
                <input type="text" 
                       name="search" 
                       value="{{ search_query|default:'' }}"
                       placeholder="Поиск устройств..."
                       class="form-input flex-grow">
                <button type="submit" class="btn-primary">
                    <i class="fas fa-search"></i>
                </button>
            </form>
        </div>
    </div>

    <!-- Категории -->
    <div class="flex flex-wrap gap-2 mb-8">
        <a href="{% url 'devices:device_list' %}" 
           class="badge {% if not current_category %}bg-blue-600{% else %}bg-slate-700{% endif %} hover:bg-blue-700">
            Все
        </a>
        {% for category in categories %}
        <a href="?category={{ category.slug }}" 
           class="badge {% if current_category == category.slug %}bg-blue-600{% else %}bg-slate-700{% endif %} hover:bg-blue-700">
            {{ category.name }}
        </a>
        {% endfor %}
    </div>

    <!-- Сетка устройств -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {% for device in devices %}
        <a href="{% url 'devices:device_detail' device.slug %}" 
           class="block group">
            <div class="card bg-slate-700/50 hover:bg-slate-700 transition-all duration-200 rounded-lg overflow-hidden hover:scale-105 flex flex-col">
                <div class="aspect-video w-full overflow-hidden">
                    {% if device.main_image %}
                    <img src="{{ device.main_image.url }}" 
                         alt="{{ device.name }}"
                         class="w-full h-full object-cover">
                    {% else %}
                        <div class="w-full h-full bg-slate-800 flex items-center justify-center rounded-md mb-2">
                            <i class="fas fa-camera text-3xl text-slate-600"></i>
                        </div>
                    {% endif %}
                </div>
                <div class="p-4 flex-grow">
                    <div class="flex items-center gap-2 mb-2">
                        {% if device.category %}
                        <span class="text-blue-400">{{ device.category.name }}</span>
                        {% endif %}
                        <span class="text-gray-400">{{ device.created_at|date:"d.m.Y" }}</span>
                    </div>
                    <h2 class="text-xl font-semibold mb-2 text-white group-hover:text-blue-400 transition-colors">
                        {{ device.name }}
                    </h2>
                    <div class="mt-4 text-gray-300 line-clamp-2">
                        {{ device.description|striptags|truncatewords:15 }}
                    </div>
                </div>
            </div>
        </a>
        {% empty %}
        <div class="col-span-full text-center py-8">
            <p class="text-gray-400">Устройства не найдены</p>
        </div>
        {% endfor %}
    </div>
</div>
{% endblock %}  
--- END templates/devices/device_list.html ---

--- templates/accounts/register.html ---
 {% extends 'base.html' %}

{% block title %}Регистрация - Tech Help{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-md mx-auto">
        <h1 class="text-3xl font-bold text-white mb-8">Регистрация</h1>
        
        <form method="post" class="space-y-6 bg-slate-800 p-6 rounded-lg border border-slate-700">
            {% csrf_token %}
            
            {% if form.non_field_errors %}
            <div class="bg-red-500 text-white p-4 rounded-lg">
                {{ form.non_field_errors }}
            </div>
            {% endif %}
            
            <div>
                <label for="{{ form.username.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Имя пользователя
                </label>
                {{ form.username }}
                {% if form.username.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.username.errors.0 }}</p>
                {% endif %}
            </div>
            
            <div>
                <label for="{{ form.email.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Email
                </label>
                {{ form.email }}
                {% if form.email.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.email.errors.0 }}</p>
                {% endif %}
            </div>
            
            <div>
                <label for="{{ form.password1.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Пароль
                </label>
                {{ form.password1 }}
                {% if form.password1.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.password1.errors.0 }}</p>
                {% endif %}
            </div>
            
            <div>
                <label for="{{ form.password2.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Подтверждение пароля
                </label>
                {{ form.password2 }}
                {% if form.password2.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.password2.errors.0 }}</p>
                {% endif %}
            </div>
            
            <button type="submit" class="w-full btn-primary">
                Зарегистрироваться
            </button>
        </form>
        
        <p class="mt-4 text-center text-gray-400">
            Уже есть аккаунт? <a href="{% url 'accounts:login' %}" class="text-blue-400 hover:text-blue-300">Войдите</a>
        </p>
    </div>
</div>
{% endblock %}  
--- END templates/accounts/register.html ---

--- templates/accounts/login.html ---
 {% extends 'base.html' %}

{% block title %}Вход - Tech Help{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-md mx-auto">
        <h1 class="text-3xl font-bold text-white mb-8">Вход</h1>
        
        <form method="post" class="space-y-6 bg-slate-800 p-6 rounded-lg border border-slate-700">
            {% csrf_token %}
            
            {% if form.non_field_errors %}
            <div class="bg-red-500 text-white p-4 rounded-lg">
                {{ form.non_field_errors }}
            </div>
            {% endif %}
            
            <div>
                <label for="{{ form.username.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Имя пользователя
                </label>
                {{ form.username }}
            </div>
            
            <div>
                <label for="{{ form.password.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Пароль
                </label>
                {{ form.password }}
            </div>
            
            <button type="submit" class="w-full btn-primary">
                Войти
            </button>
        </form>
        
        <p class="mt-4 text-center text-gray-400">
            Нет аккаунта? <a href="{% url 'accounts:register' %}" class="text-blue-400 hover:text-blue-300">Зарегистрируйтесь</a>
        </p>
    </div>
</div>
{% endblock %}  
--- END templates/accounts/login.html ---

--- templates/accounts/profile.html ---
 {% extends 'base.html' %}

{% block title %}Профиль - {{ user.username }}{% endblock %}

{% block content %}
<div class="container mx-auto px-4">
    <div class="max-w-2xl mx-auto">
        <h1 class="text-3xl font-bold text-white mb-8">Профиль пользователя</h1>
        
        <div class="card p-6">
            <div class="flex items-center gap-4 mb-6">
                <i class="fas fa-user-circle text-4xl text-blue-400"></i>
                <div>
                    <h2 class="text-xl font-semibold text-white">{{ user.username }}</h2>
                    <p class="text-gray-400">{{ user.email }}</p>
                </div>
            </div>
            
            <div class="border-t border-slate-700 pt-6">
                <h3 class="text-lg font-semibold text-white mb-4">Активность</h3>
                <div class="grid grid-cols-2 gap-4">
                    <div class="text-center p-4 bg-slate-700 rounded-lg">
                        <span class="block text-2xl font-bold text-blue-400">
                            {{ user.article_set.count }}
                        </span>
                        <span class="text-gray-400">Статей</span>
                    </div>
                    <div class="text-center p-4 bg-slate-700 rounded-lg">
                        <span class="block text-2xl font-bold text-blue-400">
                            {{ user.comparison_set.count }}
                        </span>
                        <span class="text-gray-400">Сравнений</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}  
--- END templates/accounts/profile.html ---

--- templates/articles/article_confirm_delete.html ---
 {% extends 'base.html' %}



{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-lg mx-auto">
        <div class="bg-slate-800 rounded-lg p-6 border border-slate-700">
            <h1 class="text-2xl font-bold mb-4">Удаление статьи</h1>
            
            <p class="text-gray-300 mb-6">
                Вы уверены, что хотите удалить статью "{{ article.title }}"?
                Это действие нельзя будет отменить.
            </p>
            
            <form method="post" class="flex gap-4">
                {% csrf_token %}
                <button type="submit" class="btn-danger">
                    Удалить
                </button>
                <a href="{% url 'articles:article_detail' article.slug %}" 
                   class="btn-secondary">
                    Отмена
                </a>
            </form>
        </div>
    </div>
</div>
{% endblock %}  
--- END templates/articles/article_confirm_delete.html ---

--- templates/articles/article_list.html ---
 {% extends 'base.html' %}

{% block title %}Tech Help - Статьи{% endblock %}

{% block content %}
<!-- Добавим кнопку создания статьи в верхней части страницы -->
<div class="flex justify-between items-center mb-8">
    <h1 class="text-3xl font-bold text-white">Статьи</h1>
    {% if user.is_authenticated %}
    <a href="{% url 'articles:article_create' %}" class="p-4 btn-primary bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">
        <i class="fas fa-plus mr-2"></i>Создать статью
    </a>
    {% endif %}
</div>

<div class="container mx-auto px-4 py-8">
    <div class="grid grid-cols-12 gap-6">
        <!-- Боковая панель с фильтрами -->
<div class="col-span-12 md:col-span-3">
    <div class="p-6 rounded-lg border border-slate-700 sticky top-4">
        <h2 class="text-xl font-semibold text-blue-400 mb-4">Категории</h2>

        <!-- Контейнер для кнопок -->
        <div class="flex flex-wrap gap-2 ">
            <a href="{% url 'articles:article_list' %}"
               class="inline-block rounded-full px-4 py-2 text-sm font-medium bg-blue-500/20 text-blue-300 hover:bg-blue-500/40 hover:text-white transition-colors duration-200 flex items-center justify-center text-center break-words {% if not request.GET.category %}!bg-blue-600/70 !text-white{% endif %}"
               style="min-width: 0;"> <!-- Добавлено min-width -->
                Все категории
            </a>
            {% for category in categories %}
            <a href="?category={{ category.slug }}"
               class="inline-block rounded-full px-4 max-w-xs-30 py-2 text-sm font-medium bg-blue-500/20 text-blue-300 hover:bg-blue-500/40 hover:text-white transition-colors duration-200 flex items-center justify-center text-center break-words {% if request.GET.category == category.slug %}!bg-blue-600/70 !text-white{% endif %}"
               style="min-width: 0;"> <!-- Добавлено min-width -->
                {{ category.name }}
            </a>
            {% endfor %}
        </div>

    </div>
</div>


        <!-- Контент со статьями -->
        <div class="col-span-12 md:col-span-9">
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                {% for article in articles %}
                {% if article.slug %}
                <a href="{% url 'articles:article_detail' slug=article.slug %}"
                   class="block group">
                    <div class="card bg-slate-700/50 hover:bg-slate-700 transition-all duration-200 rounded-lg overflow-hidden hover:scale-105 flex flex-col">
                        <div class="aspect-video w-full overflow-hidden">
                            {% if article.image %}
                            <img src="{{ article.image.url }}"
                                 alt="{{ article.title }}"
                                 class="w-full h-full object-cover">
                            {% else %}
                            <img src="../../media/default-images/{{ article.category.name }}.png" 
                                alt="{{ article.title }}" 
                                class="w-full h-full object-cover">
                            {% endif %}
                        </div>
                        <div class="p-4 flex-grow">
                            <div class="flex items-center gap-2 mb-2">
                                {% if article.category %}
                                <span class="text-blue-400">{{ article.category.name }}</span>
                                {% endif %}
                                <span class="text-gray-400">{{ article.created_at|date:"d.m.Y" }}</span>
                            </div>
                            <h2 class="text-xl font-semibold mb-2 text-white group-hover:text-blue-400 transition-colors">
                                {{ article.title|striptags|truncatewords:10 }}
                            </h2>
                            <div class="mt-4 text-gray-300 line-clamp-2">
                                {{ article.content|striptags|truncatewords:10 }}
                            </div>
                        </div>
                    </div>
                </a>
                {% endif %}
                {% empty %}
                <div class="col-span-full text-center py-8">
                    <p class="text-gray-400">Статьи не найдены</p>
                </div>
                {% endfor %}
            </div>
        </div>
    </div>
</div>

<div class="col-span-12 md:col-span-9">
    <!-- Пагинация -->
    {% if articles.has_other_pages %}
    <div class="flex justify-center mt-8">
        <div class="flex space-x-2">
            {% if articles.has_previous %}
            <a href="?page={{ articles.previous_page_number }}" 
               class="px-4 py-2 bg-slate-700 rounded hover:bg-slate-600">
                Назад
            </a>
            {% endif %}
            
            {% for num in articles.paginator.page_range %}
                {% if articles.number == num %}
                <span class="px-4 py-2 bg-blue-600 rounded">{{ num }}</span>
                {% else %}
                <a href="?page={{ num }}" 
                   class="px-4 py-2 bg-slate-700 rounded hover:bg-slate-600">
                    {{ num }}
                </a>
                {% endif %}
            {% endfor %}
            
            {% if articles.has_next %}
            <a href="?page={{ articles.next_page_number }}" 
               class="px-4 py-2 bg-slate-700 rounded hover:bg-slate-600">
                Вперед
            </a>
            {% endif %}
        </div>
    </div>
    {% endif %}
</div>
{% endblock %}  
--- END templates/articles/article_list.html ---

--- templates/articles/article_form.html ---
 {% extends 'base.html' %}
{% load static %}

{% block title %}{{ title }} - Tech Help{% endblock %}

{% block head %}
{{ form.media }}
{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <h1 class="text-3xl font-bold mb-8">
            {% if article %}Редактировать{% else %}Создать{% endif %} статью
        </h1>

        <form method="post" enctype="multipart/form-data" class="space-y-6 bg-slate-800 p-6 rounded-lg border border-slate-700">
            {% csrf_token %}
            
            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Заголовок</label>
                {{ form.title }}
                {% if form.title.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.title.errors.0 }}</p>
                {% endif %}
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Категория</label>
                {{ form.category }}
                {% if form.category.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.category.errors.0 }}</p>
                {% endif %}
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Изображение</label>
                {{ form.image }}
                {% if form.image.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.image.errors.0 }}</p>
                {% endif %}
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-300 mb-2">Содержание</label>
                {{ form.content }}
                {% if form.content.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.content.errors.0 }}</p>
                {% endif %}
            </div>

            <button type="submit" class="highlight w-full btn-primary text-lg bg-black/30 py-4">
                {% if article %}Сохранить изменения{% else %}Создать статью{% endif %}
            </button>
        </form>
    </div>
</div>
{% endblock %}  
--- END templates/articles/article_form.html ---

--- templates/articles/article_detail.html ---
 {% extends 'base.html' %}

{% block title %}Tech Help - {{ article.title }} {% endblock %}

{% block content %}
<div class="relative min-h-[200px] flex items-center">
    <!-- Фоновое изображение -->
    <div class="absolute inset-0">
        {% if article.image %}
        <img src="{{ article.image.url }}" 
            alt="{{ article.title }}" 
            class="w-full h-full object-cover">
        {% else %}
        <img src="../../media/default-images/{{ article.category.name }}.png" 
            alt="{{ article.title }}" 
            class="w-full h-full object-cover">
        {% endif %}
        <div class="absolute inset-0 bg-gradient-to-b from-slate-900/50 via-slate-900/80 to-slate-900"></div>
    </div>

    <!-- Контент поверх изображения -->
    <div class="relative container mx-auto px-4 py-16 z-10">
        <div class="max-w-4xl mx-auto p-6">
            {% if article.category %}
            <div class="inline-block px-4 py-1.5 bg-blue-500 text-white text-sm font-medium rounded-full mb-6">
                {{ article.category.name }}
            </div>
            {% endif %}

            <h1 class="text-4xl md:text-5xl font-bold text-white mb-6">{{ article.title }}</h1>

            <div class="flex flex-wrap items-center gap-6 text-gray-300">
                <div class="flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    <span>{{ article.author.username }}</span>
                </div>

                <div class="flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    <span>{{ article.created_date|date:"d.m.Y" }}</span>
                </div>

                <div class="flex items-center gap-2">
                    <svg class="w-5 h-5 text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                    <span>{{ average_rating|floatformat:1 }}</span>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="max-w-4xl mx-auto pt-8 border-t border-slate-700">

<!-- Основной контент статьи -->
<div class="container mx-auto px-4 py-12 border-t border-slate-700 bg-black bg-opacity-60 rounded-lg">
    <article class="prose prose-invert prose-lg max-w-4xl mx-auto">
        {{ article.content|safe }}
    </article>

    {% if user.is_authenticated %}
    <div class="max-w-4xl mx-auto mt-12 pt-8 border-t border-slate-700">
        <!-- Кнопки редактирования/удаления для автора -->
        {% if user == article.author %}
        <div class="flex gap-4">
            <a href="{% url 'articles:article_edit' article.slug %}" 
               class="btn-secondary">
                Редактировать
            </a>
            <a href="{% url 'articles:article_delete' article.slug %}" 
               class="btn-danger">
                Удалить
            </a>
        </div>
        {% endif %}
    </div>
    {% endif %}
</div>

<!-- Оценка статьи -->
{% if user.is_authenticated %}
<div class="bg-slate-800 p-6 rounded-lg border border-slate-700 mb-8">
    <h3 class="text-xl font-semibold mb-4">Оценить статью</h3>
    <form method="post" action="{% url 'articles:rate_article' article.slug %}" class="flex items-center gap-4">
        {% csrf_token %}
        <div class="flex items-center gap-2 star-rating">
            {% for i in "12345" %}
            <button type="submit" name="rating" value="{{ i }}" 
                    class="star text-2xl {% if user_rating and i|add:'0' <= user_rating.value %}text-yellow-400{% else %}text-gray-400{% endif %} hover:text-yellow-400"
                    data-value="{{ i }}">
                ★
            </button>
            {% endfor %}
        </div>
    </form>
</div>
{% endif %}

<!-- Комментарии -->
<section class="bg-slate-800 p-6 rounded-lg border border-slate-700">
    <h3 class="text-xl font-semibold mb-4">
        Комментарии ({{ comments|length }})
    </h3>
    {% if user.is_authenticated %}
    <form method="post" action="{% url 'articles:add_comment' article.slug %}" 
            class="mb-8">
        {% csrf_token %}
        <textarea name="text" 
                    class="w-full p-4 bg-slate-700 rounded-lg border border-slate-600 text-white mb-4"
                    rows="3" 
                    placeholder="Напишите комментарий..."></textarea>
        <button type="submit" 
                class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
            Отправить
        </button>
    </form>
    {% endif %}
<div class="space-y-6">
    {% for comment in comments %}
    <div class="flex gap-4">
        <img src="{{ comment.author.profile.avatar.url }}" 
                alt="{{ comment.author.username }}"
                class="w-10 h-10 rounded-full">
        <div>
            <div class="flex items-center gap-2 mb-1">
                <span class="font-semibold text-white">
                    {{ comment.author.username }}
                </span>
                <span class="text-gray-400 text-sm">
                    {{ comment.created_date|date:"d.m.Y H:i" }}
                </span>
            </div>
            <p class="text-gray-300">{{ comment.text }}</p>
        </div>
    </div>
    {% empty %}
    <p class="text-gray-400 text-center">Пока нет комментариев</p>
    {% endfor %}
</div>
{% endblock %}  
--- END templates/articles/article_detail.html ---

--- users/tests.py ---
 from django.test import TestCase

# Create your tests here.
 
--- END users/tests.py ---

--- users/views.py ---
 from django.shortcuts import render

# Create your views here.
 
--- END users/views.py ---

--- users/apps.py ---
 from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'
 
--- END users/apps.py ---

--- users/admin.py ---
 from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.utils.translation import gettext_lazy as _
from .models import User

@admin.register(User)
class CustomUserAdmin(UserAdmin):
    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff', 'date_joined')
    list_filter = ('is_staff', 'is_superuser', 'is_active', 'groups')
    search_fields = ('username', 'first_name', 'last_name', 'email')
    ordering = ('-date_joined',)
    
    fieldsets = (
        (None, {'fields': ('username', 'password')}),
        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'bio', 'birth_date')}),
        (_('Permissions'), {
            'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions'),
        }),
        (_('Important dates'), {'fields': ('last_login', 'date_joined')}),
    )
    
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('username', 'email', 'password1', 'password2'),
        }),
    )
 
--- END users/admin.py ---

--- users/__init__.py ---
  
--- END users/__init__.py ---

--- users/models.py ---
 from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils.translation import gettext_lazy as _

class User(AbstractUser):
    email = models.EmailField(_('email address'), unique=True)
    bio = models.TextField(_('biography'), max_length=500, blank=True)
    birth_date = models.DateField(_('birth date'), null=True, blank=True)
    
    # Делаем email обязательным полем
    REQUIRED_FIELDS = ['email']

    class Meta:
        verbose_name = 'Пользователь'
        verbose_name_plural = 'Пользователи'

    def __str__(self):
        return self.username
 
--- END users/models.py ---

--- users/migrations/0001_initial.py ---
 # Generated by Django 5.1.6 on 2025-02-17 17:38

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='biography')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='birth date')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
 
--- END users/migrations/0001_initial.py ---

--- users/migrations/__init__.py ---
  
--- END users/migrations/__init__.py ---

--- articles/tests.py ---
 
from django.test import TestCase, RequestFactory
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.urls import reverse

# Импортируйте ваши модели здесь
from .models import Article, Category  # Замените . на путь к вашим моделям

# Импортируйте вашу функцию представления
from .views import article_list  # Замените . на путь к вашему представлению


class ArticleListViewTest(TestCase):
    @classmethod
    def setUpTestData(cls):
        # Создаем тестовые данные, которые будут использоваться во всех тестах класса
        cls.category1 = Category.objects.create(name="Category 1", slug="category-1")
        cls.category2 = Category.objects.create(name="Category 2", slug="category-2")

        # Создаем RequestFactory для создания поддельных запросов
        cls.factory = RequestFactory()
        request = cls.factory.get(reverse('article_list')) # Замените 'article_list' на имя вашего URL


        # Создаем 25 статей для тестирования пагинации
        for i in range(25):
            if i % 2 == 0:
                category = cls.category1
            else:
                category = cls.category2
            Article.objects.create(title=f"Article {i+1}", category=category, author=request.user)

        


    def test_article_list_no_filter(self):
        """Тест: Отображение всех статей без фильтрации."""
        request = self.factory.get(reverse('article_list')) # Замените 'article_list' на имя вашего URL
        response = article_list(request)

        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'articles/article_list.html') # Замените путь на ваш шаблон
        self.assertEqual(len(response.context['articles'].object_list), 12) # Проверяем количество статей на первой странице (items_per_page = 12)
        self.assertEqual(response.context['articles'].number, 1) # Проверяем, что это первая страница
        self.assertEqual(response.context['categories'].count(), 2) # Проверяем, что все категории передаются


    def test_article_list_filtered_by_category(self):
        """Тест: Отображение статей, отфильтрованных по категории."""
        request = self.factory.get(reverse('article_list') + '?category=category-1') # Замените 'article_list' на имя вашего URL
        response = article_list(request)

        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'articles/article_list.html') # Замените путь на ваш шаблон
        filtered_articles = Article.objects.filter(category=self.category1)
        paginator = Paginator(filtered_articles, 12) # Убедитесь, что items_per_page совпадает

        self.assertEqual(len(response.context['articles'].object_list), len(paginator.page(1).object_list)) # Проверяем, что количество статей на странице соответствует отфильтрованным
        self.assertEqual(response.context['categories'].count(), 2) # Проверяем, что все категории передаются


    def test_article_list_pagination(self):
        """Тест: Проверка пагинации."""
        request = self.factory.get(reverse('article_list') + '?page=2')  # Замените 'article_list' на имя вашего URL
        response = article_list(request)

        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'articles/article_list.html') # Замените путь на ваш шаблон
        self.assertEqual(len(response.context['articles'].object_list), 12)  # Вторая страница должна иметь 12 статей
        self.assertEqual(response.context['articles'].number, 2) # Проверяем, что это вторая страница
        self.assertEqual(response.context['categories'].count(), 2) # Проверяем, что все категории передаются

        request = self.factory.get(reverse('article_list') + '?page=3') # Замените 'article_list' на имя вашего URL
        response = article_list(request)

        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'articles/article_list.html') # Замените путь на ваш шаблон
        self.assertEqual(len(response.context['articles'].object_list), 1)  # Третья страница должна иметь только 1 статью
        self.assertEqual(response.context['articles'].number, 3) # Проверяем, что это третья страница
        self.assertEqual(response.context['categories'].count(), 2) # Проверяем, что все категории передаются

    def test_article_list_invalid_page(self):
        """Тест: Обработка некорректного номера страницы."""
        # Проверяем, что при запросе некорректной страницы отображается первая страница
        request = self.factory.get(reverse('article_list') + '?page=abc') # Замените 'article_list' на имя вашего URL
        response = article_list(request)

        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['articles'].number, 1)

        # Проверяем, что при запросе страницы больше максимальной отображается последняя страница
        request = self.factory.get(reverse('article_list') + '?page=999') # Замените 'article_list' на имя вашего URL
        response = article_list(request)

        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.context['articles'].number, 3) # всего 3 страницы


    def test_article_list_empty_category(self):
      """Тест: Проверка, что ничего не сломается, если нет статей в выбранной категории."""
      category3 = Category.objects.create(name="Category 3", slug="category-3")
      request = self.factory.get(reverse('article_list') + '?category=category-3')
      response = article_list(request)

      self.assertEqual(response.status_code, 200)
      self.assertTemplateUsed(response, 'articles/article_list.html')
      self.assertEqual(len(response.context['articles'].object_list), 0)
      self.assertEqual(response.context['articles'].number, 1)
      self.assertEqual(response.context['categories'].count(), 3)



# --- Замечания ---
# 1. Замените пути импорта (from .models import Article, Category и from .views import article_list) на правильные пути к вашим моделям и представлениям.
# 2. Замените 'article_list' на имя вашего URL для представления article_list.  Используйте reverse() для динамического получения URL по имени.
# 3. Замените 'articles/article_list.html' на путь к вашему шаблону.
# 4. Убедитесь, что ваши тестовые данные (setup) создают минимально необходимое количество объектов для эффективного тестирования.
# 5.  Убедитесь, что  `items_per_page`  в тестах соответствуют  `items_per_page`  в вашем представлении.
# 6. Добавлены тесты на граничные случаи: некорректный номер страницы и пустая категория.
# 7.  Убедитесь, что у вас настроен `reverse` для URL-шаблона `article_list` в `urls.py`.
 
--- END articles/tests.py ---

--- articles/views.py ---
 from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.core.paginator import Paginator
from .models import Article, Category, Rating
from .forms import ArticleForm, CommentForm

from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.shortcuts import render

def article_list(request):
    articles_list = Article.objects.all()
    # Фильтрация по категории
    category_slug = request.GET.get('category')
    if category_slug:
        articles_list = articles_list.filter(category__slug=category_slug)
    categories = Category.objects.all()

    items_per_page = 12
    paginator = Paginator(articles_list, items_per_page)

    page = request.GET.get('page')
    try:
        articles = paginator.page(page)
    except PageNotAnInteger:
        # Если 'page' не целое число, показываем первую страницу
        articles = paginator.page(1)
    except EmptyPage:
        # Если 'page' больше максимального, показываем последнюю страницу
        articles = paginator.page(paginator.num_pages)

    return render(request, 'articles/article_list.html', {
        'articles': articles,
        'categories': categories
    })


def article_detail(request, slug):
    article = get_object_or_404(Article, slug=slug)
    average_rating = article.average_rating()
    comments = article.comments.all()
    
    

    context = {
        'article': article,
        'average_rating': average_rating,
        'comments': comments,
    }
    if request.user.is_authenticated:
        user_rating = Rating.objects.filter(article=article, user=request.user).first()
        context['user_rating'] = user_rating
    
    return render(request, 'articles/article_detail.html', context)

@login_required
def add_comment(request, slug):
    article = get_object_or_404(Article, slug)
    comments = article.comments.all()
    if request.method == 'POST':
        form = CommentForm(request.POST)
        if form.is_valid():
            comment = form.save(commit=False)
            comment.article = article
            comment.author = request.user
            comment.save()
            messages.success(request, 'Комментарий добавлен!')
            return redirect('articles:article_detail', slug=slug)
    return redirect('articles:article_detail', slug=slug)

@login_required
def rate_article(request, slug):
    article = get_object_or_404(Article, slug=slug)
    
    if request.method == 'POST':
        value = request.POST.get('rating')
        if value:
            Rating.objects.update_or_create(
                article=article,
                user=request.user,
                defaults={'value': value}
            )
    
    return redirect('articles:article_detail', slug=slug)

@login_required
def article_create(request):
    if request.method == 'POST':
        form = ArticleForm(request.POST, request.FILES)
        if form.is_valid():
            article = form.save(commit=False)
            article.author = request.user
            article.save()
            messages.success(request, 'Статья успешно создана!')
            return redirect('articles:article_detail', slug=article.slug)
    else:
        form = ArticleForm()
    
    return render(request, 'articles/article_form.html', {
        'form': form,
        'title': 'Создать статью'
    })

@login_required
def article_edit(request, slug):
    article = get_object_or_404(Article, slug=slug)
    
    # Проверяем права на редактирование
    if article.author != request.user and not request.user.is_staff:
        messages.error(request, 'У вас нет прав на редактирование этой статьи.')
        return redirect('articles:article_detail', slug=slug)
    
    if request.method == 'POST':
        form = ArticleForm(request.POST, request.FILES, instance=article)
        if form.is_valid():
            article = form.save()
            messages.success(request, 'Статья успешно обновлена!')
            return redirect('articles:article_detail', slug=article.slug)
    else:
        form = ArticleForm(instance=article)
    
    return render(request, 'articles/article_form.html', {
        'form': form,
        'article': article,
        'title': 'Редактировать статью'
    })

@login_required
def article_delete(request, slug):
    article = get_object_or_404(Article, slug=slug)
    
    # Проверяем права на удаление
    if article.author != request.user and not request.user.is_staff:
        messages.error(request, 'У вас нет прав на удаление этой статьи.')
        return redirect('articles:article_detail', slug=slug)
    
    if request.method == 'POST':
        article.delete()
        messages.success(request, 'Статья успешно удалена!')
        return redirect('articles:article_list')
    
    return render(request, 'articles/article_confirm_delete.html', {
        'article': article
    })
 
--- END articles/views.py ---

--- articles/apps.py ---
 from django.apps import AppConfig


class ArticlesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'articles'
 
--- END articles/apps.py ---

--- articles/admin.py ---
 from django.contrib import admin
from .models import Category, Article, Comment, Rating

@admin.register(Category)
class CategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug')
    prepopulated_fields = {'slug': ('name',)}
    search_fields = ('name',)

class CommentInline(admin.TabularInline):
    model = Comment
    extra = 0

class RatingInline(admin.TabularInline):
    model = Rating
    extra = 0

@admin.register(Article)
class ArticleAdmin(admin.ModelAdmin):
    list_display = ['title', 'slug', 'updated_date', 'created_date']
    list_filter = ['created_date', 'updated_date']
    search_fields = ['title', 'content']
    prepopulated_fields = {'slug': ('title',)}
    date_hierarchy = 'created_date'
    readonly_fields = ('views',)
    inlines = [CommentInline, RatingInline]

    def save_model(self, request, obj, form, change):
        if not change:  # Если создается новая статья
            obj.author = request.user
        super().save_model(request, obj, form, change)

@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    list_display = ('article', 'author', 'created_date', 'short_text')
    list_filter = ('created_date', 'author')
    search_fields = ('text', 'author__username', 'article__title')

    def short_text(self, obj):
        return obj.text[:100] + '...' if len(obj.text) > 100 else obj.text
    short_text.short_description = 'Текст комментария'

@admin.register(Rating)
class RatingAdmin(admin.ModelAdmin):
    list_display = ('article', 'user', 'value', 'created_date')
    list_filter = ('value', 'created_date')
    search_fields = ('user__username', 'article__title')
 
--- END articles/admin.py ---

--- articles/forms.py ---
 from django import forms
from .models import Article, Comment
from django_ckeditor_5.widgets import CKEditor5Widget

class ArticleForm(forms.ModelForm):
    content = forms.CharField(
        widget=CKEditor5Widget(
            attrs={'class': 'django_ckeditor_5'},
            config_name='default'
        ),
        label='Содержание'
    )

    class Meta:
        model = Article
        fields = ['title', 'content', 'image', 'category']
        widgets = {
            'title': forms.TextInput(attrs={'class': 'w-full rounded-lg border-gray-300 bg-white text-gray-900'}),
            'image': forms.FileInput(attrs={'class': 'w-full rounded-lg border-gray-300 bg-white text-gray-900'}),
            'category': forms.Select(attrs={'class': 'w-full rounded-lg border-gray-300 bg-white text-gray-900'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs.update({
                'class': 'form-input'
            })

class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        fields = ['text']
        widgets = {
            'text': forms.Textarea(attrs={'rows': 3})
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['text'].widget.attrs.update({
            'class': 'form-input',
            'placeholder': 'Напишите комментарий...'
        })  
--- END articles/forms.py ---

--- articles/urls.py ---
 from django.urls import path
from . import views

app_name = 'articles'

urlpatterns = [
    path('', views.article_list, name='article_list'),
    path('create/', views.article_create, name='article_create'),
    path('<slug:slug>/', views.article_detail, name='article_detail'),
    path('<slug:slug>/edit/', views.article_edit, name='article_edit'),
    path('<slug:slug>/delete/', views.article_delete, name='article_delete'),
    path('<slug:slug>/comment/', views.add_comment, name='add_comment'),
    path('<slug:slug>/rate/', views.rate_article, name='rate_article'),
]  
--- END articles/urls.py ---

--- articles/__init__.py ---
  
--- END articles/__init__.py ---

--- articles/models.py ---
 from django.db import models
from django.contrib.auth.models import User
from django.utils.text import slugify
from django.conf import settings
from django.urls import reverse
from unidecode import unidecode
from django_ckeditor_5.fields import CKEditor5Field

class Category(models.Model):
    name = models.CharField(max_length=100, verbose_name='Название')
    slug = models.SlugField(unique=True, blank=True)
    
    class Meta:
        verbose_name = 'Категория'
        verbose_name_plural = 'Категории'
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)
    
    def __str__(self):
        return self.name

class Article(models.Model):
    title = models.CharField(max_length=200, verbose_name='Заголовок')
    slug = models.SlugField(unique=True, blank=True)
    content = CKEditor5Field()
    image = models.ImageField(upload_to='articles/', verbose_name='Изображение', blank=True)
    created_date = models.DateTimeField(auto_now_add=True)
    updated_date = models.DateTimeField(auto_now=True)
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name='Автор', null=False, blank=False)
    category = models.ForeignKey(Category, on_delete=models.CASCADE, verbose_name='Категория')
    views = models.PositiveIntegerField(default=0, verbose_name='Просмотры')
    
    class Meta:
        ordering = ['-created_date']
        verbose_name = 'Статья'
        verbose_name_plural = 'Статьи'
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(unidecode(self.title))
            original_slug = self.slug
            counter = 1
            while Article.objects.filter(slug=self.slug).exists():
                self.slug = f'{original_slug}-{counter}'
                counter += 1
        super().save(*args, **kwargs)
    
    def get_absolute_url(self):
        return reverse('articles:article_detail', kwargs={'slug': self.slug})
    
    def average_rating(self):
        return self.ratings.aggregate(models.Avg('value'))['value__avg'] or 0
    
    def __str__(self):
        return self.title


class Comment(models.Model):
    article = models.ForeignKey(Article, on_delete=models.CASCADE, related_name='comments', verbose_name='Статья')
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name='Автор')
    text = models.TextField(verbose_name='Текст комментария')
    created_date = models.DateTimeField(auto_now_add=True, verbose_name='Дата публикации')
    
    class Meta:
        verbose_name = 'Комментарий'
        verbose_name_plural = 'Комментарии'
        ordering = ['-created_date']
    
    def __str__(self):
        return f'Комментарий от {self.author.username} к {self.article.title}'


class Rating(models.Model):
    RATING_CHOICES = [
        (1, '1'),
        (2, '2'),
        (3, '3'),
        (4, '4'),
        (5, '5'),
    ]
    
    article = models.ForeignKey(Article, on_delete=models.CASCADE, related_name='ratings', verbose_name='Статья')
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name='Пользователь')
    value = models.IntegerField(choices=RATING_CHOICES, verbose_name='Оценка')
    created_date = models.DateTimeField(auto_now_add=True, verbose_name='Дата оценки')
    
    class Meta:
        verbose_name = 'Оценка'
        verbose_name_plural = 'Оценки'
        unique_together = ['article', 'user']  # Один пользователь может оставить только одну оценку
    
    def __str__(self):
        return f'Оценка {self.value} от {self.user.username} для {self.article.title}'
 
--- END articles/models.py ---

--- articles/migrations/0002_commentvote.py ---
 # Generated by Django 5.1.6 on 2025-03-18 16:24

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('articles', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CommentVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.SmallIntegerField(choices=[(1, 'Like'), (-1, 'Dislike')])),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='articles.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Голос за комментарий',
                'verbose_name_plural': 'Голоса за комментарии',
                'unique_together': {('comment', 'user')},
            },
        ),
    ]
 
--- END articles/migrations/0002_commentvote.py ---

--- articles/migrations/0001_initial.py ---
 # Generated by Django 5.1.6 on 2025-03-01 12:07

import django.db.models.deletion
import django_ckeditor_5.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('slug', models.SlugField(blank=True, unique=True)),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок')),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('content', django_ckeditor_5.fields.CKEditor5Field()),
                ('image', models.ImageField(blank=True, upload_to='articles/', verbose_name='Изображение')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('views', models.PositiveIntegerField(default=0, verbose_name='Просмотры')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='articles.category', verbose_name='Категория')),
            ],
            options={
                'verbose_name': 'Статья',
                'verbose_name_plural': 'Статьи',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст комментария')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата публикации')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='articles.article', verbose_name='Статья')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], verbose_name='Оценка')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата оценки')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='articles.article', verbose_name='Статья')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Оценка',
                'verbose_name_plural': 'Оценки',
                'unique_together': {('article', 'user')},
            },
        ),
    ]
 
--- END articles/migrations/0001_initial.py ---

--- articles/migrations/0003_reaction_delete_commentvote.py ---
 # Generated by Django 5.1.6 on 2025-03-18 18:01

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('articles', '0002_commentvote'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Reaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction_type', models.SmallIntegerField(choices=[(1, 'Like'), (-1, 'Dislike')])),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='articles.comment', verbose_name='Комментарий')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Реакция',
                'verbose_name_plural': 'Реакции',
                'unique_together': {('user', 'comment')},
            },
        ),
        migrations.DeleteModel(
            name='CommentVote',
        ),
    ]
 
--- END articles/migrations/0003_reaction_delete_commentvote.py ---

--- articles/migrations/0004_delete_reaction.py ---
 # Generated by Django 5.1.6 on 2025-03-18 18:05

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('articles', '0003_reaction_delete_commentvote'),
    ]

    operations = [
        migrations.DeleteModel(
            name='Reaction',
        ),
    ]
 
--- END articles/migrations/0004_delete_reaction.py ---

--- articles/migrations/__init__.py ---
  
--- END articles/migrations/__init__.py ---


=== Service Files ===

--- db.sqlite3 ---
<binary content>
--- END ---