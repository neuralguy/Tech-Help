

=== Project Structure ===
tech_help/
├── accounts
│   ├── templates
│   │   └── accounts
│   │       ├── login.html
│   │       ├── profile.html
│   │       └── register.html
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── forms.py
│   ├── urls.py
│   └── views.py
├── comparisons
│   ├── templates
│   │   └── comparisons
│   │       ├── comparison_create.html
│   │       ├── comparison_detail.html
│   │       └── comparison_list.html
│   ├── templatetags
│   │   ├── comparison_tags.py
│   │   └── custom_filters.py
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── forms.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── devices
│   ├── templates
│   │   └── devices
│   │       ├── device_confirm_delete.html
│   │       ├── device_detail.html
│   │       ├── device_form.html
│   │       ├── device_list.html
│   │       └── specification_form.html
│   ├── templatetags
│   │   ├── __init__.py
│   │   └── device_tags.py
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── forms.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── home
│   ├── static
│   │   └── home
│   │       └── css
│   │           └── home.css
│   ├── templates
│   │   └── home
│   │       └── home.html
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── profiles
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── static
│   ├── css
│   │   ├── base
│   │   │   ├── reset.css
│   │   │   ├── typography.css
│   │   │   └── variables.css
│   │   ├── components
│   │   │   ├── buttons.css
│   │   │   ├── cards.css
│   │   │   ├── forms.css
│   │   │   ├── modals.css
│   │   │   └── nav.css
│   │   ├── layouts
│   │   │   ├── footer.css
│   │   │   ├── grid.css
│   │   │   └── header.css
│   │   ├── utilities
│   │   │   ├── animations.css
│   │   │   ├── responsive.css
│   │   │   └── tooltips.css
│   │   ├── base.css
│   │   ├── main.css
│   │   └── other.css
│   └── js
├── tech_help
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── templates
│   └── base.html
├── users
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── tests.py
│   └── views.py
├── manage.py


=== Code Files Content ===

--- manage.py ---
 #!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tech_help.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
 
--- END manage.py ---

--- static/css/base.css ---
 body { color: #94a3b8; }  /* text-slate-400 */

.nav-link {
    transition: all 0.3s ease;
}
.nav-link:hover {
    transform: translateY(-3px);
    color: #60a5fa; /* text-blue-400 */
}
.card-hover {
    transition: all 0.3s ease;
}
.card-hover:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
} 
--- END static/css/base.css ---

--- static/css/other.css ---
 [data-tooltip] {
  position: relative;
  cursor: pointer;
}

[data-tooltip]::after {
  content: attr(data-tooltip);
  position: absolute;
  bottom: 130%;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(0, 0, 0, 0.9);
  color: #fff;
  padding: 6px 12px;
  border-radius: 4px;
  font-size: 14px;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.2s;
  pointer-events: none;
  z-index: 1000;
  width: 30rem;
  text-align: left;
  white-space: pre-wrap;

}

[data-tooltip]::before {
  content: "";
  position: absolute;
  bottom: 120%;
  left: 50%;
  transform: translateX(-50%);
  border: 5px solid transparent;
  border-top-color: rgba(0, 0, 0, 0.9);
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.2s;
  pointer-events: none;
}

[data-tooltip]:hover::after,
[data-tooltip]:hover::before {
  opacity: 1;
  visibility: visible;
} 
--- END static/css/other.css ---

--- static/css/main.css ---
 @import 'base/reset.css';
@import 'base/typography.css';
@import 'base/variables.css';

@import 'components/buttons.css';
@import 'components/cards.css';
@import 'components/forms.css';
@import 'components/modals.css';
@import 'components/nav.css';

@import 'layouts/header.css';
@import 'layouts/footer.css';
@import 'layouts/grid.css';

@import 'utilities/animations.css';
@import 'utilities/responsive.css';

@import 'base.css';
@import 'other.css';
 
--- END static/css/main.css ---

--- static/css/components/buttons.css ---
  
--- END static/css/components/buttons.css ---

--- static/css/components/modals.css ---
  
--- END static/css/components/modals.css ---

--- static/css/components/forms.css ---
  
--- END static/css/components/forms.css ---

--- static/css/components/nav.css ---
 /* Main navigation */
.main-nav {
    background-color: var(--color-bg-nav);
    border-bottom: 1px solid var(--color-border);
    position: relative;
    z-index: 1000;
}

.nav-container {
    max-width: var(--container-width);
    margin: 0 auto;
    padding: 0 var(--space-md);
}

.nav-wrapper {
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: var(--nav-height);
}

/* Logo */
.logo {
    display: flex;
    align-items: center;
    transition: var(--transition-default);
}

.logo__text {
    font-size: var(--text-xl);
    font-weight: 700;
    color: var(--color-primary);
}

.logo:hover .logo__text {
    color: var(--color-primary-dark);
}

/* Main menu */
.main-menu {
    display: flex;
    gap: var(--space-lg);
    margin: 0;
    padding: 0;
    list-style: none;
}

.menu-item {
    position: relative;
}

.menu-link {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    padding: var(--space-sm);
    color: var(--color-text);
    transition: var(--transition-default);
}

.menu-link:hover {
    color: var(--color-primary);
    transform: translateY(-2px);
}

.menu-icon {
    font-size: 1.1em;
}

/* Account menu */
.account-menu {
    display: flex;
    align-items: center;
    gap: var(--space-md);
}

.profile-link,
.logout-link,
.login-link {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    padding: var(--space-xs) var(--space-sm);
}

/* Mobile menu (добавить медиа-запросы) */
@media (max-width: 768px) {
    .main-menu {
        display: none;
    }
    
    .nav-wrapper {
        height: var(--nav-height-mobile);
    }
} 
--- END static/css/components/nav.css ---

--- static/css/components/cards.css ---
  
--- END static/css/components/cards.css ---

--- static/css/base/typography.css ---
 body {
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;
    line-height: 1.6;
    color: var(--color-text);
    background-color: var(--color-bg);
}

h1, h2, h3, h4, h5, h6 {
    line-height: 1.2;
    font-weight: 700;
    margin: 0 0 var(--space-sm) 0;
}

a {
    color: var(--color-primary);
    text-decoration: none;
    transition: var(--transition-default);
}

a:hover {
    color: var(--color-primary-dark);
} 
--- END static/css/base/typography.css ---

--- static/css/base/variables.css ---
 :root {
    /* Layout */
    --container-width: 1280px;
    --nav-height: 4rem;
    --nav-height-mobile: 3.5rem;
    
    /* Z-index */
    --z-nav: 1000;
    --z-modal: 2000;
    
    /* Colors */
    --color-primary: #60a5fa;
    --color-primary-dark: #3b82f6;
    --color-text: #94a3b8;
    --color-text-dark: #64748b;
    --color-bg: #0f172a;
    --color-bg-light: #1e293b;
    --color-border: #334155;
    
    /* Spacing */
    --space-xs: 0.5rem;
    --space-sm: 1rem;
    --space-md: 1.5rem;
    --space-lg: 2rem;
    --space-xl: 3rem;
    
    /* Typography */
    --text-base: 1rem;
    --text-lg: 1.125rem;
    --text-xl: 1.25rem;
    --text-2xl: 1.5rem;
    --text-3xl: 1.875rem;
    --text-4xl: 2.25rem;
    
    /* Shadows */
    --shadow-sm: 0 1px 3px rgba(0,0,0,0.12);
    --shadow-md: 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06);
    --shadow-lg: 0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -2px rgba(0,0,0,0.05);
    
    /* Transitions */
    --transition-default: all 0.3s ease;
}
 
--- END static/css/base/variables.css ---

--- static/css/base/reset.css ---
  
--- END static/css/base/reset.css ---

--- static/css/layouts/grid.css ---
  
--- END static/css/layouts/grid.css ---

--- static/css/layouts/footer.css ---
 /* Site structure */
.site-root {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

.site-body {
    flex: 1;
    display: flex;
    flex-direction: column;
}

.main-content {
    flex: 1;
    padding: var(--space-xl) 0;
}

/* Footer */
.site-footer {
    background-color: var(--color-bg-nav);
    border-top: 1px solid var(--color-border);
    padding: var(--space-md) 0;
    margin-top: auto;
}

.footer-container {
    max-width: var(--container-width);
    margin: 0 auto;
    text-align: center;
}

.copyright {
    color: var(--color-text-dark);
    font-size: 0.9em;
} 
--- END static/css/layouts/footer.css ---

--- static/css/layouts/header.css ---
  
--- END static/css/layouts/header.css ---

--- static/css/utilities/responsive.css ---
 @media (max-width: 1024px) {
    .nav-container {
        padding: 0 var(--space-sm);
    }
    
    .main-menu {
        gap: var(--space-md);
    }
}

@media (max-width: 768px) {
    .menu-text {
        display: none;
    }
    
    .logo__text {
        font-size: var(--text-lg);
    }
    
    .account-menu .btn--register {
        display: none;
    }
}

@media (max-width: 768px) {
    .features-grid {
        grid-template-columns: 1fr;
    }
    
    .hero__title {
        font-size: var(--text-3xl);
    }
    
    .cta-buttons {
        flex-direction: column;
    }
} 
--- END static/css/utilities/responsive.css ---

--- static/css/utilities/tooltips.css ---
  
--- END static/css/utilities/tooltips.css ---

--- static/css/utilities/animations.css ---
 
/*
Список эффектов:
•  fade-in-up: Появление элемента с плавным поднятием снизу вверх.
•  fade-in-down: Появление элемента с плавным опусканием сверху вниз.
•  fade-in-left: Появление элемента с плавным сдвигом слева направо.
•  fade-in-right: Появление элемента с плавным сдвигом справа налево.
•  scale-up: Увеличение размера элемента от меньшего к нормальному.
•  scale-down: Уменьшение размера элемента от большего к нормальному.
•  flip-horizontal: Вращение элемента по горизонтали на 360 градусов.
•  rotate: Непрерывное вращение элемента по кругу.
•  pulse: Пульсирующее изменение размера элемента.
•  wave: Горизонтальное перемещение элемента влево и вправо.
•  blink: Мигание элемента (появление и исчезновение).
•  zoom-in: Плавное увеличение размера элемента, как при приближении.
•  wipe: Эффект "вытирания", когда элемент постепенно появляется слева направо.
•  expand: Анимация расширения элемента по горизонтали от 0 до полной ширины.
•  wave-grow: Увеличение элемента по горизонтали (как волна).
•  cube-rotate: Непрерывное вращение элемента в трехмерном пространстве, как куб.
•  highlight: При наведении курсора появляется тень от текста.
•  typing-animation: Эффект печатающегося текста.
*/

/* fade-in-up */
@keyframes fade-in-up {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in-up {
  animation: fade-in-up 0.5s ease-out forwards;
}

.fade-in-up-hover:hover {
  animation: fade-in-up 0.5s ease-out forwards;
}

.fade-in-up-inf {
    animation: fade-in-up 0.5s ease-out infinite;
}
/* fade-in-down */
@keyframes fade-in-down {
  0% {
    opacity: 0;
    transform: translateY(-20px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in-down {
  animation: fade-in-down 0.5s ease-out forwards;
}

.fade-in-down-hover:hover {
  animation: fade-in-down 0.5s ease-out forwards;
}

.fade-in-down-inf {
    animation: fade-in-down 0.5s ease-out infinite;
}


/* fade-in-left */
@keyframes fade-in-left {
  0% {
    opacity: 0;
    transform: translateX(-20px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.fade-in-left {
  animation: fade-in-left 0.5s ease-out forwards;
}

.fade-in-left-hover:hover {
  animation: fade-in-left 0.5s ease-out forwards;
}

.fade-in-left-inf {
    animation: fade-in-left 0.5s ease-out infinite;
}


/* fade-in-right */
@keyframes fade-in-right {
  0% {
    opacity: 0;
    transform: translateX(20px);
  }
  100% {
    opacity: 1;
    transform: translateX(0);
  }
}

.fade-in-right {
  animation: fade-in-right 0.5s ease-out forwards;
}

.fade-in-right-hover:hover {
  animation: fade-in-right 0.5s ease-out forwards;
}

.fade-in-right-inf {
    animation: fade-in-right 0.5s ease-out infinite;
}

/* scale-up */
@keyframes scale-up {
  0% {
    transform: scale(0.5);
  }
  100% {
    transform: scale(1);
  }
}

.scale-up {
  animation: scale-up 0.5s ease-out forwards;
}

.scale-up-hover:hover {
  animation: scale-up 0.5s ease-out forwards;
}

.scale-up-inf {
    animation: scale-up 0.5s ease-out infinite;
}

/* scale-down */
@keyframes scale-down {
  0% {
    transform: scale(1.5);
  }
  100% {
    transform: scale(1);
  }
}

.scale-down {
  animation: scale-down 0.5s ease-out forwards;
}

.scale-down-hover:hover {
  animation: scale-down 0.5s ease-out forwards;
}

.scale-down-inf {
    animation: scale-down 0.5s ease-out infinite;
}

/* flip-horizontal */
@keyframes flip-horizontal {
  0% {
    transform: rotateY(0deg);
  }
  50% {
    transform: rotateY(180deg);
  }
  100% {
    transform: rotateY(360deg);
  }
}

.flip-horizontal {
  animation: flip-horizontal 1s linear forwards;
}

.flip-horizontal-hover:hover {
  animation: flip-horizontal 1s linear forwards;
}

.flip-horizontal-inf {
  animation: flip-horizontal 3s linear infinite;
}


/* rotate */
@keyframes rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.rotate {
  animation: rotate 2s linear forwards;
}

.rotate-hover:hover {
  animation: rotate 2s linear forwards;
}

.rotate-inf {
  animation: rotate 2s linear infinite;
}


/* pulse */
@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.1);
  }
  100% {
    transform: scale(1);
  }
}

.pulse {
  animation: pulse 1s ease-in-out forwards;
}

.pulse-hover:hover {
  animation: pulse 1s ease-in-out forwards;
}


.pulse-inf {
  animation: pulse 1s ease-in-out infinite;
}

/* wave */
@keyframes wave {
  0% {
    transform: translateX(0);
  }
  50% {
    transform: translateX(20px);
  }
  100% {
    transform: translateX(0);
  }
}

.wave {
  animation: wave 2s ease-in-out forwards;
}

.wave-hover:hover {
  animation: wave 2s ease-in-out forwards;
}

.wave-inf {
  animation: wave 2s ease-in-out infinite;
}

/* blink */
@keyframes blink {
  0% {
    opacity: 1;
  }
  50% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

.blink {
  animation: blink 1s ease-in-out forwards;
}

.blink-hover:hover {
  animation: blink 1s ease-in-out forwards;
}

.blink-inf {
  animation: blink 1s ease-in-out infinite;
}

/* zoom-in */
@keyframes zoom-in {
  0% {
    transform: scale(0.5);
  }
  100% {
    transform: scale(1);
  }
}

.zoom-in {
  animation: zoom-in 0.5s ease-out forwards;
}

.zoom-in-hover:hover {
  animation: zoom-in 0.5s ease-out forwards;
}

.zoom-in-inf {
  animation: zoom-in 0.5s ease-out infinite;
}


/* wipe */
@keyframes wipe {
  0% {
    clip-path: inset(0 100% 0 0);
  }
  100% {
    clip-path: inset(0 0 0 0);
  }
}

.wipe {
  animation: wipe 0.5s ease-out forwards;
}

.wipe-hover:hover {
  animation: wipe 0.5s ease-out forwards;
}

.wipe-inf {
  animation: wipe 0.5s ease-out infinite;
}

/* expand */
@keyframes expand {
  0% {
    width: 0;
  }
  100% {
    width: 100%;
  }
}

.expand {
  animation: expand 1s ease-out forwards;
}

.expand-hover:hover {
  animation: expand 1s ease-out forwards;
}

.expand-inf {
  animation: expand 1s ease-out infinite;
}

/* wave-grow */
@keyframes wave-grow {
  0% {
    transform: scaleX(0);
  }
  100% {
    transform: scaleX(1);
  }
}

.wave-grow {
  animation: wave-grow 0.5s ease-out forwards;
}

.wave-grow-hover:hover {
  animation: wave-grow 0.5s ease-out forwards;
}

.wave-grow-inf {
  animation: wave-grow 0.5s ease-out infinite;
}

/* cube-rotate */
@keyframes cube-rotate {
  0% {
    transform: rotateX(0deg) rotateY(0deg);
  }
  100% {
    transform: rotateX(360deg) rotateY(360deg);
  }
}

.cube-rotate {
  animation: cube-rotate 5s linear forwards;
}

.cube-rotate-hover:hover {
  animation: cube-rotate 5s linear forwards;
}

.cube-rotate-inf {
  animation: cube-rotate 5s linear infinite;
}

/* highlight */
.highlight {
  transition: text-shadow 0.3s ease-in-out;
}

.highlight-hover:hover {
  text-shadow: 0 0 5px #007bff, 0px 0px 10px #007bff; /* Цвет и размытие тени */
}

/* typing-animation */
.typing-animation {
  display: inline-block;
  overflow: hidden;
  border-right: .15em solid gray; /* Курсор */
  white-space: nowrap;
  margin: 0 auto;
  letter-spacing: .15em;
  animation:
    typing 4s steps(40, end) forwards,
    blink-caret .75s step-end infinite;
}

.typing-animation-hover:hover{
  display: inline-block;
  overflow: hidden;
  border-right: .15em solid gray; /* Курсор */
  white-space: nowrap;
  margin: 0 auto;
  letter-spacing: .15em;
  animation:
    typing 4s steps(40, end) forwards,
    blink-caret .75s step-end infinite;
}

.typing-animation-inf {
  display: inline-block;
  overflow: hidden;
  border-right: .15em solid gray; /* Курсор */
  white-space: nowrap;
  margin: 0 auto;
  letter-spacing: .15em;
  animation:
    typing 4s steps(40, end) infinite,
    blink-caret .75s step-end infinite;
}

@keyframes typing {
      from { width: 0 }
      to { width: 60% }
    }

@keyframes blink-caret {
  from, to { border-color: transparent }
  50% { border-color: gray; }
}
 
--- END static/css/utilities/animations.css ---

--- comparisons/tests.py ---
 from django.test import TestCase

# Create your tests here.
 
--- END comparisons/tests.py ---

--- comparisons/views.py ---
 from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from .models import Comparison, ComparisonVote
from devices.models import Device
from collections import defaultdict
from django.views.decorators.cache import never_cache

@login_required
def comparison_create(request):
    if request.method == 'POST':
        device_ids = request.POST.getlist('devices')
        if len(device_ids) == 2:
            comparison = Comparison.objects.create(
                created_by=request.user,
                title="Сравнение устройств"
            )
            comparison.devices.set(device_ids)
            if not comparison.slug:
                comparison.save()
            return redirect('comparisons:comparison_detail', slug=comparison.slug)
    
    devices = Device.objects.all().order_by('-created_at')
    context = {
        'devices': devices,
    }
    return render(request, 'comparisons/comparison_create.html', context)

@never_cache
def comparison_detail(request, slug):
    comparison = get_object_or_404(Comparison, slug=slug)
    devices = comparison.devices.all()
    
    # Инициализируем структуру данных
    specifications = {}
    
    for device in devices:
        for spec in device.specifications.all().select_related('field__category'):
            category = spec.field.category.name if spec.field.category else "Общие"
            field_name = spec.field.name
            field_unit = spec.field.unit
            
            if category not in specifications:
                specifications[category] = {}
            
            if field_name not in specifications[category]:
                specifications[category][field_name] = {
                    'unit': field_unit,
                    'values': {},
                    'is_higher_better': spec.field.is_higher_better
                }
            
            specifications[category][field_name]['values'][device.id] = spec.value

    context = {
        'comparison': comparison,
        'devices': devices,
        'specifications': specifications.items(),  # Преобразуем в список пар
        'user_vote': None
    }
    
    if request.user.is_authenticated:
        context['user_vote'] = ComparisonVote.objects.filter(
            comparison=comparison,
            user=request.user
        ).first()
    
    return render(request, 'comparisons/comparison_detail.html', context)

@login_required
def vote_for_device(request, comparison_slug, device_slug):
    comparison = get_object_or_404(Comparison, slug=comparison_slug)
    device = get_object_or_404(Device, slug=device_slug)
    
    if device in comparison.devices.all():
        ComparisonVote.objects.update_or_create(
            comparison=comparison,
            user=request.user,
            defaults={'device': device}
        )
    
    return redirect('comparisons:comparison_detail', slug=comparison_slug)

def comparison_list(request):
    comparisons = Comparison.objects.all().order_by('-created_date')
    return render(request, 'comparisons/comparison_list.html', {
        'comparisons': comparisons
    })

 
--- END comparisons/views.py ---

--- comparisons/apps.py ---
 from django.apps import AppConfig


class ComparisonsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'comparisons'
 
--- END comparisons/apps.py ---

--- comparisons/admin.py ---
 from django.contrib import admin
from .models import (
    Comparison,
    ComparisonVote
)

@admin.register(Comparison)
class ComparisonAdmin(admin.ModelAdmin):
    list_display = ['title', 'created_by', 'created_date', 'is_public']
    list_filter = ['is_public', 'created_date']
    search_fields = ['title']
    filter_horizontal = ['devices']

@admin.register(ComparisonVote)
class ComparisonVoteAdmin(admin.ModelAdmin):
    list_display = ['comparison', 'device', 'user', 'created_date']
    list_filter = ['created_date']
    search_fields = ['comparison__title', 'device__name', 'user__username']
 
--- END comparisons/admin.py ---

--- comparisons/forms.py ---
  
--- END comparisons/forms.py ---

--- comparisons/urls.py ---
 from django.urls import path
from . import views

app_name = 'comparisons'

urlpatterns = [
    path('', views.comparison_list, name='comparison_list'),
    path('create/', views.comparison_create, name='comparison_create'),
    path('<slug:slug>/', views.comparison_detail, name='comparison_detail'),
    path('<slug:comparison_slug>/vote/<slug:device_slug>/', 
         views.vote_for_device, name='vote_for_device'),
]  
--- END comparisons/urls.py ---

--- comparisons/__init__.py ---
  
--- END comparisons/__init__.py ---

--- comparisons/models.py ---
 from django.db import models
from django.utils.text import slugify
from django.conf import settings
from devices.models import Device

class Comparison(models.Model):
    title = models.CharField(max_length=255, verbose_name='Название', blank=True)
    slug = models.SlugField(unique=True, blank=True)
    devices = models.ManyToManyField(Device, verbose_name='Устройства')
    created_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name='Создатель')
    created_date = models.DateTimeField(auto_now_add=True)
    is_public = models.BooleanField(default=True, verbose_name='Публичное сравнение')
    
    class Meta:
        verbose_name = 'Сравнение'
        verbose_name_plural = 'Сравнения'
        ordering = ['-created_date']
    
    def save(self, *args, **kwargs):
        # Генерация заголовка, если он не задан
        if not self.title:
            devices_list = list(self.devices.all())
            if devices_list:
                self.title = f"Сравнение: {' vs '.join([device.name for device in devices_list[:3]])}"
                if len(devices_list) > 3:
                    self.title += " и другие"
        
        # Генерация slug, если он не задан
        if not self.slug:
            base_slug = slugify(self.title)
            unique_slug = base_slug
            num = 1
            while Comparison.objects.filter(slug=unique_slug).exists():
                unique_slug = f"{base_slug}-{num}"
                num += 1
            self.slug = unique_slug
        
        super().save(*args, **kwargs)
    
    def __str__(self):
        return self.title

class ComparisonVote(models.Model):
    comparison = models.ForeignKey(Comparison, on_delete=models.CASCADE, related_name='votes', verbose_name='Сравнение')
    device = models.ForeignKey(Device, on_delete=models.CASCADE, verbose_name='Устройство')
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name='Пользователь')
    created_date = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = 'Голос в сравнении'
        verbose_name_plural = 'Голоса в сравнении'
        unique_together = ['comparison', 'user']  # Один пользователь - один голос в сравнении
    
    def __str__(self):
        return f"Голос за {self.device.name} в {self.comparison.title}"
 
--- END comparisons/models.py ---

--- comparisons/templatetags/comparison_tags.py ---
 from django import template

register = template.Library()

@register.filter
def get_item(dictionary, key):
    return dictionary.get(key)  
--- END comparisons/templatetags/comparison_tags.py ---

--- comparisons/templatetags/custom_filters.py ---
 from django import template

register = template.Library()

@register.filter
def get_item(dictionary, key):
    return dictionary.get(key)  
--- END comparisons/templatetags/custom_filters.py ---

--- comparisons/templates/comparisons/comparison_create.html ---
 {% extends 'base.html' %}

{% block title %}Создать сравнение - Tech Help{% endblock %}

{% block content %}
<div class="container mx-auto px-4">
    <h1 class="text-3xl font-bold text-white mb-8">Создать сравнение</h1>
    
    <form method="post" class="card p-6">
        {% csrf_token %}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
            {% for device in devices %}
            <div class="relative">
                <input type="checkbox" 
                       name="devices" 
                       value="{{ device.id }}"
                       id="device_{{ device.id }}"
                       class="hidden peer">
                <label for="device_{{ device.id }}" 
                       class="block card peer-checked:border-blue-500 peer-checked:ring-2 peer-checked:ring-blue-500 cursor-pointer">
                       {% if device.main_image %}
                       <img src="{{ device.main_image.url }}" 
                            alt="{{ device.name }}"
                            class="w-full h-48 object-cover">
                       {% else %}
                       <div class="w-full h-full bg-slate-800 flex items-center justify-center">
                           <i class="fas fa-camera text-3xl text-slate-600"></i>
                       </div>
                       {% endif %}
                    <div class="p-4">
                        <h3 class="text-lg font-semibold text-white mb-2">{{ device.name }}</h3>
                        <p class="text-gray-400">{{ device.manufacturer }}</p>
                    </div>
                </label>
            </div>
            {% endfor %}
        </div>
        
        <div class="flex justify-end">
            <button type="submit" class="btn-primary">
                Сравнить выбранные устройства
            </button>
        </div>
    </form>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form');
    form.addEventListener('submit', function(e) {
        const checked = document.querySelectorAll('input[name="devices"]:checked');
        if (checked.length < 2) {
            e.preventDefault();
            alert('Выберите минимум 2 устройства для сравнения');
        }
    });
});
</script>
{% endblock %} 
 
--- END comparisons/templates/comparisons/comparison_create.html ---

--- comparisons/templates/comparisons/comparison_detail.html ---
 {% extends 'base.html' %}
{% load static %}
{% load custom_filters %}

{% block title %}{{ comparison.title }} - Tech Help{% endblock %}

{% block content %}
<div class="container mx-auto px-4">
    <div class="absolute left-1/2 top-16 bottom-0 w-px bg-slate-700"></div>

    <!-- Две карусели для каждого устройства -->
    <div class="grid grid-cols-2 gap-8">
        {% for device in devices %}
        <div>
            <!-- Название устройства -->
            <div class="text-center mb-4">
                <p class="text-xl font-semibold text-white">{{ device.name }}</p>
            </div>
            
            <!-- Карусель -->
            <div class="swiper-container device-carousel-{{ forloop.counter }} rounded-lg overflow-hidden">
                <div class="swiper-wrapper">
                    <!-- Главное фото -->
                    {% if device.main_image %}
                    <div class="swiper-slide">
                        <div class="w-full h-96 flex items-center justify-center bg-slate-800">
                            <img src="{{ device.main_image.url }}" 
                                 alt="{{ device.name }}" 
                                 class="max-w-full max-h-full object-contain">
                        </div>
                    </div>
                    {% endif %}
                    
                    <!-- Дополнительные фото -->
                    {% for image in device.images.all %}
                    <div class="swiper-slide">
                        <div class="w-full h-96 flex items-center justify-center bg-slate-800">
                            <img src="{{ image.image.url }}" 
                                 alt="{{ device.name }}" 
                                 class="max-w-full max-h-full object-contain">
                        </div>
                    </div>
                    {% endfor %}
                </div>
                
            </div>
        </div>
        {% endfor %}
    </div>

    
    <!-- Сравнение характеристик -->
    <div class="card p-6">
        <h2 class="text-2xl font-bold text-white mb-6">Сравнение характеристик</h2>
        <div class="space-y-8">
            {% for category, specs in specifications %}
            <div class="border border-slate-700 rounded-lg">
                <div class="bg-slate-800 p-4 border-b border-slate-700">
                    <h3 class="text-xl font-semibold text-blue-400">{{ category }}</h3>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 divide-x divide-slate-700">
                    {% for device in devices %}
                    <div class="p-4">
                        <div class="space-y-4">
                            {% for spec_name, spec_data in specs.items %}
                            <div class="flex justify-between items-center border-b border-slate-700 pb-2">
                                <span class="text-gray-400">{{ spec_name }}</span>
                                <span class="font-semibold text-white">
                                    {% if spec_data.values|get_item:device.id %}
                                        {{ spec_data.values|get_item:device.id }}
                                        {% if spec_data.unit %}<span class="text-gray-400 ml-1">{{ spec_data.unit }}</span>{% endif %}
                                    {% else %}
                                        <span class="text-gray-500">—</span>
                                    {% endif %}
                                </span>
                            </div>
                            {% endfor %}
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Инициализация каруселей для каждого устройства
        {% for device in devices %}
        new Swiper('.device-carousel-{{ forloop.counter }}', {
            slidesPerView: 1,
            spaceBetween: 30,
            loop: true,
            autoplay: {
                delay: 5000,
                disableOnInteraction: false,
            },
            observer: true,
            observeParents: true,
        });
        {% endfor %}
    });
</script>
{% endblock %}  
--- END comparisons/templates/comparisons/comparison_detail.html ---

--- comparisons/templates/comparisons/comparison_list.html ---
 {% extends 'base.html' %}

{% block title %}Tech Help - Сравнения{% endblock %}

{% block content %}
<div class="container mx-auto px-4">
    <!-- Заголовок и кнопка создания -->
    <div class="flex justify-between items-center mb-8">
        <h1 class="text-3xl font-bold text-white">Сравнения</h1>
        {% if user.is_authenticated %}
        <a href="{% url 'comparisons:comparison_create' %}" class="btn-primary">
            <i class="fas fa-plus mr-2"></i>Создать сравнение
        </a>
        {% endif %}
    </div>

    <!-- Список сравнений -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
    {% for comparison in comparisons %}
    <a href="{% url 'comparisons:comparison_detail' comparison.slug %}"
       class="block group">
        <div class="card bg-slate-700/50 hover:bg-slate-700 transition-all duration-200 rounded-lg overflow-hidden hover:scale-105 flex">
            <!-- Левая часть карточки -->
            <div class="w-1/2 p-4 flex flex-col justify-between">
                <div>
                    <div class="flex flex-wrap gap-2 mb-2 justify-center">
                        <span class="badge text-lg">{{ comparison.devices.first.name }}</span>
                    </div>
                    {% if comparison.devices.first.main_image %}
                        <img src="{{ comparison.devices.first.main_image.url }}"
                             alt="{{ comparison.title }}"
                             class="w-full h-auto object-cover rounded-md">
                    {% else %}
                         <div class="w-full h-full bg-slate-800 flex items-center justify-center rounded-md mb-2">
                            <i class="fas fa-camera text-3xl text-slate-600"></i>
                        </div>
                    {% endif %}
                </div>

            </div>

            <!-- Вертикальная линия -->
            <div class="border-r border-slate-600"></div>

            <!-- Правая часть карточки -->
            <div class="w-1/2 p-4 flex flex-col justify-between">
                <div>
                    <div class="flex flex-wrap gap-2 mb-2 justify-center">
                        <span class="badge text-lg">{{ comparison.devices.last.name }}</span>
                    </div>
                     {% if comparison.devices.last.main_image %}
                        <img src="{{ comparison.devices.last.main_image.url }}"
                             alt="{{ comparison.title }}"
                             class="w-full h-auto object-cover rounded-md">
                    {% else %}
                         <div class="w-full h-24 bg-slate-800 flex items-center justify-center rounded-md">
                            <i class="fas fa-camera text-3xl text-slate-600"></i>
                        </div>
                    {% endif %}

                </div>

                <div>
                     <!-- Кнопка "Подробнее" удалена, так как вся карточка - ссылка -->
                </div>
            </div>
        </div>
    </a>
    {% empty %}
    <div class="col-span-full text-center py-8">
        <p class="text-gray-400">Сравнений пока нет</p>
    </div>
    {% endfor %}
</div>

</div>
{% endblock %}  
--- END comparisons/templates/comparisons/comparison_list.html ---

--- devices/tests.py ---
 from django.test import TestCase

# Create your tests here.
 
--- END devices/tests.py ---

--- devices/views.py ---
 from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.db.models import Q
from django.http import JsonResponse
from .models import Device, DeviceCategory, DeviceImage, SpecificationCategory
from django.contrib import messages
from .forms import DeviceForm, DeviceSpecificationFormSet, SpecificationFieldForm


def device_list(request):
    devices = Device.objects.all().order_by('-created_at')
    categories = DeviceCategory.objects.all()
    
    # Фильтрация по категории
    category_slug = request.GET.get('category')
    if category_slug:
        devices = devices.filter(category__slug=category_slug)
    
    # Поиск по названию
    search_query = request.GET.get('search')
    if search_query:
        devices = devices.filter(
            Q(name__icontains=search_query) | 
            Q(manufacturer__icontains=search_query)
        )
    
    context = {
        'devices': devices,
        'categories': categories,
        'current_category': category_slug,
        'search_query': search_query,
    }
    return render(request, 'devices/device_list.html', context)

def device_detail(request, slug):
    device = get_object_or_404(Device, slug=slug)
    # Группируем характеристики по категориям
    specifications = {}
    for category in SpecificationCategory.objects.all():
        specs = device.specifications.filter(field__category=category).select_related('field')
        if specs.exists():
            specifications[category] = specs
    
    return render(request, 'devices/device_detail.html', {
        'device': device,
        'specifications': specifications,
    })


def get_device_specs(request):
    if request.headers.get('x-requested-with') == 'XMLHttpRequest':
        device_id = request.GET.get('device_id')
        if device_id:
            device = get_object_or_404(Device, id=device_id)
            specs = [{
                'name': spec.specification.name,
                'value': spec.value,
                'unit': spec.specification.unit
            } for spec in device.specifications.all()]
            return JsonResponse({'specs': specs})
    return JsonResponse({'error': 'Invalid request'}, status=400)


@login_required
def device_create(request):
    if request.method == 'POST':
        form = DeviceForm(request.POST)
        if form.is_valid():
            device = form.save(commit=False)
            
            # Обработка главного изображения
            if 'main_image' in request.FILES:
                device.main_image = request.FILES['main_image']
            
            device.save()
            
            # Обработка дополнительных изображений
            for image in request.FILES.getlist('images'):
                DeviceImage.objects.create(device=device, image=image)
            
            # Обработка спецификаций
            formset = DeviceSpecificationFormSet(request.POST, instance=device)
            if formset.is_valid():
                formset.save()
                messages.success(request, 'Устройство успешно создано.')
                return redirect('devices:device_detail', slug=device.slug)
    else:
        form = DeviceForm()
        formset = DeviceSpecificationFormSet()
    
    categories = SpecificationCategory.objects.prefetch_related('fields').all()
    
    return render(request, 'devices/device_form.html', {
        'form': form,
        'formset': formset,
        'categories': categories,
        'title': 'Создание устройства'
    })


@login_required
def device_edit(request, slug):
    device = get_object_or_404(Device, slug=slug)
    
    if request.method == 'POST':
        form = DeviceForm(request.POST, instance=device)
        formset = DeviceSpecificationFormSet(request.POST, instance=device)
        
        if form.is_valid():
            device = form.save(commit=False)
            
            # Обработка главного изображения
            if 'main_image' in request.FILES:
                device.main_image = request.FILES['main_image']
            
            device.save()
            
            # Обработка дополнительных изображений
            for image in request.FILES.getlist('images'):
                DeviceImage.objects.create(device=device, image=image)
            
            # Обработка спецификаций
            if formset.is_valid():
                formset.save()
                messages.success(request, 'Устройство успешно обновлено.')
                return redirect('devices:device_detail', slug=device.slug)
    else:
        form = DeviceForm(instance=device)
        formset = DeviceSpecificationFormSet(instance=device)
    
    return render(request, 'devices/device_form.html', {
        'form': form,
        'formset': formset,
        'device': device,
        'title': 'Редактирование устройства',
        'categories': SpecificationCategory.objects.prefetch_related('fields').all()
    })


@login_required
def specification_create(request):
    if not request.user.is_staff:
        messages.error(request, 'У вас нет прав на создание спецификаций.')
        return redirect('devices:device_list')
    
    if request.method == 'POST':
        form = SpecificationFieldForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, 'Характеристика успешно создана!')
            return redirect('devices:device_list')
    else:
        form = SpecificationFieldForm()
    
    return render(request, 'devices/specification_form.html', {
        'form': form,
        'title': 'Создать характеристику'
    })


@login_required
def device_delete(request, slug):
    device = get_object_or_404(Device, slug=slug)
    
    if request.method == 'POST':
        device.delete()
        messages.success(request, 'Устройство успешно удалено.')
        return redirect('devices:device_list')
        
    return render(request, 'devices/device_confirm_delete.html', {
        'device': device
    }) 
--- END devices/views.py ---

--- devices/apps.py ---
 from django.apps import AppConfig


class DevicesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'devices'
 
--- END devices/apps.py ---

--- devices/admin.py ---
 from django.contrib import admin
from .models import (
    Device, 
    DeviceCategory, 
    DeviceImage, 
    SpecificationCategory, 
    SpecificationField, 
    DeviceSpecification,
)


class SpecificationFieldInline(admin.TabularInline):
    model = SpecificationField
    extra = 1

@admin.register(SpecificationCategory)
class SpecificationCategoryAdmin(admin.ModelAdmin):
    list_display = ['name', 'order']
    search_fields = ['name']
    ordering = ['order']
    inlines = [SpecificationFieldInline]

class DeviceSpecificationInline(admin.TabularInline):
    model = DeviceSpecification
    extra = 1
    autocomplete_fields = ['field']

class DeviceImageInline(admin.TabularInline):
    model = DeviceImage
    extra = 1

@admin.register(Device)
class DeviceAdmin(admin.ModelAdmin):
    list_display = ['name', 'category', 'created_at']
    list_filter = ['category']
    search_fields = ['name', 'description']
    inlines = [DeviceImageInline, DeviceSpecificationInline]
    prepopulated_fields = {'slug': ('name',)}

@admin.register(DeviceCategory)
class DeviceCategoryAdmin(admin.ModelAdmin):
    list_display = ['name']
    prepopulated_fields = {'slug': ('name',)}

@admin.register(SpecificationField)
class SpecificationFieldAdmin(admin.ModelAdmin):
    list_display = ['name', 'category', 'unit', 'order']
    list_filter = ['category']
    search_fields = ['name', 'description']
    ordering = ['category', 'order']

 
--- END devices/admin.py ---

--- devices/forms.py ---
 from django import forms
from .models import (
    Device, 
    DeviceSpecification, 
    SpecificationCategory, 
    SpecificationField
)


class DeviceForm(forms.ModelForm):
    class Meta:
        model = Device
        fields = ['name', 'category', 'description']
        widgets = {
            'name': forms.TextInput(attrs={
                'class': 'form-input w-full rounded-lg border-gray-700 bg-gray-800 text-white',
                'placeholder': 'Название устройства'
            }),
            'category': forms.Select(attrs={
                'class': 'form-select w-full rounded-lg border-gray-700 bg-gray-800 text-white'
            }),
            'description': forms.Textarea(attrs={
                'class': 'form-textarea w-full rounded-lg border-gray-700 bg-gray-800 text-white',
                'rows': 3,
                'placeholder': 'Описание устройства'
            }),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            if field != 'specifications':
                self.fields[field].widget.attrs.update({'class': 'form-input'})

    def save(self, commit=True):
        device = super().save(commit=commit)
        if commit and self.cleaned_data.get('specifications'):
            # Удаляем старые спецификации
            device.specifications.all().delete()
            # Добавляем новые
            specs_data = self.cleaned_data['specifications']
            for spec_data in specs_data:
                spec, _ = SpecificationField.objects.get_or_create(
                    name=spec_data['name'],
                    defaults={'unit': spec_data.get('unit', '')}
                )
                DeviceSpecification.objects.create(
                    device=device,
                    specification=spec,
                    value=spec_data['value']
                )
        return device

    def clean_images(self):
        """Метод для обработки дополнительных изображений"""
        return self.files.getlist('images')

class DeviceSpecificationForm(forms.ModelForm):
    class Meta:
        model = DeviceSpecification
        fields = ['field', 'value']
        widgets = {
            'field': forms.HiddenInput(),
            'value': forms.TextInput(attrs={
                'class': 'form-input w-full rounded-lg border-gray-700 bg-gray-800 text-white'
            })
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        if self.instance and self.instance.field:
            self.fields['field'].initial = self.instance.field
            if self.instance.field.unit:
                self.fields['value'].widget.attrs['placeholder'] = f'Введите значение в {self.instance.field.unit}'

class SpecificationFieldForm(forms.ModelForm):
    class Meta:
        model = SpecificationField
        fields = ['name', 'category', 'description', 'unit', 'order']
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-input'}),
            'category': forms.Select(attrs={'class': 'form-select'}),
            'description': forms.Textarea(attrs={'class': 'form-textarea', 'rows': 3}),
            'unit': forms.TextInput(attrs={'class': 'form-input'}),
            'order': forms.NumberInput(attrs={'class': 'form-input'})
        }

class BaseDeviceSpecificationFormSet(forms.BaseInlineFormSet):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.categories = {}
        
        categories = SpecificationCategory.objects.prefetch_related('fields').all()
        
        for category in categories:
            self.categories[category] = []
            for field in category.fields.all():
                existing_spec = None
                if self.instance.pk:
                    existing_spec = self.instance.specifications.filter(field=field).first()
                
                form = DeviceSpecificationForm(
                    data=self.data if self.data else None,
                    prefix=f'spec_{field.id}',
                    instance=existing_spec or DeviceSpecification(device=self.instance, field=field),
                    initial={'field': field.id}
                )
                self.categories[category].append(form)

    def is_valid(self):
        valid = True
        for category_forms in self.categories.values():
            for form in category_forms:
                if form.is_valid():
                    continue
                valid = False
        return valid

    def save(self, commit=True):
        specs = []
        if commit:
            # Сохраняем только заполненные спецификации
            for category_forms in self.categories.values():
                for form in category_forms:
                    if form.is_valid() and form.cleaned_data.get('value'):
                        spec = form.save(commit=False)
                        spec.device = self.instance
                        spec.save()
                        specs.append(spec)
            
            # Удаляем старые спецификации, которые не были обновлены
            self.instance.specifications.exclude(
                id__in=[spec.id for spec in specs]
            ).delete()
        
        return specs

# Создаем FormSet для спецификаций устройства
DeviceSpecificationFormSet = forms.inlineformset_factory(
    Device,
    DeviceSpecification,
    form=DeviceSpecificationForm,
    formset=BaseDeviceSpecificationFormSet,
    extra=0,
    can_delete=False
)  
--- END devices/forms.py ---

--- devices/urls.py ---
 from django.urls import path
from . import views

app_name = 'devices'

urlpatterns = [
    path('', views.device_list, name='device_list'),
    path('create/', views.device_create, name='device_create'),
    path('<slug:slug>/', views.device_detail, name='device_detail'),
    path('<slug:slug>/edit/', views.device_edit, name='device_edit'),
    path('<slug:slug>/delete/', views.device_delete, name='device_delete'),
    path('specification/create/', views.specification_create, name='specification_create'),
]
 
--- END devices/urls.py ---

--- devices/__init__.py ---
  
--- END devices/__init__.py ---

--- devices/models.py ---
 from django.db import models
from django.contrib.auth.models import User
from django.utils.text import slugify
from django.conf import settings
from django.urls import reverse
from unidecode import unidecode  # добавим для корректной транслитерации

class DeviceCategory(models.Model):
    name = models.CharField(max_length=200, verbose_name='Название')
    slug = models.SlugField(unique=True, blank=True)
    
    class Meta:
        verbose_name = 'Категория устройств'
        verbose_name_plural = 'Категории устройств'
    
    def __str__(self):
        return self.name
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(unidecode(self.name))
        super().save(*args, **kwargs)


class SpecificationCategory(models.Model):
    """Категория характеристик (например, 'Дизайн', 'Экран', 'Процессор')"""
    name = models.CharField(max_length=100, verbose_name='Название')
    order = models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')

    class Meta:
        verbose_name = 'Категория характеристик'
        verbose_name_plural = 'Категории характеристик'
        ordering = ['order']

    def __str__(self):
        return self.name

class SpecificationField(models.Model):
    """Поле характеристики (например, 'Вес', 'Толщина', 'Высота')"""
    category = models.ForeignKey(
        SpecificationCategory, 
        on_delete=models.CASCADE,
        related_name='fields',
        verbose_name='Категория'
    )
    name = models.CharField(max_length=100, verbose_name='Название')
    description = models.TextField(
        blank=True, 
        verbose_name='Описание',
        help_text='Объяснение характеристики'
    )
    unit = models.CharField(
        max_length=20, 
        blank=True, 
        verbose_name='Единица измерения',
        help_text='Например: мм, кг, МГц'
    )
    order = models.PositiveIntegerField(default=0, verbose_name='Порядок отображения')
    is_higher_better = models.BooleanField(
        default=False,
        verbose_name="Чем выше тем лучше",
        help_text="Определяет выделение лучшего значения в сравнениях"
    )

    class Meta:
        verbose_name = 'Поле характеристики'
        verbose_name_plural = 'Поля характеристик'
        ordering = ['category', 'order']

    def __str__(self):
        return f"{self.category.name} - {self.name}"

class DeviceImage(models.Model):
    device = models.ForeignKey('Device', related_name='images', on_delete=models.CASCADE)
    image = models.ImageField(upload_to='devices/')
    order = models.PositiveIntegerField(default=0)

    class Meta:
        ordering = ['order']


class Device(models.Model):
    name = models.CharField(max_length=200, verbose_name='Название')
    slug = models.SlugField(unique=True, blank=True)
    description = models.TextField(verbose_name='Описание', blank=True)
    main_image = models.ImageField(
        upload_to='devices/',
        verbose_name='Главное изображение',
        null=True,
        blank=True
    )
    category = models.ForeignKey(
        DeviceCategory, 
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name='Категория'
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='Дата обновления')

    class Meta:
        ordering = ['-created_at']
        verbose_name = 'Устройство'
        verbose_name_plural = 'Устройства'

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(unidecode(self.name))
            original_slug = self.slug
            counter = 1
            while Device.objects.filter(slug=self.slug).exists():
                self.slug = f'{original_slug}-{counter}'
                counter += 1
        super().save(*args, **kwargs)

    def get_absolute_url(self):
        return reverse('devices:device_detail', args=[self.slug])
    
    def get_first_image(self):
        if self.main_image:
            return self.main_image
        first_image = self.images.first()
        return first_image.image if first_image else None

    def __str__(self):
        return self.name

class DeviceSpecification(models.Model):
    """Значение характеристики для конкретного устройства"""
    device = models.ForeignKey(
        'Device', 
        on_delete=models.CASCADE,
        related_name='specifications',
        verbose_name='Устройство'
    )
    field = models.ForeignKey(
        SpecificationField,
        on_delete=models.CASCADE,
        verbose_name='Характеристика',
        null=True,
        blank=True
    )
    value = models.CharField(
        max_length=255, 
        blank=True,
        verbose_name='Значение'
    )

    class Meta:
        verbose_name = 'Характеристика устройства'
        verbose_name_plural = 'Характеристики устройства'
        unique_together = ['device', 'field']

    def __str__(self):
        return f"{self.device.name} - {self.field.name if self.field else 'Без характеристики'}: {self.value}"
 
--- END devices/models.py ---

--- devices/templatetags/device_tags.py ---
 from django import template

register = template.Library()

@register.filter(name='add_class')
def add_class(field, class_name):
    return field.as_widget(attrs={'class': class_name}) 
--- END devices/templatetags/device_tags.py ---

--- devices/templatetags/__init__.py ---
  
--- END devices/templatetags/__init__.py ---

--- devices/templates/devices/device_detail.html ---
 {% extends 'base.html' %}
{% load static %}


{% block title %}Tech Help - {{ device.name }} {% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <!-- Карусель с фотографиями -->
        <div class="swiper device-carousel mb-8 rounded-lg overflow-hidden">
            <div class="swiper-wrapper">
                <!-- Главное фото -->
                {% if device.main_image %}
                <div class="swiper-slide">
                    <div class="w-full h-96 flex items-center justify-center bg-slate-800">
                        <img src="{{ device.main_image.url }}" 
                             alt="{{ device.name }}" 
                             class="max-w-full max-h-full object-contain">
                    </div>
                </div>
                {% endif %}
                
                <!-- Дополнительные фото -->
                {% for image in device.images.all %}
                <div class="swiper-slide">
                    <div class="w-full h-96 flex items-center justify-center bg-slate-800">
                        <img src="{{ image.image.url }}" 
                             alt="{{ device.name }}" 
                             class="max-w-full max-h-full object-contain">
                    </div>
                </div>
                {% endfor %}
            </div>
            
            <!-- Навигация -->
            <div class="swiper-button-next"></div>
            <div class="swiper-button-prev"></div>
            <div class="swiper-pagination"></div>
        </div>

        <!-- Заголовок и основная информация -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold mb-4">{{ device.name }}</h1>
            {% if device.description %}
            <p class="text-gray-300 mb-4">{{ device.description }}</p>
            {% endif %}
            
            <div class="flex items-center gap-4">
                {% if device.category %}
                <span class="px-3 py-1 bg-blue-500 text-sm rounded-full">
                    {{ device.category.name }}
                </span>
                {% endif %}
                
                {% if user.is_authenticated %}
                <div class="flex gap-2">
                    <a href="{% url 'devices:device_edit' device.slug %}" 
                       class="btn-secondary btn-sm">
                        Редактировать
                    </a>
                    <a href="{% url 'devices:device_delete' device.slug %}" 
                       class="btn-danger btn-sm">
                        Удалить
                    </a>
                </div>
                {% endif %}
            </div>
        </div>

        <!-- Характеристики по категориям -->
        <div class="space-y-6">
            {% for category, specs in specifications.items %}
            <div class="bg-slate-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">{{ category.name }}</h2>
                
                <div class="divide-y divide-slate-700">
                    {% for spec in specs %}
                    <div class="py-3 flex justify-between">
                        <div class="flex items-center gap-2">
                            <span class="text-gray-300">{{ spec.field.name }}</span>
                            {% if spec.field.description %}
                            <button type="button"
                                    class="text-gray-400 hover:text-gray-300"
                                    data-tooltip="{{ spec.field.description }}">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                            </button>
                            {% endif %}
                        </div>
                        <div class="text-right">
                            <span class="font-medium">
                                {{ spec.value }}
                                {% if spec.field.unit %}
                                <span class="text-gray-400">{{ spec.field.unit }}</span>
                                {% endif %}
                            </span>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</div>
<script>
    const swiper = new Swiper('.device-carousel', {
        slidesPerView: 1,
        spaceBetween: 30,
        loop: true,
        pagination: {
            el: '.swiper-pagination',
            clickable: true,
        },
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
        autoplay: {
            delay: 5000,
            disableOnInteraction: false,
        },
    });
</script>
{% endblock %}  
--- END devices/templates/devices/device_detail.html ---

--- devices/templates/devices/device_confirm_delete.html ---
 {% extends 'base.html' %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-lg mx-auto">
        <div class="bg-slate-800 rounded-lg p-6 border border-slate-700">
            <h1 class="text-2xl font-bold mb-4">Удаление устройства</h1>
            
            <p class="text-gray-300 mb-6">
                Вы уверены, что хотите удалить устройство "{{ device.name }}"?
                Это действие нельзя будет отменить.
            </p>
            
            <form method="post" class="flex gap-4">
                {% csrf_token %}
                <button type="submit" class="btn-danger">
                    Удалить
                </button>
                <a href="{% url 'devices:device_detail' device.slug %}" 
                   class="btn-secondary">
                    Отмена
                </a>
            </form>
        </div>
    </div>
</div>
{% endblock %}  
--- END devices/templates/devices/device_confirm_delete.html ---

--- devices/templates/devices/device_form.html ---
 {% extends 'base.html' %}
{% load static %}
{% load device_tags %}

{% block title %}Tech Help - Устройство{% endblock %}

{% block head %}
<script>
// Преобразуем спецификации из Python в JavaScript
const existingSpecs = {{ specifications|safe }};
</script>
<script src="{% static 'js/device-form.js' %}"></script>
{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <h1 class="text-2xl font-bold mb-6">{{ title }}</h1>

        <form method="post" enctype="multipart/form-data" class="space-y-6">
            {% csrf_token %}
            
            <!-- Основная информация об устройстве -->
            <div class="bg-slate-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Основная информация</h2>
                
                {% for field in form %}
                <div class="mb-4">
                    <label for="{{ field.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                        {{ field.label }}
                    </label>
                    {{ field }}
                    {% if field.help_text %}
                    <p class="mt-1 text-sm text-gray-400">{{ field.help_text }}</p>
                    {% endif %}
                    {% if field.errors %}
                    <div class="mt-1 text-red-500 text-sm">
                        {{ field.errors }}
                    </div>
                    {% endif %}
                </div>
                {% endfor %}
            </div>

            <!-- Главное изображение -->
            <div class="bg-slate-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Главное изображение</h2>
                <input type="file" 
                       name="main_image" 
                       accept="image/*"
                       class="form-input w-full">
                {% if device and device.main_image %}
                <div class="mt-4">
                    <img src="{{ device.main_image.url }}" 
                         alt="Текущее главное изображение"
                         class="w-full max-w-xs rounded-lg">
                </div>
                {% endif %}
            </div>

            <!-- Дополнительные изображения -->
            <div class="bg-slate-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Дополнительные изображения</h2>
                <input type="file" 
                       name="images" 
                       multiple 
                       accept="image/*"
                       class="form-input w-full">
            </div>

            <!-- Характеристики устройства -->
            <div class="space-y-6">
                {{ formset.management_form }}
                {% for category, forms in formset.categories.items %}
                <div class="bg-slate-800 rounded-lg p-6">
                    <h2 class="text-xl font-semibold mb-4">{{ category.name }}</h2>
                    
                    <div class="space-y-4">
                        {% for form in forms %}
                        <div class="flex items-start gap-4">
                            <div class="flex-grow">
                                {{ form.field }}
                                <label class="block text-sm font-medium text-gray-300 mb-2">
                                    {{ form.instance.field.name }}
                                    {% if form.instance.field.unit %}
                                    <span class="text-gray-400">({{ form.instance.field.unit }})</span>
                                    {% endif %}
                                </label>
                                <div class="relative">  <!-- Относительное позиционирование для placeholder -->
                                    {{ form.value|add_class:'bg-gray-100 border-gray-300 focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 text-sm text-gray-900 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 rounded-lg border-none' }}
                                </div>
                                {% if form.instance.field.description %}
                                <p class="mt-1 text-sm text-gray-400">{{ form.instance.field.description }}</p>
                                {% endif %}
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                </div>
                {% endfor %}
            </div>

            <!-- Кнопки действий -->
            <div class="flex justify-end gap-4">
                <a href="{% url 'devices:device_list' %}" 
                   class="btn-secondary">
                    Отмена
                </a>
                <button type="submit" class="btn-primary">
                    {% if device %}Сохранить изменения{% else %}Создать устройство{% endif %}
                </button>
            </div>
        </form>
    </div>
</div>
{% endblock %}  
--- END devices/templates/devices/device_form.html ---

--- devices/templates/devices/specification_form.html ---
 {% extends 'base.html' %}

{% block title %}Tech Help - Характеристика{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <h1 class="text-2xl font-bold mb-6">{{ title }}</h1>

        <form method="post" class="space-y-6">
            {% csrf_token %}
            
            <!-- Основная информация о характеристике -->
            <div class="bg-slate-800 rounded-lg p-6">
                <h2 class="text-xl font-semibold mb-4">Основная информация</h2>
                
                {% for field in form %}
                <div class="mb-4">
                    <label for="{{ field.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                        {{ field.label }}
                    </label>
                    {{ field }}
                    {% if field.help_text %}
                    <p class="mt-1 text-sm text-gray-400">{{ field.help_text }}</p>
                    {% endif %}
                    {% if field.errors %}
                    <div class="mt-1 text-red-500 text-sm">
                        {{ field.errors }}
                    </div>
                    {% endif %}
                </div>
                {% endfor %}
            </div>

            <!-- Кнопки действий -->
            <div class="flex justify-end gap-4">
                <a href="{% url 'devices:device_list' %}" 
                   class="btn-secondary">
                    Отмена
                </a>
                <button type="submit" class="btn-primary">
                    {% if specification %}Сохранить изменения{% else %}Создать характеристику{% endif %}
                </button>
            </div>
        </form>
    </div>
</div>
{% endblock %}  
--- END devices/templates/devices/specification_form.html ---

--- devices/templates/devices/device_list.html ---
 {% extends 'base.html' %}

{% block title %}Tech Help - Устройства{% endblock %}

{% block content %}
<div class="container mx-auto px-0 py-8">
    <!-- Заголовок и кнопки управления -->
    <div class="flex justify-between mb-8">
        <h1 class="text-3xl font-bold text-white">Устройства</h1>
        {% if user.is_staff %}
        <div class="flex gap-4">
            <a href="{% url 'devices:device_create' %}" class="p-4 btn-primary bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">
                <i class="fas fa-plus mr-2"></i>Добавить устройство
            </a>
            <a href="{% url 'devices:specification_create' %}" class="p-4 btn-secondary bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">
                <i class="fas fa-cog mr-2"></i>Добавить характеристику
            </a>
        </div>
        {% endif %}
    </div>

    <!-- Заголовок и поиск -->
    <div class="flex flex-col md:flex-row justify-between items-center mb-8">
        <div class="w-full md:w-auto">
            <form method="get" class="flex gap-4">
                <input type="text" 
                       name="search" 
                       value="{{ search_query|default:'' }}"
                       placeholder="Поиск устройств..."
                       class="form-input flex-grow">
                <button type="submit" class="btn-primary">
                    <i class="fas fa-search"></i>
                </button>
            </form>
        </div>
    </div>

    <!-- Категории -->
    <div class="flex flex-wrap gap-2 mb-8">
        <a href="{% url 'devices:device_list' %}" 
           class="badge {% if not current_category %}bg-blue-600{% else %}bg-slate-700{% endif %} hover:bg-blue-700">
            Все
        </a>
        {% for category in categories %}
        <a href="?category={{ category.slug }}" 
           class="badge {% if current_category == category.slug %}bg-blue-600{% else %}bg-slate-700{% endif %} hover:bg-blue-700">
            {{ category.name }}
        </a>
        {% endfor %}
    </div>

    <!-- Сетка устройств -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {% for device in devices %}
        <a href="{% url 'devices:device_detail' device.slug %}" 
           class="block group">
            <div class="card bg-slate-700/50 hover:bg-slate-700 transition-all duration-200 rounded-lg overflow-hidden hover:scale-105 flex flex-col">
                <div class="aspect-video w-full overflow-hidden">
                    {% if device.main_image %}
                    <img src="{{ device.main_image.url }}" 
                         alt="{{ device.name }}"
                         class="w-full h-full object-cover">
                    {% else %}
                        <div class="w-full h-full bg-slate-800 flex items-center justify-center rounded-md mb-2">
                            <i class="fas fa-camera text-3xl text-slate-600"></i>
                        </div>
                    {% endif %}
                </div>
                <div class="p-4 flex-grow">
                    <div class="flex items-center gap-2 mb-2">
                        {% if device.category %}
                        <span class="text-blue-400">{{ device.category.name }}</span>
                        {% endif %}
                        <span class="text-gray-400">{{ device.created_at|date:"d.m.Y" }}</span>
                    </div>
                    <h2 class="text-xl font-semibold mb-2 text-white group-hover:text-blue-400 transition-colors">
                        {{ device.name }}
                    </h2>
                    <div class="mt-4 text-gray-300 line-clamp-2">
                        {{ device.description|striptags|truncatewords:15 }}
                    </div>
                </div>
            </div>
        </a>
        {% empty %}
        <div class="col-span-full text-center py-8">
            <p class="text-gray-400">Устройства не найдены</p>
        </div>
        {% endfor %}
    </div>
</div>
{% endblock %}  
--- END devices/templates/devices/device_list.html ---

--- accounts/views.py ---
 from django.shortcuts import render, redirect
from django.contrib.auth import login, logout, authenticate
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .forms import RegisterForm, LoginForm

@login_required
def profile_view(request):
    return render(request, 'accounts/profile.html')

def login_view(request):
    if request.method == 'POST':
        form = LoginForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            messages.success(request, 'Вы успешно вошли!')
            return redirect('home')
    else:
        form = LoginForm()
    return render(request, 'accounts/login.html', {'form': form})

def register(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, 'Регистрация успешна!')
            return redirect('home')
    else:
        form = RegisterForm()
    return render(request, 'accounts/register.html', {'form': form})

def logout_view(request):
    logout(request)
    messages.success(request, 'Вы успешно вышли!')
    return redirect('home')  
--- END accounts/views.py ---

--- accounts/apps.py ---
 from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'
 
--- END accounts/apps.py ---

--- accounts/admin.py ---
  
--- END accounts/admin.py ---

--- accounts/forms.py ---
 from django import forms
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from users.models import User

class RegisterForm(UserCreationForm):
    email = forms.EmailField(required=True)
    
    class Meta:
        model = User
        fields = ('username', 'email', 'password1', 'password2')
        
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs.update({
                'class': 'w-full rounded-lg border-gray-300 bg-white text-gray-900'
            })

class LoginForm(AuthenticationForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields:
            self.fields[field].widget.attrs.update({
                'class': 'w-full rounded-lg border-gray-300 bg-white text-gray-900'
            })  
--- END accounts/forms.py ---

--- accounts/urls.py ---
 from django.urls import path
from . import views

app_name = 'accounts'

urlpatterns = [
    path('profile/', views.profile_view, name='profile'),
    path('register/', views.register, name='register'),
    path('login/', views.login_view, name='login'),
    path('logout/', views.logout_view, name='logout'),
]  
--- END accounts/urls.py ---

--- accounts/__init__.py ---
  
--- END accounts/__init__.py ---

--- accounts/templates/accounts/register.html ---
 {% extends 'base.html' %}

{% block title %}Регистрация - Tech Help{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-md mx-auto">
        <h1 class="text-3xl font-bold text-white mb-8">Регистрация</h1>
        
        <form method="post" class="space-y-6 bg-slate-800 p-6 rounded-lg border border-slate-700">
            {% csrf_token %}
            
            {% if form.non_field_errors %}
            <div class="bg-red-500 text-white p-4 rounded-lg">
                {{ form.non_field_errors }}
            </div>
            {% endif %}
            
            <div>
                <label for="{{ form.username.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Имя пользователя
                </label>
                {{ form.username }}
                {% if form.username.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.username.errors.0 }}</p>
                {% endif %}
            </div>
            
            <div>
                <label for="{{ form.email.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Email
                </label>
                {{ form.email }}
                {% if form.email.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.email.errors.0 }}</p>
                {% endif %}
            </div>
            
            <div>
                <label for="{{ form.password1.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Пароль
                </label>
                {{ form.password1 }}
                {% if form.password1.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.password1.errors.0 }}</p>
                {% endif %}
            </div>
            
            <div>
                <label for="{{ form.password2.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Подтверждение пароля
                </label>
                {{ form.password2 }}
                {% if form.password2.errors %}
                <p class="text-red-500 text-sm mt-1">{{ form.password2.errors.0 }}</p>
                {% endif %}
            </div>
            
            <button type="submit" class="w-full btn-primary">
                Зарегистрироваться
            </button>
        </form>
        
        <p class="mt-4 text-center text-gray-400">
            Уже есть аккаунт? <a href="{% url 'accounts:login' %}" class="text-blue-400 hover:text-blue-300">Войдите</a>
        </p>
    </div>
</div>
{% endblock %}  
--- END accounts/templates/accounts/register.html ---

--- accounts/templates/accounts/login.html ---
 {% extends 'base.html' %}

{% block title %}Вход - Tech Help{% endblock %}

{% block content %}
<div class="container mx-auto px-4 py-8">
    <div class="max-w-md mx-auto">
        <h1 class="text-3xl font-bold text-white mb-8">Вход</h1>
        
        <form method="post" class="space-y-6 bg-slate-800 p-6 rounded-lg border border-slate-700">
            {% csrf_token %}
            
            {% if form.non_field_errors %}
            <div class="bg-red-500 text-white p-4 rounded-lg">
                {{ form.non_field_errors }}
            </div>
            {% endif %}
            
            <div>
                <label for="{{ form.username.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Имя пользователя
                </label>
                {{ form.username }}
            </div>
            
            <div>
                <label for="{{ form.password.id_for_label }}" class="block text-sm font-medium text-gray-300 mb-2">
                    Пароль
                </label>
                {{ form.password }}
            </div>
            
            <button type="submit" class="w-full btn-primary">
                Войти
            </button>
        </form>
        
        <p class="mt-4 text-center text-gray-400">
            Нет аккаунта? <a href="{% url 'accounts:register' %}" class="text-blue-400 hover:text-blue-300">Зарегистрируйтесь</a>
        </p>
    </div>
</div>
{% endblock %}  
--- END accounts/templates/accounts/login.html ---

--- accounts/templates/accounts/profile.html ---
 {% extends 'base.html' %}

{% block title %}Профиль - {{ user.username }}{% endblock %}

{% block content %}
<div class="container mx-auto px-4">
    <div class="max-w-2xl mx-auto">
        <h1 class="text-3xl font-bold text-white mb-8">Профиль пользователя</h1>
        
        <div class="card p-6">
            <div class="flex items-center gap-4 mb-6">
                <i class="fas fa-user-circle text-4xl text-blue-400"></i>
                <div>
                    <h2 class="text-xl font-semibold text-white">{{ user.username }}</h2>
                    <p class="text-gray-400">{{ user.email }}</p>
                </div>
            </div>
            
            <div class="border-t border-slate-700 pt-6">
                <h3 class="text-lg font-semibold text-white mb-4">Активность</h3>
                <div class="grid grid-cols-2 gap-4">
                    <div class="text-center p-4 bg-slate-700 rounded-lg">
                        <span class="block text-2xl font-bold text-blue-400">
                            {{ user.article_set.count }}
                        </span>
                        <span class="text-gray-400">Статей</span>
                    </div>
                    <div class="text-center p-4 bg-slate-700 rounded-lg">
                        <span class="block text-2xl font-bold text-blue-400">
                            {{ user.comparison_set.count }}
                        </span>
                        <span class="text-gray-400">Сравнений</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}  
--- END accounts/templates/accounts/profile.html ---

--- profiles/tests.py ---
 from django.test import TestCase

# Create your tests here.
 
--- END profiles/tests.py ---

--- profiles/views.py ---
 from django.shortcuts import render

# Create your views here.
 
--- END profiles/views.py ---

--- profiles/apps.py ---
 from django.apps import AppConfig


class ProfilesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'profiles'
 
--- END profiles/apps.py ---

--- profiles/admin.py ---
 from django.contrib import admin
from .models import Profile, Achievement, UserAchievement

@admin.register(Profile)
class ProfileAdmin(admin.ModelAdmin):
    list_display = ('user', 'articles_read', 'comments_count', 'comparisons_created', 'votes_count')
    list_filter = ('notify_on_comment_reply', 'notify_on_article_update', 'notify_on_device_update')
    search_fields = ('user__username', 'user__email')
    
    fieldsets = (
        ('Основная информация', {
            'fields': ('user', 'avatar')
        }),
        ('Избранное', {
            'fields': ('favorite_articles', 'favorite_devices')
        }),
        ('Статистика', {
            'fields': ('articles_read', 'comments_count', 'comparisons_created', 'votes_count')
        }),
        ('Настройки уведомлений', {
            'fields': ('notify_on_comment_reply', 'notify_on_article_update', 'notify_on_device_update')
        }),
    )
    
    readonly_fields = ('articles_read', 'comments_count', 'comparisons_created', 'votes_count')

@admin.register(Achievement)
class AchievementAdmin(admin.ModelAdmin):
    list_display = ('name', 'condition_type', 'condition_value')
    list_filter = ('condition_type',)
    search_fields = ('name', 'description')

class UserAchievementInline(admin.TabularInline):
    model = UserAchievement
    extra = 0
    readonly_fields = ('date_earned',)
    can_delete = False

@admin.register(UserAchievement)
class UserAchievementAdmin(admin.ModelAdmin):
    list_display = ('user', 'achievement', 'date_earned')
    list_filter = ('achievement', 'date_earned')
    search_fields = ('user__username', 'achievement__name')
    readonly_fields = ('date_earned',)
 
--- END profiles/admin.py ---

--- profiles/__init__.py ---
  
--- END profiles/__init__.py ---

--- profiles/models.py ---
 from django.db import models
from django.conf import settings
from django.db.models.signals import post_save
from django.dispatch import receiver
from articles.models import Article
from comparisons.models import Comparison, Device

class Profile(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='profile')
    avatar = models.ImageField(upload_to='avatars/', default='avatars/default.png', verbose_name='Аватар')
    favorite_articles = models.ManyToManyField(Article, blank=True, related_name='favorited_by', verbose_name='Избранные статьи')
    favorite_devices = models.ManyToManyField(Device, blank=True, related_name='favorited_by', verbose_name='Избранные устройства')
    
    # Статистика
    articles_read = models.PositiveIntegerField(default=0, verbose_name='Прочитано статей')
    comments_count = models.PositiveIntegerField(default=0, verbose_name='Количество комментариев')
    comparisons_created = models.PositiveIntegerField(default=0, verbose_name='Создано сравнений')
    votes_count = models.PositiveIntegerField(default=0, verbose_name='Количество голосов')
    
    # Настройки уведомлений
    notify_on_comment_reply = models.BooleanField(default=True, verbose_name='Уведомлять об ответах на комментарии')
    notify_on_article_update = models.BooleanField(default=True, verbose_name='Уведомлять об обновлениях избранных статей')
    notify_on_device_update = models.BooleanField(default=True, verbose_name='Уведомлять об обновлениях избранных устройств')

    class Meta:
        verbose_name = 'Профиль'
        verbose_name_plural = 'Профили'

    def __str__(self):
        return f'Профиль пользователя {self.user.username}'

class Achievement(models.Model):
    name = models.CharField(max_length=100, verbose_name='Название')
    description = models.TextField(verbose_name='Описание')
    icon = models.ImageField(upload_to='achievements/', verbose_name='Иконка')
    condition_value = models.PositiveIntegerField(verbose_name='Значение для получения')
    condition_type = models.CharField(
        max_length=50,
        choices=[
            ('articles_read', 'Прочитано статей'),
            ('comments_count', 'Написано комментариев'),
            ('comparisons_created', 'Создано сравнений'),
            ('votes_count', 'Сделано голосов'),
        ],
        verbose_name='Тип достижения'
    )

    class Meta:
        verbose_name = 'Достижение'
        verbose_name_plural = 'Достижения'

    def __str__(self):
        return self.name

class UserAchievement(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='achievements')
    achievement = models.ForeignKey(Achievement, on_delete=models.CASCADE)
    date_earned = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = 'Достижение пользователя'
        verbose_name_plural = 'Достижения пользователей'
        unique_together = ['user', 'achievement']

    def __str__(self):
        return f'{self.user.username} - {self.achievement.name}'

@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)

@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def save_user_profile(sender, instance, **kwargs):
    instance.profile.save()
 
--- END profiles/models.py ---

--- tech_help/settings.py ---
 from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-llsc$=xe^*3#yvt-0-tv1d(z3tyfop(7p+a=22wmhzbfw)9ka='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    # Наши приложения
    'home.apps.HomeConfig',
    'articles.apps.ArticlesConfig',
    'comparisons.apps.ComparisonsConfig',
    'users.apps.UsersConfig',
    'profiles.apps.ProfilesConfig',
    'devices.apps.DevicesConfig',
    'accounts.apps.AccountsConfig',
    
    'django_browser_reload',
    'django_ckeditor_5',
]
SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_browser_reload.middleware.BrowserReloadMiddleware',
]

ROOT_URLCONF = 'tech_help.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tech_help.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 6,
        }
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Настройки медиафайлов
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
AUTH_USER_MODEL = 'users.User'

# Настройки CKEditor
CKEDITOR_UPLOAD_PATH = "uploads/"  # Путь для загрузки файлов (если используете ckeditor_uploader)
CKEDITOR_IMAGE_BACKEND = "pillow"  # Для обработки изображений
CKEDITOR_JQUERY_URL = '//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js'  # Подключение jQuery

CKEDITOR_5_CONFIGS = {
    'default': {
        'toolbar': ['heading', '|', 'bold', 'italic', 'link', 'bulletedList', 'numberedList', 'blockQuote', 'imageUpload', 'undo', 'redo'],
        'plugins': ['EssentialsPlugin', 'ParagraphPlugin', 'HeadingPlugin', 'ListPlugin', 'BoldPlugin', 'ItalicPlugin', 'LinkPlugin', 'BlockQuotePlugin', 'ImageUploadPlugin'],
        'image': {
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft', 'imageStyle:full', 'imageStyle:alignRight'],
            'styles': [
                'full',
                'alignLeft',
                'alignRight',
            ],
        },
    }
}
 
--- END tech_help/settings.py ---

--- tech_help/urls.py ---
 """
URL configuration for tech_help project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from django.views.generic import TemplateView
from django_ckeditor_5 import views as ckeditor_5_views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('articles/', include('articles.urls')),
    path('comparisons/', include("comparisons.urls")),
    path('devices/', include("devices.urls")),
    path('accounts/', include('accounts.urls')),
    path("__reload__/", include("django_browser_reload.urls")),
    path('', include('home.urls')),
    path('ckeditor5/', include('django_ckeditor_5.urls')),
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

 
--- END tech_help/urls.py ---

--- tech_help/__init__.py ---
  
--- END tech_help/__init__.py ---

--- tech_help/wsgi.py ---
 """
WSGI config for tech_help project.

It exposes the WSGI callable as a module-level variable named ``application``.
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tech_help.settings')

application = get_wsgi_application()  
--- END tech_help/wsgi.py ---

--- tech_help/asgi.py ---
 """
ASGI config for tech_help project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tech_help.settings')

application = get_asgi_application()
 
--- END tech_help/asgi.py ---

--- templates/base.html ---
 {% load static %}
<!DOCTYPE html>
<html lang="ru" class="site-root">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Tech Help{% endblock %}</title>
    
    <link rel="stylesheet" href="{% static 'css/main.css' %}">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    
    {% block head %}{% endblock %}
</head>
<body class="site-body">
    <nav class="main-nav">
        <div class="nav-container">
            <div class="nav-wrapper">
                <!-- Логотип -->
                <a href="/" class="logo">
                    <span class="logo__text">Tech Help</span>
                </a>

                <!-- Основное меню -->
                <ul class="main-menu">
                    <li class="menu-item">
                        <a href="{% url 'articles:article_list' %}" class="menu-link">
                            <i class="menu-icon fas fa-newspaper"></i>
                            <span class="menu-text">Статьи</span>
                        </a>
                    </li>
                    <li class="menu-item">
                        <a href="{% url 'devices:device_list' %}" class="menu-link">
                            <i class="menu-icon fas fa-mobile-alt"></i>
                            <span class="menu-text">Устройства</span>
                        </a>
                    </li>
                    <li class="menu-item">
                        <a href="{% url 'comparisons:comparison_list' %}" class="menu-link">
                            <i class="menu-icon fas fa-balance-scale"></i>
                            <span class="menu-text">Сравнения</span>
                        </a>
                    </li>
                </ul>

                <!-- Управление аккаунтом -->
                <div class="account-menu">
                    {% if user.is_authenticated %}
                        {% if user.is_staff %}
                        <a href="{% url 'admin:index' %}" class="admin-link">
                            <i class="admin-icon fas fa-cog"></i>
                        </a>
                        {% endif %}
                        <a href="{% url 'accounts:profile' %}" class="profile-link">
                            <i class="profile-icon fas fa-user"></i>
                            <span class="username">{{ user.username }}</span>
                        </a>
                        <a href="{% url 'accounts:logout' %}" class="logout-link">
                            <i class="logout-icon fas fa-sign-out-alt"></i>
                        </a>
                    {% else %}
                        <a href="{% url 'accounts:login' %}" class="login-link">
                            <i class="login-icon fas fa-sign-in-alt"></i>
                            <span class="login-text">Войти</span>
                        </a>
                        <a href="{% url 'accounts:register' %}" class="btn btn--register">
                            Регистрация
                        </a>
                    {% endif %}
                </div>
            </div>
        </div>
    </nav>

    <main class="main-content">
        {% if messages %}
        <div class="messages-container">
            {% for message in messages %}
            <div class="message message--{{ message.tags }}">
                {{ message }}
            </div>
            {% endfor %}
        </div>
        {% endif %}
        
        {% block content %}{% endblock %}
    </main>

    <footer class="site-footer">
        <div class="footer-container">
            <div class="copyright">
                © {% now "Y" %} Tech Help. Все права защищены.
            </div>
        </div>
    </footer>

    <!-- Скрипты -->
    <script src="https://unpkg.com/imagesloaded@5/imagesloaded.pkgd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/swiper@8/swiper-bundle.min.js"></script>
</body>
</html> 
--- END templates/base.html ---

--- users/tests.py ---
 from django.test import TestCase

# Create your tests here.
 
--- END users/tests.py ---

--- users/views.py ---
 from django.shortcuts import render

# Create your views here.
 
--- END users/views.py ---

--- users/apps.py ---
 from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'
 
--- END users/apps.py ---

--- users/admin.py ---
 from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from django.utils.translation import gettext_lazy as _
from .models import User

@admin.register(User)
class CustomUserAdmin(UserAdmin):
    list_display = ('username', 'email', 'first_name', 'last_name', 'is_staff', 'date_joined')
    list_filter = ('is_staff', 'is_superuser', 'is_active', 'groups')
    search_fields = ('username', 'first_name', 'last_name', 'email')
    ordering = ('-date_joined',)
    
    fieldsets = (
        (None, {'fields': ('username', 'password')}),
        (_('Personal info'), {'fields': ('first_name', 'last_name', 'email', 'bio', 'birth_date')}),
        (_('Permissions'), {
            'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions'),
        }),
        (_('Important dates'), {'fields': ('last_login', 'date_joined')}),
    )
    
    add_fieldsets = (
        (None, {
            'classes': ('wide',),
            'fields': ('username', 'email', 'password1', 'password2'),
        }),
    )
 
--- END users/admin.py ---

--- users/__init__.py ---
  
--- END users/__init__.py ---

--- users/models.py ---
 from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils.translation import gettext_lazy as _

class User(AbstractUser):
    email = models.EmailField(_('email address'), unique=True)
    bio = models.TextField(_('biography'), max_length=500, blank=True)
    birth_date = models.DateField(_('birth date'), null=True, blank=True)
    
    # Делаем email обязательным полем
    REQUIRED_FIELDS = ['email']

    class Meta:
        verbose_name = 'Пользователь'
        verbose_name_plural = 'Пользователи'

    def __str__(self):
        return self.username
 
--- END users/models.py ---

--- home/tests.py ---
 from django.test import TestCase

# Create your tests here.
 
--- END home/tests.py ---

--- home/views.py ---
 from django.shortcuts import render, get_object_or_404, redirect


def home(request):
	return render(request, 'home/home.html', {}) 
--- END home/views.py ---

--- home/apps.py ---
 from django.apps import AppConfig


class HomeConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'home'
 
--- END home/apps.py ---

--- home/admin.py ---
 from django.contrib import admin

# Register your models here.
 
--- END home/admin.py ---

--- home/urls.py ---
 from django.urls import path
from . import views

app_name = 'home'

urlpatterns = [
    path('', views.home, name='home'),
]
 
--- END home/urls.py ---

--- home/__init__.py ---
  
--- END home/__init__.py ---

--- home/models.py ---
 from django.db import models

# Create your models here.
 
--- END home/models.py ---

--- home/static/home/css/home.css ---
 /* Hero section */
.hero {
    text-align: center;
    padding: var(--space-xl) 0;
}

.hero__title {
    font-size: var(--text-4xl);
    color: var(--color-primary);
    margin-bottom: var(--space-md);
    font-weight: 700;
}

.hero__subtitle {
    font-size: var(--text-xl);
    color: var(--color-text);
    margin-bottom: var(--space-xl);
}

/* Features grid */
.features-grid {
    display: grid;
    gap: var(--space-lg);
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    margin: var(--space-xl) 0;
}

.feature-card {
    background: var(--color-bg-light);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    padding: var(--space-lg);
    transition: var(--transition-default);
}

.feature-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-lg);
}

.feature-card__title {
    font-size: var(--text-xl);
    color: var(--color-primary);
    margin-bottom: var(--space-sm);
}

.feature-card__text {
    color: var(--color-text);
    margin-bottom: var(--space-md);
    line-height: 1.6;
}

.feature-card__link {
    color: var(--color-primary);
    text-decoration: none;
    font-weight: 500;
    transition: var(--transition-default);
}

.feature-card__link:hover {
    color: var(--color-primary-dark);
}

/* Advantages section */
.advantages-section {
    margin: var(--space-xl) 0;
}

.section-title {
    font-size: var(--text-3xl);
    color: var(--color-primary);
    text-align: center;
    margin-bottom: var(--space-xl);
}

.advantages-grid {
    display: grid;
    gap: var(--space-lg);
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
}

.advantage-card {
    background: var(--color-bg-light);
    border-radius: 0.5rem;
    padding: var(--space-lg);
    text-align: center;
}

.advantage-icon {
    font-size: 2.5rem;
    color: var(--color-primary);
    margin-bottom: var(--space-md);
}

.advantage-title {
    font-size: var(--text-lg);
    color: var(--color-primary);
    margin-bottom: var(--space-sm);
}

.advantage-text {
    color: var(--color-text);
    line-height: 1.6;
}

/* CTA section */
.cta-section {
    background: var(--color-bg-light);
    border-radius: 0.5rem;
    padding: var(--space-xl);
    margin: var(--space-xl) 0;
    text-align: center;
}

.cta-title {
    font-size: var(--text-3xl);
    color: var(--color-primary);
    margin-bottom: var(--space-sm);
}

.cta-text {
    font-size: var(--text-lg);
    color: var(--color-text);
    margin-bottom: var(--space-xl);
}

.cta-buttons {
    display: flex;
    gap: var(--space-md);
    justify-content: center;
} 
--- END home/static/home/css/home.css ---

--- home/templates/home/home.html ---
 {% extends 'base.html' %}
{% load static %}

{% block title %}Tech Help - Главная{% endblock %}
{% block head %}<link rel="stylesheet" href="{% static 'home/css/home.css' %}">{% endblock %}

{% block content %}
<div class="home-page">
    <section class="hero">
        <h1 class="hero__title">Добро пожаловать в Tech Help</h1>
        <p class="hero__subtitle">Ваш путеводитель в мире современных технологий</p>
        
        <div class="features-grid">
            <article class="feature-card">
                <h2 class="feature-card__title">Статьи</h2>
                <p class="feature-card__text">Читайте подробные обзоры и аналитику последних технологических новинок</p>
                <a href="{% url 'articles:article_list' %}" class="feature-card__link">Читать статьи</a>
            </article>
            
            <article class="feature-card">
                <h2 class="feature-card__title">Устройства</h2>
                <p class="feature-card__text">Изучайте характеристики и отзывы о современных устройствах</p>
                <a href="{% url 'devices:device_list' %}" class="feature-card__link">Смотреть устройства</a>
            </article>
            
            <article class="feature-card">
                <h2 class="feature-card__title">Сравнения</h2>
                <p class="feature-card__text">Сравнивайте характеристики устройств и делайте осознанный выбор</p>
                <a href="{% url 'comparisons:comparison_list' %}" class="feature-card__link">Сравнить устройства</a>
            </article>
        </div>
    </section>

    <section class="advantages-section">
        <h2 class="section-title">Почему выбирают нас?</h2>
        <div class="advantages-grid">
            <div class="advantage-card">
                <i class="advantage-icon fas fa-chart-line"></i>
                <h3 class="advantage-title">Актуальная информация</h3>
                <p class="advantage-text">Всегда свежие данные и последние новости</p>
            </div>
            <!-- Остальные advantage-card -->
        </div>
    </section>

    {% if not user.is_authenticated %}
    <section class="cta-section">
        <h2 class="cta-title">Начните прямо сейчас!</h2>
        <p class="cta-text">Присоединяйтесь к нашему сообществу и откройте для себя мир технологий</p>
        <div class="cta-buttons">
            <a href="{% url 'accounts:register' %}" class="btn btn--primary">Зарегистрироваться</a>
            <a href="{% url 'accounts:login' %}" class="btn btn--secondary">Войти</a>
        </div>
    </section>
    {% endif %}
</div>
{% endblock %} 
--- END home/templates/home/home.html ---


=== Service Files ===